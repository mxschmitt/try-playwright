name: CI
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
    - uses: microsoft/playwright-github-action@v1
    - name: Use Node.js
      uses: actions/setup-node@v1
      with:
        node-version: 14.x
    - uses: actions/checkout@v2
    - name: Install k3s
      run: |
        curl -sfL https://get.k3s.io | K3S_KUBECONFIG_MODE=777 INSTALL_K3S_EXEC="server --docker" sh -
        mkdir -p ~/.kube
        cp /etc/rancher/k3s/k3s.yaml ~/.kube/config
    - name: Build Docker image control microservice
      run: docker build . -f control-service/Dockerfile --tag ghcr.io/mxschmitt/try-playwright/control-service:a1
    - name: Build Docker image worker microservice
      run: docker build . -f worker/Dockerfile --tag ghcr.io/mxschmitt/try-playwright/worker:a1
    - name: Install dependencies
      run: npm ci
      working-directory: e2e
    - run: kubectl apply -f k8/
    - name: Run e2e tests
      working-directory: e2e
      run: |
        kubectl wait --for=condition=ready pod -l io.kompose.service=frontend
        FRONTEND_PORT=$(kubectl get svc frontend -o=jsonpath='{.spec.ports[?(@.port==80)].nodePort}')
        FRONTEND_URL="http://localhost:$FRONTEND_PORT"
        npx wait-on "$FRONTEND_URL/service/control/health"
        sleep 10
        ROOT_TEST_URL=$FRONTEND_URL npm run test
  lint:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        folder: [frontend, worker]
    defaults:
      run:
        working-directory: ${{ matrix.folder }}
    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js
      uses: actions/setup-node@v1
      with:
        node-version: 15.x
    - name: Install
      run: npm ci
    - name: Lint
      run: npm run lint
    - name: Build
      run: npm run build
  build:
    #needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    strategy:
      fail-fast: false
      matrix:
        dockerfile: [worker, file-service, frontend, control-service]
    steps:
      - uses: actions/checkout@v2
      - name: Build image
        run: docker build . --file ${{ matrix.dockerfile }}/Dockerfile --tag local-image
      - name: Login to GitHub Package Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GHCR_TOKEN }}
      - name: Push image
        run: |
          IMAGE_ID=ghcr.io/${{ github.repository }}/${{ matrix.dockerfile }}

          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

          # Use Docker `latest` tag convention
          [ "$VERSION" == "master" ] && VERSION=latest

          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION

          docker tag local-image $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION
