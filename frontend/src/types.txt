declare module 'playwright-core/accessibility' {
  /**
   * Copyright (c) Microsoft Corporation.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  import * as dom from 'playwright-core/dom';
  export type SerializedAXNode = {
      role: string;
      name: string;
      value?: string | number;
      description?: string;
      keyshortcuts?: string;
      roledescription?: string;
      valuetext?: string;
      disabled?: boolean;
      expanded?: boolean;
      focused?: boolean;
      modal?: boolean;
      multiline?: boolean;
      multiselectable?: boolean;
      readonly?: boolean;
      required?: boolean;
      selected?: boolean;
      checked?: boolean | 'mixed';
      pressed?: boolean | 'mixed';
      level?: number;
      valuemin?: number;
      valuemax?: number;
      autocomplete?: string;
      haspopup?: string;
      invalid?: string;
      orientation?: string;
      children?: SerializedAXNode[];
  };
  export interface AXNode {
      isInteresting(insideControl: boolean): boolean;
      isLeafNode(): boolean;
      isControl(): boolean;
      serialize(): SerializedAXNode;
      children(): Iterable<AXNode>;
  }
  export class Accessibility {
      private _getAXTree;
      constructor(getAXTree: (needle?: dom.ElementHandle) => Promise<{
          tree: AXNode;
          needle: AXNode | null;
      }>);
      snapshot(options?: {
          interestingOnly?: boolean;
          root?: dom.ElementHandle;
      }): Promise<SerializedAXNode | null>;
  }

}
declare module 'playwright-core/api' {
  /**
   * Copyright (c) Microsoft Corporation.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  export { Accessibility } from 'playwright-core/accessibility';
  export { Browser } from 'playwright-core/browser';
  export { BrowserContext } from 'playwright-core/browserContext';
  export { ConsoleMessage } from 'playwright-core/console';
  export { Dialog } from 'playwright-core/dialog';
  export { ElementHandle } from 'playwright-core/dom';
  export { TimeoutError } from 'playwright-core/errors';
  export { Frame } from 'playwright-core/frames';
  export { Keyboard, Mouse } from 'playwright-core/input';
  export { JSHandle } from 'playwright-core/javascript';
  export { Request, Response, Route } from 'playwright-core/network';
  export { FileChooser, Page, Worker } from 'playwright-core/page';
  export { Selectors } from 'playwright-core/selectors';
  export { CRBrowser as ChromiumBrowser } from 'playwright-core/chromium/crBrowser';
  export { CRBrowserContext as ChromiumBrowserContext } from 'playwright-core/chromium/crBrowser';
  export { CRCoverage as ChromiumCoverage } from 'playwright-core/chromium/crCoverage';
  export { CRSession as CDPSession } from 'playwright-core/chromium/crConnection';
  export { FFBrowser as FirefoxBrowser } from 'playwright-core/firefox/ffBrowser';
  export { WKBrowser as WebKitBrowser } from 'playwright-core/webkit/wkBrowser';
  export { BrowserType } from 'playwright-core/server/browserType';
  export { BrowserServer } from 'playwright-core/server/browserServer';

}
declare module 'playwright-core/browser' {
  /**
   * Copyright (c) Microsoft Corporation.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  import { BrowserContext, BrowserContextOptions } from 'playwright-core/browserContext';
  import * as platform from 'playwright-core/platform';
  import { Page } from 'playwright-core/page';
  export interface Browser extends platform.EventEmitterType {
      newContext(options?: BrowserContextOptions): Promise<BrowserContext>;
      contexts(): BrowserContext[];
      newPage(options?: BrowserContextOptions): Promise<Page>;
      isConnected(): boolean;
      close(): Promise<void>;
      _setDebugFunction(debugFunction: (message: string) => void): void;
  }
  export type ConnectOptions = {
      slowMo?: number;
      wsEndpoint: string;
  };
  export function createPageInNewContext(browser: Browser, options?: BrowserContextOptions): Promise<Page>;
  export type LaunchType = 'local' | 'server' | 'persistent';

}
declare module 'playwright-core/browserContext' {
  /**
   * Copyright 2017 Google Inc. All rights reserved.
   * Modifications copyright (c) Microsoft Corporation.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *     http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  import * as network from 'playwright-core/network';
  import { Page, PageBinding } from 'playwright-core/page';
  import * as platform from 'playwright-core/platform';
  import { TimeoutSettings } from 'playwright-core/timeoutSettings';
  import * as types from 'playwright-core/types';
  export type BrowserContextOptions = {
      viewport?: types.Size | null;
      ignoreHTTPSErrors?: boolean;
      javaScriptEnabled?: boolean;
      bypassCSP?: boolean;
      userAgent?: string;
      locale?: string;
      timezoneId?: string;
      geolocation?: types.Geolocation;
      permissions?: string[];
      extraHTTPHeaders?: network.Headers;
      offline?: boolean;
      httpCredentials?: types.Credentials;
      deviceScaleFactor?: number;
      isMobile?: boolean;
      hasTouch?: boolean;
  };
  export interface BrowserContext {
      setDefaultNavigationTimeout(timeout: number): void;
      setDefaultTimeout(timeout: number): void;
      pages(): Page[];
      newPage(): Promise<Page>;
      cookies(urls?: string | string[]): Promise<network.NetworkCookie[]>;
      addCookies(cookies: network.SetNetworkCookieParam[]): Promise<void>;
      clearCookies(): Promise<void>;
      grantPermissions(permissions: string[], options?: {
          origin?: string;
      }): Promise<void>;
      clearPermissions(): Promise<void>;
      setGeolocation(geolocation: types.Geolocation | null): Promise<void>;
      setExtraHTTPHeaders(headers: network.Headers): Promise<void>;
      setOffline(offline: boolean): Promise<void>;
      setHTTPCredentials(httpCredentials: types.Credentials | null): Promise<void>;
      addInitScript(script: Function | string | {
          path?: string;
          content?: string;
      }, arg?: any): Promise<void>;
      exposeFunction(name: string, playwrightFunction: Function): Promise<void>;
      route(url: types.URLMatch, handler: network.RouteHandler): Promise<void>;
      waitForEvent(event: string, optionsOrPredicate?: Function | (types.TimeoutOptions & {
          predicate?: Function;
      })): Promise<any>;
      close(): Promise<void>;
  }
  export abstract class BrowserContextBase extends platform.EventEmitter implements BrowserContext {
      readonly _timeoutSettings: TimeoutSettings;
      readonly _pageBindings: Map<string, PageBinding>;
      readonly _options: BrowserContextOptions;
      readonly _routes: {
          url: types.URLMatch;
          handler: network.RouteHandler;
      }[];
      _closed: boolean;
      private readonly _closePromise;
      private _closePromiseFulfill;
      readonly _permissions: Map<string, string[]>;
      constructor(options: BrowserContextOptions);
      _browserClosed(): void;
      _didCloseInternal(): void;
      abstract pages(): Page[];
      abstract newPage(): Promise<Page>;
      abstract cookies(...urls: string[]): Promise<network.NetworkCookie[]>;
      abstract addCookies(cookies: network.SetNetworkCookieParam[]): Promise<void>;
      abstract clearCookies(): Promise<void>;
      abstract _doGrantPermissions(origin: string, permissions: string[]): Promise<void>;
      abstract _doClearPermissions(): Promise<void>;
      abstract setGeolocation(geolocation: types.Geolocation | null): Promise<void>;
      abstract setHTTPCredentials(httpCredentials: types.Credentials | null): Promise<void>;
      abstract setExtraHTTPHeaders(headers: network.Headers): Promise<void>;
      abstract setOffline(offline: boolean): Promise<void>;
      abstract addInitScript(script: string | Function | {
          path?: string | undefined;
          content?: string | undefined;
      }, arg?: any): Promise<void>;
      abstract exposeFunction(name: string, playwrightFunction: Function): Promise<void>;
      abstract route(url: types.URLMatch, handler: network.RouteHandler): Promise<void>;
      abstract close(): Promise<void>;
      grantPermissions(permissions: string[], options?: {
          origin?: string;
      }): Promise<void>;
      clearPermissions(): Promise<void>;
      setDefaultNavigationTimeout(timeout: number): void;
      setDefaultTimeout(timeout: number): void;
      waitForEvent(event: string, optionsOrPredicate?: Function | (types.TimeoutOptions & {
          predicate?: Function;
      })): Promise<any>;
  }
  export function assertBrowserContextIsNotOwned(context: BrowserContextBase): void;
  export function validateBrowserContextOptions(options: BrowserContextOptions): BrowserContextOptions;
  export function verifyGeolocation(geolocation: types.Geolocation): types.Geolocation;

}
declare module 'playwright-core/chromium/crAccessibility' {
  /**
   * Copyright 2018 Google Inc. All rights reserved.
   * Modifications copyright (c) Microsoft Corporation.
   *
   * Licensed under the Apache License, Version 2.0 (the 'License');
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *     http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an 'AS IS' BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  import { CRSession } from 'playwright-core/chromium/crConnection';
  import * as dom from 'playwright-core/dom';
  import * as accessibility from 'playwright-core/accessibility';
  export function getAccessibilityTree(client: CRSession, needle?: dom.ElementHandle): Promise<{
      tree: accessibility.AXNode;
      needle: accessibility.AXNode | null;
  }>;

}
declare module 'playwright-core/chromium/crBrowser' {
  /**
   * Copyright 2017 Google Inc. All rights reserved.
   * Modifications copyright (c) Microsoft Corporation.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *     http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  import { Browser } from 'playwright-core/browser';
  import { BrowserContext, BrowserContextBase, BrowserContextOptions } from 'playwright-core/browserContext';
  import * as network from 'playwright-core/network';
  import { Page, Worker } from 'playwright-core/page';
  import * as platform from 'playwright-core/platform';
  import { ConnectionTransport } from 'playwright-core/transport';
  import * as types from 'playwright-core/types';
  import { CRConnection, CRSession } from 'playwright-core/chromium/crConnection';
  import { CRPage } from 'playwright-core/chromium/crPage';
  import { Protocol } from 'playwright-core/chromium/protocol';
  export class CRBrowser extends platform.EventEmitter implements Browser {
      readonly _connection: CRConnection;
      _session: CRSession;
      private _clientRootSessionPromise;
      readonly _defaultContext: CRBrowserContext;
      readonly _contexts: Map<string, CRBrowserContext>;
      _crPages: Map<string, CRPage>;
      _backgroundPages: Map<string, CRPage>;
      _serviceWorkers: Map<string, CRServiceWorker>;
      readonly _firstPagePromise: Promise<void>;
      private _firstPageCallback;
      private _tracingRecording;
      private _tracingPath;
      private _tracingClient;
      static connect(transport: ConnectionTransport, isPersistent: boolean, slowMo?: number): Promise<CRBrowser>;
      constructor(connection: CRConnection);
      newContext(options?: BrowserContextOptions): Promise<BrowserContext>;
      contexts(): BrowserContext[];
      newPage(options?: BrowserContextOptions): Promise<Page>;
      _onAttachedToTarget({ targetInfo, sessionId, waitingForDebugger }: Protocol.Target.attachedToTargetPayload): void;
      _onDetachedFromTarget(payload: Protocol.Target.detachFromTargetParameters): void;
      _closePage(crPage: CRPage): Promise<void>;
      close(): Promise<void>;
      newBrowserCDPSession(): Promise<CRSession>;
      startTracing(page?: Page, options?: {
          path?: string;
          screenshots?: boolean;
          categories?: string[];
      }): Promise<void>;
      stopTracing(): Promise<platform.BufferType>;
      isConnected(): boolean;
      _clientRootSession(): Promise<CRSession>;
      _setDebugFunction(debugFunction: (message: string) => void): void;
  }
  class CRServiceWorker extends Worker {
      readonly _browserContext: CRBrowserContext;
      constructor(browserContext: CRBrowserContext, session: CRSession, url: string);
  }
  export class CRBrowserContext extends BrowserContextBase {
      readonly _browser: CRBrowser;
      readonly _browserContextId: string | null;
      readonly _evaluateOnNewDocumentSources: string[];
      constructor(browser: CRBrowser, browserContextId: string | null, options: BrowserContextOptions);
      _initialize(): Promise<void>;
      pages(): Page[];
      newPage(): Promise<Page>;
      cookies(urls?: string | string[]): Promise<network.NetworkCookie[]>;
      addCookies(cookies: network.SetNetworkCookieParam[]): Promise<void>;
      clearCookies(): Promise<void>;
      _doGrantPermissions(origin: string, permissions: string[]): Promise<void>;
      _doClearPermissions(): Promise<void>;
      setGeolocation(geolocation: types.Geolocation | null): Promise<void>;
      setExtraHTTPHeaders(headers: network.Headers): Promise<void>;
      setOffline(offline: boolean): Promise<void>;
      setHTTPCredentials(httpCredentials: types.Credentials | null): Promise<void>;
      addInitScript(script: Function | string | {
          path?: string;
          content?: string;
      }, arg?: any): Promise<void>;
      exposeFunction(name: string, playwrightFunction: Function): Promise<void>;
      route(url: types.URLMatch, handler: network.RouteHandler): Promise<void>;
      close(): Promise<void>;
      backgroundPages(): Page[];
      serviceWorkers(): Worker[];
      newCDPSession(page: Page): Promise<CRSession>;
  }
  export {};

}
declare module 'playwright-core/chromium/crConnection' {
  /**
   * Copyright 2017 Google Inc. All rights reserved.
   * Modifications copyright (c) Microsoft Corporation.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *     http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  import * as platform from 'playwright-core/platform';
  import { ConnectionTransport } from 'playwright-core/transport';
  import { Protocol } from 'playwright-core/chromium/protocol';
  export const ConnectionEvents: {
      Disconnected: symbol;
  };
  export const kBrowserCloseMessageId = -9999;
  export class CRConnection extends platform.EventEmitter {
      private _lastId;
      private readonly _transport;
      private readonly _sessions;
      readonly rootSession: CRSession;
      _closed: boolean;
      _debugProtocol: (message: string) => void;
      constructor(transport: ConnectionTransport);
      static fromSession(session: CRSession): CRConnection;
      session(sessionId: string): CRSession | null;
      _rawSend(sessionId: string, message: any): number;
      _onMessage(message: string): Promise<void>;
      _onClose(): void;
      close(): void;
      createSession(targetInfo: Protocol.Target.TargetInfo): Promise<CRSession>;
      createBrowserSession(): Promise<CRSession>;
  }
  export const CRSessionEvents: {
      Disconnected: symbol;
  };
  export class CRSession extends platform.EventEmitter {
      _connection: CRConnection | null;
      private readonly _callbacks;
      private readonly _targetType;
      private readonly _sessionId;
      private readonly _rootSessionId;
      on: <T extends keyof Protocol.Events | symbol>(event: T, listener: (payload: T extends symbol ? any : Protocol.Events[T extends keyof Protocol.Events ? T : never]) => void) => this;
      addListener: <T extends keyof Protocol.Events | symbol>(event: T, listener: (payload: T extends symbol ? any : Protocol.Events[T extends keyof Protocol.Events ? T : never]) => void) => this;
      off: <T extends keyof Protocol.Events | symbol>(event: T, listener: (payload: T extends symbol ? any : Protocol.Events[T extends keyof Protocol.Events ? T : never]) => void) => this;
      removeListener: <T extends keyof Protocol.Events | symbol>(event: T, listener: (payload: T extends symbol ? any : Protocol.Events[T extends keyof Protocol.Events ? T : never]) => void) => this;
      once: <T extends keyof Protocol.Events | symbol>(event: T, listener: (payload: T extends symbol ? any : Protocol.Events[T extends keyof Protocol.Events ? T : never]) => void) => this;
      constructor(connection: CRConnection, rootSessionId: string, targetType: string, sessionId: string);
      send<T extends keyof Protocol.CommandParameters>(method: T, params?: Protocol.CommandParameters[T]): Promise<Protocol.CommandReturnValues[T]>;
      _onMessage(object: {
          id?: number;
          method: string;
          params: any;
          error: {
              message: string;
              data: any;
          };
          result?: any;
      }): void;
      detach(): Promise<void>;
      _onClosed(): void;
  }

}
declare module 'playwright-core/chromium/crCoverage' {
  /**
   * Copyright 2017 Google Inc. All rights reserved.
   * Modifications copyright (c) Microsoft Corporation.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *     http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  import { CRSession } from 'playwright-core/chromium/crConnection';
  import * as types from 'playwright-core/types';
  type JSRange = {
      startOffset: number;
      endOffset: number;
      count: number;
  };
  type CSSCoverageEntry = {
      url: string;
      text?: string;
      ranges: {
          start: number;
          end: number;
      }[];
  };
  type JSCoverageEntry = {
      url: string;
      source?: string;
      functions: {
          functionName: string;
          ranges: JSRange[];
      }[];
  };
  export class CRCoverage {
      private _jsCoverage;
      private _cssCoverage;
      constructor(client: CRSession);
      startJSCoverage(options?: types.JSCoverageOptions): Promise<void>;
      stopJSCoverage(): Promise<JSCoverageEntry[]>;
      startCSSCoverage(options?: types.CSSCoverageOptions): Promise<void>;
      stopCSSCoverage(): Promise<CSSCoverageEntry[]>;
  }
  export {};

}
declare module 'playwright-core/chromium/crExecutionContext' {
  /**
   * Copyright 2017 Google Inc. All rights reserved.
   * Modifications copyright (c) Microsoft Corporation.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *     http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  import { CRSession } from 'playwright-core/chromium/crConnection';
  import { Protocol } from 'playwright-core/chromium/protocol';
  import * as js from 'playwright-core/javascript';
  export const EVALUATION_SCRIPT_URL = "__playwright_evaluation_script__";
  export class CRExecutionContext implements js.ExecutionContextDelegate {
      _client: CRSession;
      _contextId: number;
      constructor(client: CRSession, contextPayload: Protocol.Runtime.ExecutionContextDescription);
      evaluate(context: js.ExecutionContext, returnByValue: boolean, pageFunction: Function | string, ...args: any[]): Promise<any>;
      getProperties(handle: js.JSHandle): Promise<Map<string, js.JSHandle>>;
      releaseHandle(handle: js.JSHandle): Promise<void>;
      handleJSONValue<T>(handle: js.JSHandle<T>): Promise<T>;
      handleToString(handle: js.JSHandle, includeType: boolean): string;
  }

}
declare module 'playwright-core/chromium/crInput' {
  /**
   * Copyright 2017 Google Inc. All rights reserved.
   * Modifications copyright (c) Microsoft Corporation.
   *
   * Licensed under the Apache License, Version 2.0 (the 'License');
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *     http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an 'AS IS' BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  import * as input from 'playwright-core/input';
  import { CRSession } from 'playwright-core/chromium/crConnection';
  export class RawKeyboardImpl implements input.RawKeyboard {
      private _client;
      constructor(client: CRSession);
      keydown(modifiers: Set<input.Modifier>, code: string, keyCode: number, keyCodeWithoutLocation: number, key: string, location: number, autoRepeat: boolean, text: string | undefined): Promise<void>;
      keyup(modifiers: Set<input.Modifier>, code: string, keyCode: number, keyCodeWithoutLocation: number, key: string, location: number): Promise<void>;
      sendText(text: string): Promise<void>;
  }
  export class RawMouseImpl implements input.RawMouse {
      private _client;
      constructor(client: CRSession);
      move(x: number, y: number, button: input.Button | 'none', buttons: Set<input.Button>, modifiers: Set<input.Modifier>): Promise<void>;
      down(x: number, y: number, button: input.Button, buttons: Set<input.Button>, modifiers: Set<input.Modifier>, clickCount: number): Promise<void>;
      up(x: number, y: number, button: input.Button, buttons: Set<input.Button>, modifiers: Set<input.Modifier>, clickCount: number): Promise<void>;
  }

}
declare module 'playwright-core/chromium/crNetworkManager' {
  /**
   * Copyright 2017 Google Inc. All rights reserved.
   * Modifications copyright (c) Microsoft Corporation.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *     http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  import { CRSession } from 'playwright-core/chromium/crConnection';
  import { Page } from 'playwright-core/page';
  import { RegisteredListener } from 'playwright-core/helper';
  import { Protocol } from 'playwright-core/chromium/protocol';
  import * as network from 'playwright-core/network';
  import * as frames from 'playwright-core/frames';
  import { Credentials } from 'playwright-core/types';
  export class CRNetworkManager {
      private _client;
      private _page;
      private _requestIdToRequest;
      private _requestIdToRequestWillBeSentEvent;
      private _credentials;
      private _attemptedAuthentications;
      private _userRequestInterceptionEnabled;
      private _protocolRequestInterceptionEnabled;
      private _requestIdToInterceptionId;
      private _eventListeners;
      constructor(client: CRSession, page: Page);
      instrumentNetworkEvents(session: CRSession, workerFrame?: frames.Frame): RegisteredListener[];
      initialize(): Promise<void>;
      dispose(): void;
      authenticate(credentials: Credentials | null): Promise<void>;
      setOffline(offline: boolean): Promise<void>;
      setRequestInterception(value: boolean): Promise<void>;
      _updateProtocolRequestInterception(): Promise<void>;
      _onRequestWillBeSent(workerFrame: frames.Frame | undefined, event: Protocol.Network.requestWillBeSentPayload): void;
      _onAuthRequired(event: Protocol.Fetch.authRequiredPayload): void;
      _onRequestPaused(workerFrame: frames.Frame | undefined, event: Protocol.Fetch.requestPausedPayload): void;
      _onRequest(workerFrame: frames.Frame | undefined, event: Protocol.Network.requestWillBeSentPayload, interceptionId: string | null): void;
      _createResponse(request: InterceptableRequest, responsePayload: Protocol.Network.Response): network.Response;
      _handleRequestRedirect(request: InterceptableRequest, responsePayload: Protocol.Network.Response): void;
      _onResponseReceived(event: Protocol.Network.responseReceivedPayload): void;
      _onLoadingFinished(event: Protocol.Network.loadingFinishedPayload): void;
      _onLoadingFailed(event: Protocol.Network.loadingFailedPayload): void;
  }
  class InterceptableRequest implements network.RouteDelegate {
      readonly request: network.Request;
      _requestId: string;
      _interceptionId: string | null;
      _documentId: string | undefined;
      private _client;
      constructor(client: CRSession, frame: frames.Frame, interceptionId: string | null, documentId: string | undefined, allowInterception: boolean, event: Protocol.Network.requestWillBeSentPayload, redirectedFrom: network.Request | null);
      continue(overrides?: {
          method?: string;
          headers?: network.Headers;
          postData?: string;
      }): Promise<void>;
      fulfill(response: network.FulfillResponse): Promise<void>;
      abort(errorCode?: string): Promise<void>;
  }
  export {};

}
declare module 'playwright-core/chromium/crPage' {
  /**
   * Copyright 2017 Google Inc. All rights reserved.
   * Modifications copyright (c) Microsoft Corporation.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *     http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  import * as dom from 'playwright-core/dom';
  import * as frames from 'playwright-core/frames';
  import { CRSession } from 'playwright-core/chromium/crConnection';
  import { CRNetworkManager } from 'playwright-core/chromium/crNetworkManager';
  import { Page, PageBinding } from 'playwright-core/page';
  import { Protocol } from 'playwright-core/chromium/protocol';
  import { PageDelegate } from 'playwright-core/page';
  import { RawMouseImpl, RawKeyboardImpl } from 'playwright-core/chromium/crInput';
  import { CRCoverage } from 'playwright-core/chromium/crCoverage';
  import { CRBrowserContext } from 'playwright-core/chromium/crBrowser';
  import * as types from 'playwright-core/types';
  import * as platform from 'playwright-core/platform';
  export class CRPage implements PageDelegate {
      readonly _client: CRSession;
      readonly _page: Page;
      readonly _networkManager: CRNetworkManager;
      private readonly _contextIdToContext;
      private _eventListeners;
      readonly rawMouse: RawMouseImpl;
      readonly rawKeyboard: RawKeyboardImpl;
      readonly _targetId: string;
      private readonly _opener;
      private readonly _pdf;
      private readonly _coverage;
      readonly _browserContext: CRBrowserContext;
      private _firstNonInitialNavigationCommittedPromise;
      private _firstNonInitialNavigationCommittedCallback;
      private readonly _pagePromise;
      _initializedPage: Page | null;
      constructor(client: CRSession, targetId: string, browserContext: CRBrowserContext, opener: CRPage | null);
      pageOrError(): Promise<Page | Error>;
      private _initialize;
      didClose(): void;
      navigateFrame(frame: frames.Frame, url: string, referrer: string | undefined): Promise<frames.GotoResult>;
      _onLifecycleEvent(event: Protocol.Page.lifecycleEventPayload): void;
      _onFrameStoppedLoading(frameId: string): void;
      _handleFrameTree(frameTree: Protocol.Page.FrameTree): void;
      _onFrameAttached(frameId: string, parentFrameId: string | null): void;
      _onFrameNavigated(framePayload: Protocol.Page.Frame, initial: boolean): void;
      _onFrameRequestedNavigation(payload: Protocol.Page.frameRequestedNavigationPayload): void;
      _onFrameNavigatedWithinDocument(frameId: string, url: string): void;
      _onFrameDetached(frameId: string): void;
      _onExecutionContextCreated(contextPayload: Protocol.Runtime.ExecutionContextDescription): void;
      _onExecutionContextDestroyed(executionContextId: number): void;
      _onExecutionContextsCleared(): void;
      _onAttachedToTarget(event: Protocol.Target.attachedToTargetPayload): void;
      _onDetachedFromTarget(event: Protocol.Target.detachedFromTargetPayload): void;
      _onConsoleAPI(event: Protocol.Runtime.consoleAPICalledPayload): Promise<void>;
      exposeBinding(binding: PageBinding): Promise<void>;
      _initBinding(binding: PageBinding): Promise<void>;
      _onBindingCalled(event: Protocol.Runtime.bindingCalledPayload): void;
      _onDialog(event: Protocol.Page.javascriptDialogOpeningPayload): void;
      _handleException(exceptionDetails: Protocol.Runtime.ExceptionDetails): void;
      _onTargetCrashed(): void;
      _onLogEntryAdded(event: Protocol.Log.entryAddedPayload): void;
      _onFileChooserOpened(event: Protocol.Page.fileChooserOpenedPayload): Promise<void>;
      updateExtraHTTPHeaders(): Promise<void>;
      setViewportSize(viewportSize: types.Size): Promise<void>;
      _updateViewport(updateTouch: boolean): Promise<void>;
      setEmulateMedia(mediaType: types.MediaType | null, colorScheme: types.ColorScheme | null): Promise<void>;
      updateRequestInterception(): Promise<void>;
      setFileChooserIntercepted(enabled: boolean): Promise<void>;
      opener(): Promise<Page | null>;
      reload(): Promise<void>;
      private _go;
      goBack(): Promise<boolean>;
      goForward(): Promise<boolean>;
      evaluateOnNewDocument(source: string): Promise<void>;
      closePage(runBeforeUnload: boolean): Promise<void>;
      canScreenshotOutsideViewport(): boolean;
      setBackgroundColor(color?: {
          r: number;
          g: number;
          b: number;
          a: number;
      }): Promise<void>;
      takeScreenshot(format: 'png' | 'jpeg', documentRect: types.Rect | undefined, viewportRect: types.Rect | undefined, quality: number | undefined): Promise<platform.BufferType>;
      resetViewport(): Promise<void>;
      getContentFrame(handle: dom.ElementHandle): Promise<frames.Frame | null>;
      getOwnerFrame(handle: dom.ElementHandle): Promise<string | null>;
      isElementHandle(remoteObject: any): boolean;
      getBoundingBox(handle: dom.ElementHandle): Promise<types.Rect | null>;
      scrollRectIntoViewIfNeeded(handle: dom.ElementHandle, rect?: types.Rect): Promise<void>;
      getContentQuads(handle: dom.ElementHandle): Promise<types.Quad[] | null>;
      layoutViewport(): Promise<{
          width: number;
          height: number;
      }>;
      setInputFiles(handle: dom.ElementHandle<HTMLInputElement>, files: types.FilePayload[]): Promise<void>;
      adoptElementHandle<T extends Node>(handle: dom.ElementHandle<T>, to: dom.FrameExecutionContext): Promise<dom.ElementHandle<T>>;
      adoptBackendNodeId(backendNodeId: Protocol.DOM.BackendNodeId, to: dom.FrameExecutionContext): Promise<dom.ElementHandle>;
      getAccessibilityTree(needle?: dom.ElementHandle): Promise<{
          tree: import("playwright-core/accessibility").AXNode;
          needle: import("playwright-core/accessibility").AXNode | null;
      }>;
      inputActionEpilogue(): Promise<void>;
      pdf(options?: types.PDFOptions): Promise<platform.BufferType>;
      coverage(): CRCoverage;
      getFrameElement(frame: frames.Frame): Promise<dom.ElementHandle>;
  }

}
declare module 'playwright-core/chromium/crPdf' {
  /**
   * Copyright 2017 Google Inc. All rights reserved.
   * Modifications copyright (c) Microsoft Corporation.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *     http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  import * as platform from 'playwright-core/platform';
  import * as types from 'playwright-core/types';
  import { CRSession } from 'playwright-core/chromium/crConnection';
  export class CRPDF {
      private _client;
      constructor(client: CRSession);
      generate(options?: types.PDFOptions): Promise<platform.BufferType>;
  }

}
declare module 'playwright-core/chromium/crProtocolHelper' {
  /**
   * Copyright 2017 Google Inc. All rights reserved.
   * Modifications copyright (c) Microsoft Corporation.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *     http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  import { CRSession } from 'playwright-core/chromium/crConnection';
  import { Protocol } from 'playwright-core/chromium/protocol';
  import * as platform from 'playwright-core/platform';
  export function getExceptionMessage(exceptionDetails: Protocol.Runtime.ExceptionDetails): string;
  export function valueFromRemoteObject(remoteObject: Protocol.Runtime.RemoteObject): any;
  export function releaseObject(client: CRSession, remoteObject: Protocol.Runtime.RemoteObject): Promise<void>;
  export function readProtocolStream(client: CRSession, handle: string, path: string | null): Promise<platform.BufferType>;
  export function toConsoleMessageLocation(stackTrace: Protocol.Runtime.StackTrace | undefined): {
      url: string;
      lineNumber: number;
      columnNumber: number;
  } | {
      url?: undefined;
      lineNumber?: undefined;
      columnNumber?: undefined;
  };
  export function exceptionToError(exceptionDetails: Protocol.Runtime.ExceptionDetails): Error;

}
declare module 'playwright-core/chromium/events' {
  /**
   * Copyright 2019 Google Inc. All rights reserved.
   * Modifications copyright (c) Microsoft Corporation.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *     http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  export const Events: {
      CRBrowserContext: {
          BackgroundPage: string;
          ServiceWorker: string;
      };
  };

}
declare module 'playwright-core/chromium/protocol' {
  type binary = string;
  export module Protocol {
      module Accessibility {
          /**
           * Unique accessibility node identifier.
           */
          type AXNodeId = string;
          /**
           * Enum of possible property types.
           */
          type AXValueType = "boolean" | "tristate" | "booleanOrUndefined" | "idref" | "idrefList" | "integer" | "node" | "nodeList" | "number" | "string" | "computedString" | "token" | "tokenList" | "domRelation" | "role" | "internalRole" | "valueUndefined";
          /**
           * Enum of possible property sources.
           */
          type AXValueSourceType = "attribute" | "implicit" | "style" | "contents" | "placeholder" | "relatedElement";
          /**
           * Enum of possible native property sources (as a subtype of a particular AXValueSourceType).
           */
          type AXValueNativeSourceType = "figcaption" | "label" | "labelfor" | "labelwrapped" | "legend" | "tablecaption" | "title" | "other";
          /**
           * A single source for a computed AX property.
           */
          interface AXValueSource {
              /**
               * What type of source this is.
               */
              type: AXValueSourceType;
              /**
               * The value of this property source.
               */
              value?: AXValue;
              /**
               * The name of the relevant attribute, if any.
               */
              attribute?: string;
              /**
               * The value of the relevant attribute, if any.
               */
              attributeValue?: AXValue;
              /**
               * Whether this source is superseded by a higher priority source.
               */
              superseded?: boolean;
              /**
               * The native markup source for this value, e.g. a <label> element.
               */
              nativeSource?: AXValueNativeSourceType;
              /**
               * The value, such as a node or node list, of the native source.
               */
              nativeSourceValue?: AXValue;
              /**
               * Whether the value for this property is invalid.
               */
              invalid?: boolean;
              /**
               * Reason for the value being invalid, if it is.
               */
              invalidReason?: string;
          }
          interface AXRelatedNode {
              /**
               * The BackendNodeId of the related DOM node.
               */
              backendDOMNodeId: DOM.BackendNodeId;
              /**
               * The IDRef value provided, if any.
               */
              idref?: string;
              /**
               * The text alternative of this node in the current context.
               */
              text?: string;
          }
          interface AXProperty {
              /**
               * The name of this property.
               */
              name: AXPropertyName;
              /**
               * The value of this property.
               */
              value: AXValue;
          }
          /**
           * A single computed AX property.
           */
          interface AXValue {
              /**
               * The type of this value.
               */
              type: AXValueType;
              /**
               * The computed value of this property.
               */
              value?: any;
              /**
               * One or more related nodes, if applicable.
               */
              relatedNodes?: AXRelatedNode[];
              /**
               * The sources which contributed to the computation of this property.
               */
              sources?: AXValueSource[];
          }
          /**
           * Values of AXProperty name:
      - from 'busy' to 'roledescription': states which apply to every AX node
      - from 'live' to 'root': attributes which apply to nodes in live regions
      - from 'autocomplete' to 'valuetext': attributes which apply to widgets
      - from 'checked' to 'selected': states which apply to widgets
      - from 'activedescendant' to 'owns' - relationships between elements other than parent/child/sibling.
           */
          type AXPropertyName = "busy" | "disabled" | "editable" | "focusable" | "focused" | "hidden" | "hiddenRoot" | "invalid" | "keyshortcuts" | "settable" | "roledescription" | "live" | "atomic" | "relevant" | "root" | "autocomplete" | "hasPopup" | "level" | "multiselectable" | "orientation" | "multiline" | "readonly" | "required" | "valuemin" | "valuemax" | "valuetext" | "checked" | "expanded" | "modal" | "pressed" | "selected" | "activedescendant" | "controls" | "describedby" | "details" | "errormessage" | "flowto" | "labelledby" | "owns";
          /**
           * A node in the accessibility tree.
           */
          interface AXNode {
              /**
               * Unique identifier for this node.
               */
              nodeId: AXNodeId;
              /**
               * Whether this node is ignored for accessibility
               */
              ignored: boolean;
              /**
               * Collection of reasons why this node is hidden.
               */
              ignoredReasons?: AXProperty[];
              /**
               * This `Node`'s role, whether explicit or implicit.
               */
              role?: AXValue;
              /**
               * The accessible name for this `Node`.
               */
              name?: AXValue;
              /**
               * The accessible description for this `Node`.
               */
              description?: AXValue;
              /**
               * The value for this `Node`.
               */
              value?: AXValue;
              /**
               * All other properties
               */
              properties?: AXProperty[];
              /**
               * IDs for each of this node's child nodes.
               */
              childIds?: AXNodeId[];
              /**
               * The backend ID for the associated DOM node, if any.
               */
              backendDOMNodeId?: DOM.BackendNodeId;
          }
          /**
           * Disables the accessibility domain.
           */
          type disableParameters = {};
          type disableReturnValue = {};
          /**
           * Enables the accessibility domain which causes `AXNodeId`s to remain consistent between method calls.
      This turns on accessibility for the page, which can impact performance until accessibility is disabled.
           */
          type enableParameters = {};
          type enableReturnValue = {};
          /**
           * Fetches the accessibility node and partial accessibility tree for this DOM node, if it exists.
           */
          type getPartialAXTreeParameters = {
              /**
               * Identifier of the node to get the partial accessibility tree for.
               */
              nodeId?: DOM.NodeId;
              /**
               * Identifier of the backend node to get the partial accessibility tree for.
               */
              backendNodeId?: DOM.BackendNodeId;
              /**
               * JavaScript object id of the node wrapper to get the partial accessibility tree for.
               */
              objectId?: Runtime.RemoteObjectId;
              /**
               * Whether to fetch this nodes ancestors, siblings and children. Defaults to true.
               */
              fetchRelatives?: boolean;
          };
          type getPartialAXTreeReturnValue = {
              /**
               * The `Accessibility.AXNode` for this DOM node, if it exists, plus its ancestors, siblings and
        children, if requested.
               */
              nodes: AXNode[];
          };
          /**
           * Fetches the entire accessibility tree
           */
          type getFullAXTreeParameters = {};
          type getFullAXTreeReturnValue = {
              nodes: AXNode[];
          };
      }
      module Animation {
          /**
           * Animation instance.
           */
          interface Animation {
              /**
               * `Animation`'s id.
               */
              id: string;
              /**
               * `Animation`'s name.
               */
              name: string;
              /**
               * `Animation`'s internal paused state.
               */
              pausedState: boolean;
              /**
               * `Animation`'s play state.
               */
              playState: string;
              /**
               * `Animation`'s playback rate.
               */
              playbackRate: number;
              /**
               * `Animation`'s start time.
               */
              startTime: number;
              /**
               * `Animation`'s current time.
               */
              currentTime: number;
              /**
               * Animation type of `Animation`.
               */
              type: "CSSTransition" | "CSSAnimation" | "WebAnimation";
              /**
               * `Animation`'s source animation node.
               */
              source?: AnimationEffect;
              /**
               * A unique ID for `Animation` representing the sources that triggered this CSS
        animation/transition.
               */
              cssId?: string;
          }
          /**
           * AnimationEffect instance
           */
          interface AnimationEffect {
              /**
               * `AnimationEffect`'s delay.
               */
              delay: number;
              /**
               * `AnimationEffect`'s end delay.
               */
              endDelay: number;
              /**
               * `AnimationEffect`'s iteration start.
               */
              iterationStart: number;
              /**
               * `AnimationEffect`'s iterations.
               */
              iterations: number;
              /**
               * `AnimationEffect`'s iteration duration.
               */
              duration: number;
              /**
               * `AnimationEffect`'s playback direction.
               */
              direction: string;
              /**
               * `AnimationEffect`'s fill mode.
               */
              fill: string;
              /**
               * `AnimationEffect`'s target node.
               */
              backendNodeId?: DOM.BackendNodeId;
              /**
               * `AnimationEffect`'s keyframes.
               */
              keyframesRule?: KeyframesRule;
              /**
               * `AnimationEffect`'s timing function.
               */
              easing: string;
          }
          /**
           * Keyframes Rule
           */
          interface KeyframesRule {
              /**
               * CSS keyframed animation's name.
               */
              name?: string;
              /**
               * List of animation keyframes.
               */
              keyframes: KeyframeStyle[];
          }
          /**
           * Keyframe Style
           */
          interface KeyframeStyle {
              /**
               * Keyframe's time offset.
               */
              offset: string;
              /**
               * `AnimationEffect`'s timing function.
               */
              easing: string;
          }
          /**
           * Event for when an animation has been cancelled.
           */
          type animationCanceledPayload = {
              /**
               * Id of the animation that was cancelled.
               */
              id: string;
          };
          /**
           * Event for each animation that has been created.
           */
          type animationCreatedPayload = {
              /**
               * Id of the animation that was created.
               */
              id: string;
          };
          /**
           * Event for animation that has been started.
           */
          type animationStartedPayload = {
              /**
               * Animation that was started.
               */
              animation: Animation;
          };
          /**
           * Disables animation domain notifications.
           */
          type disableParameters = {};
          type disableReturnValue = {};
          /**
           * Enables animation domain notifications.
           */
          type enableParameters = {};
          type enableReturnValue = {};
          /**
           * Returns the current time of the an animation.
           */
          type getCurrentTimeParameters = {
              /**
               * Id of animation.
               */
              id: string;
          };
          type getCurrentTimeReturnValue = {
              /**
               * Current time of the page.
               */
              currentTime: number;
          };
          /**
           * Gets the playback rate of the document timeline.
           */
          type getPlaybackRateParameters = {};
          type getPlaybackRateReturnValue = {
              /**
               * Playback rate for animations on page.
               */
              playbackRate: number;
          };
          /**
           * Releases a set of animations to no longer be manipulated.
           */
          type releaseAnimationsParameters = {
              /**
               * List of animation ids to seek.
               */
              animations: string[];
          };
          type releaseAnimationsReturnValue = {};
          /**
           * Gets the remote object of the Animation.
           */
          type resolveAnimationParameters = {
              /**
               * Animation id.
               */
              animationId: string;
          };
          type resolveAnimationReturnValue = {
              /**
               * Corresponding remote object.
               */
              remoteObject: Runtime.RemoteObject;
          };
          /**
           * Seek a set of animations to a particular time within each animation.
           */
          type seekAnimationsParameters = {
              /**
               * List of animation ids to seek.
               */
              animations: string[];
              /**
               * Set the current time of each animation.
               */
              currentTime: number;
          };
          type seekAnimationsReturnValue = {};
          /**
           * Sets the paused state of a set of animations.
           */
          type setPausedParameters = {
              /**
               * Animations to set the pause state of.
               */
              animations: string[];
              /**
               * Paused state to set to.
               */
              paused: boolean;
          };
          type setPausedReturnValue = {};
          /**
           * Sets the playback rate of the document timeline.
           */
          type setPlaybackRateParameters = {
              /**
               * Playback rate for animations on page
               */
              playbackRate: number;
          };
          type setPlaybackRateReturnValue = {};
          /**
           * Sets the timing of an animation node.
           */
          type setTimingParameters = {
              /**
               * Animation id.
               */
              animationId: string;
              /**
               * Duration of the animation.
               */
              duration: number;
              /**
               * Delay of the animation.
               */
              delay: number;
          };
          type setTimingReturnValue = {};
      }
      module ApplicationCache {
          /**
           * Detailed application cache resource information.
           */
          interface ApplicationCacheResource {
              /**
               * Resource url.
               */
              url: string;
              /**
               * Resource size.
               */
              size: number;
              /**
               * Resource type.
               */
              type: string;
          }
          /**
           * Detailed application cache information.
           */
          interface ApplicationCache {
              /**
               * Manifest URL.
               */
              manifestURL: string;
              /**
               * Application cache size.
               */
              size: number;
              /**
               * Application cache creation time.
               */
              creationTime: number;
              /**
               * Application cache update time.
               */
              updateTime: number;
              /**
               * Application cache resources.
               */
              resources: ApplicationCacheResource[];
          }
          /**
           * Frame identifier - manifest URL pair.
           */
          interface FrameWithManifest {
              /**
               * Frame identifier.
               */
              frameId: Page.FrameId;
              /**
               * Manifest URL.
               */
              manifestURL: string;
              /**
               * Application cache status.
               */
              status: number;
          }
          type applicationCacheStatusUpdatedPayload = {
              /**
               * Identifier of the frame containing document whose application cache updated status.
               */
              frameId: Page.FrameId;
              /**
               * Manifest URL.
               */
              manifestURL: string;
              /**
               * Updated application cache status.
               */
              status: number;
          };
          type networkStateUpdatedPayload = {
              isNowOnline: boolean;
          };
          /**
           * Enables application cache domain notifications.
           */
          type enableParameters = {};
          type enableReturnValue = {};
          /**
           * Returns relevant application cache data for the document in given frame.
           */
          type getApplicationCacheForFrameParameters = {
              /**
               * Identifier of the frame containing document whose application cache is retrieved.
               */
              frameId: Page.FrameId;
          };
          type getApplicationCacheForFrameReturnValue = {
              /**
               * Relevant application cache data for the document in given frame.
               */
              applicationCache: ApplicationCache;
          };
          /**
           * Returns array of frame identifiers with manifest urls for each frame containing a document
      associated with some application cache.
           */
          type getFramesWithManifestsParameters = {};
          type getFramesWithManifestsReturnValue = {
              /**
               * Array of frame identifiers with manifest urls for each frame containing a document
        associated with some application cache.
               */
              frameIds: FrameWithManifest[];
          };
          /**
           * Returns manifest URL for document in the given frame.
           */
          type getManifestForFrameParameters = {
              /**
               * Identifier of the frame containing document whose manifest is retrieved.
               */
              frameId: Page.FrameId;
          };
          type getManifestForFrameReturnValue = {
              /**
               * Manifest URL for document in the given frame.
               */
              manifestURL: string;
          };
      }
      /**
       * Audits domain allows investigation of page violations and possible improvements.
       */
      module Audits {
          interface Issue {
              code: string;
          }
          type issueAddedPayload = {
              issue: Issue;
          };
          /**
           * Returns the response body and size if it were re-encoded with the specified settings. Only
      applies to images.
           */
          type getEncodedResponseParameters = {
              /**
               * Identifier of the network request to get content for.
               */
              requestId: Network.RequestId;
              /**
               * The encoding to use.
               */
              encoding: "webp" | "jpeg" | "png";
              /**
               * The quality of the encoding (0-1). (defaults to 1)
               */
              quality?: number;
              /**
               * Whether to only return the size information (defaults to false).
               */
              sizeOnly?: boolean;
          };
          type getEncodedResponseReturnValue = {
              /**
               * The encoded body as a base64 string. Omitted if sizeOnly is true.
               */
              body?: binary;
              /**
               * Size before re-encoding.
               */
              originalSize: number;
              /**
               * Size after re-encoding.
               */
              encodedSize: number;
          };
          /**
           * Disables issues domain, prevents further issues from being reported to the client.
           */
          type disableParameters = {};
          type disableReturnValue = {};
          /**
           * Enables issues domain, sends the issues collected so far to the client by means of the
      `issueAdded` event.
           */
          type enableParameters = {};
          type enableReturnValue = {};
      }
      /**
       * Defines events for background web platform features.
       */
      module BackgroundService {
          /**
           * The Background Service that will be associated with the commands/events.
      Every Background Service operates independently, but they share the same
      API.
           */
          type ServiceName = "backgroundFetch" | "backgroundSync" | "pushMessaging" | "notifications" | "paymentHandler" | "periodicBackgroundSync";
          /**
           * A key-value pair for additional event information to pass along.
           */
          interface EventMetadata {
              key: string;
              value: string;
          }
          interface BackgroundServiceEvent {
              /**
               * Timestamp of the event (in seconds).
               */
              timestamp: Network.TimeSinceEpoch;
              /**
               * The origin this event belongs to.
               */
              origin: string;
              /**
               * The Service Worker ID that initiated the event.
               */
              serviceWorkerRegistrationId: ServiceWorker.RegistrationID;
              /**
               * The Background Service this event belongs to.
               */
              service: ServiceName;
              /**
               * A description of the event.
               */
              eventName: string;
              /**
               * An identifier that groups related events together.
               */
              instanceId: string;
              /**
               * A list of event-specific information.
               */
              eventMetadata: EventMetadata[];
          }
          /**
           * Called when the recording state for the service has been updated.
           */
          type recordingStateChangedPayload = {
              isRecording: boolean;
              service: ServiceName;
          };
          /**
           * Called with all existing backgroundServiceEvents when enabled, and all new
      events afterwards if enabled and recording.
           */
          type backgroundServiceEventReceivedPayload = {
              backgroundServiceEvent: BackgroundServiceEvent;
          };
          /**
           * Enables event updates for the service.
           */
          type startObservingParameters = {
              service: ServiceName;
          };
          type startObservingReturnValue = {};
          /**
           * Disables event updates for the service.
           */
          type stopObservingParameters = {
              service: ServiceName;
          };
          type stopObservingReturnValue = {};
          /**
           * Set the recording state for the service.
           */
          type setRecordingParameters = {
              shouldRecord: boolean;
              service: ServiceName;
          };
          type setRecordingReturnValue = {};
          /**
           * Clears all stored data for the service.
           */
          type clearEventsParameters = {
              service: ServiceName;
          };
          type clearEventsReturnValue = {};
      }
      /**
       * The Browser domain defines methods and events for browser managing.
       */
      module Browser {
          type BrowserContextID = string;
          type WindowID = number;
          /**
           * The state of the browser window.
           */
          type WindowState = "normal" | "minimized" | "maximized" | "fullscreen";
          /**
           * Browser window bounds information
           */
          interface Bounds {
              /**
               * The offset from the left edge of the screen to the window in pixels.
               */
              left?: number;
              /**
               * The offset from the top edge of the screen to the window in pixels.
               */
              top?: number;
              /**
               * The window width in pixels.
               */
              width?: number;
              /**
               * The window height in pixels.
               */
              height?: number;
              /**
               * The window state. Default to normal.
               */
              windowState?: WindowState;
          }
          type PermissionType = "accessibilityEvents" | "audioCapture" | "backgroundSync" | "backgroundFetch" | "clipboardReadWrite" | "clipboardSanitizedWrite" | "durableStorage" | "flash" | "geolocation" | "midi" | "midiSysex" | "nfc" | "notifications" | "paymentHandler" | "periodicBackgroundSync" | "protectedMediaIdentifier" | "sensors" | "videoCapture" | "idleDetection" | "wakeLockScreen" | "wakeLockSystem";
          type PermissionSetting = "granted" | "denied" | "prompt";
          /**
           * Definition of PermissionDescriptor defined in the Permissions API:
      https://w3c.github.io/permissions/#dictdef-permissiondescriptor.
           */
          interface PermissionDescriptor {
              /**
               * Name of permission.
        See https://cs.chromium.org/chromium/src/third_party/blink/renderer/modules/permissions/permission_descriptor.idl for valid permission names.
               */
              name: string;
              /**
               * For "midi" permission, may also specify sysex control.
               */
              sysex?: boolean;
              /**
               * For "push" permission, may specify userVisibleOnly.
        Note that userVisibleOnly = true is the only currently supported type.
               */
              userVisibleOnly?: boolean;
              /**
               * For "wake-lock" permission, must specify type as either "screen" or "system".
               */
              type?: string;
              /**
               * For "clipboard" permission, may specify allowWithoutSanitization.
               */
              allowWithoutSanitization?: boolean;
          }
          /**
           * Chrome histogram bucket.
           */
          interface Bucket {
              /**
               * Minimum value (inclusive).
               */
              low: number;
              /**
               * Maximum value (exclusive).
               */
              high: number;
              /**
               * Number of samples.
               */
              count: number;
          }
          /**
           * Chrome histogram.
           */
          interface Histogram {
              /**
               * Name.
               */
              name: string;
              /**
               * Sum of sample values.
               */
              sum: number;
              /**
               * Total number of samples.
               */
              count: number;
              /**
               * Buckets.
               */
              buckets: Bucket[];
          }
          /**
           * Set permission settings for given origin.
           */
          type setPermissionParameters = {
              /**
               * Origin the permission applies to, all origins if not specified.
               */
              origin?: string;
              /**
               * Descriptor of permission to override.
               */
              permission: PermissionDescriptor;
              /**
               * Setting of the permission.
               */
              setting: PermissionSetting;
              /**
               * Context to override. When omitted, default browser context is used.
               */
              browserContextId?: BrowserContextID;
          };
          type setPermissionReturnValue = {};
          /**
           * Grant specific permissions to the given origin and reject all others.
           */
          type grantPermissionsParameters = {
              /**
               * Origin the permission applies to, all origins if not specified.
               */
              origin?: string;
              permissions: PermissionType[];
              /**
               * BrowserContext to override permissions. When omitted, default browser context is used.
               */
              browserContextId?: BrowserContextID;
          };
          type grantPermissionsReturnValue = {};
          /**
           * Reset all permission management for all origins.
           */
          type resetPermissionsParameters = {
              /**
               * BrowserContext to reset permissions. When omitted, default browser context is used.
               */
              browserContextId?: BrowserContextID;
          };
          type resetPermissionsReturnValue = {};
          /**
           * Close browser gracefully.
           */
          type closeParameters = {};
          type closeReturnValue = {};
          /**
           * Crashes browser on the main thread.
           */
          type crashParameters = {};
          type crashReturnValue = {};
          /**
           * Crashes GPU process.
           */
          type crashGpuProcessParameters = {};
          type crashGpuProcessReturnValue = {};
          /**
           * Returns version information.
           */
          type getVersionParameters = {};
          type getVersionReturnValue = {
              /**
               * Protocol version.
               */
              protocolVersion: string;
              /**
               * Product name.
               */
              product: string;
              /**
               * Product revision.
               */
              revision: string;
              /**
               * User-Agent.
               */
              userAgent: string;
              /**
               * V8 version.
               */
              jsVersion: string;
          };
          /**
           * Returns the command line switches for the browser process if, and only if
      --enable-automation is on the commandline.
           */
          type getBrowserCommandLineParameters = {};
          type getBrowserCommandLineReturnValue = {
              /**
               * Commandline parameters
               */
              arguments: string[];
          };
          /**
           * Get Chrome histograms.
           */
          type getHistogramsParameters = {
              /**
               * Requested substring in name. Only histograms which have query as a
        substring in their name are extracted. An empty or absent query returns
        all histograms.
               */
              query?: string;
              /**
               * If true, retrieve delta since last call.
               */
              delta?: boolean;
          };
          type getHistogramsReturnValue = {
              /**
               * Histograms.
               */
              histograms: Histogram[];
          };
          /**
           * Get a Chrome histogram by name.
           */
          type getHistogramParameters = {
              /**
               * Requested histogram name.
               */
              name: string;
              /**
               * If true, retrieve delta since last call.
               */
              delta?: boolean;
          };
          type getHistogramReturnValue = {
              /**
               * Histogram.
               */
              histogram: Histogram;
          };
          /**
           * Get position and size of the browser window.
           */
          type getWindowBoundsParameters = {
              /**
               * Browser window id.
               */
              windowId: WindowID;
          };
          type getWindowBoundsReturnValue = {
              /**
               * Bounds information of the window. When window state is 'minimized', the restored window
        position and size are returned.
               */
              bounds: Bounds;
          };
          /**
           * Get the browser window that contains the devtools target.
           */
          type getWindowForTargetParameters = {
              /**
               * Devtools agent host id. If called as a part of the session, associated targetId is used.
               */
              targetId?: Target.TargetID;
          };
          type getWindowForTargetReturnValue = {
              /**
               * Browser window id.
               */
              windowId: WindowID;
              /**
               * Bounds information of the window. When window state is 'minimized', the restored window
        position and size are returned.
               */
              bounds: Bounds;
          };
          /**
           * Set position and/or size of the browser window.
           */
          type setWindowBoundsParameters = {
              /**
               * Browser window id.
               */
              windowId: WindowID;
              /**
               * New window bounds. The 'minimized', 'maximized' and 'fullscreen' states cannot be combined
        with 'left', 'top', 'width' or 'height'. Leaves unspecified fields unchanged.
               */
              bounds: Bounds;
          };
          type setWindowBoundsReturnValue = {};
          /**
           * Set dock tile details, platform-specific.
           */
          type setDockTileParameters = {
              badgeLabel?: string;
              /**
               * Png encoded image.
               */
              image?: binary;
          };
          type setDockTileReturnValue = {};
      }
      /**
       * This domain exposes CSS read/write operations. All CSS objects (stylesheets, rules, and styles)
    have an associated `id` used in subsequent operations on the related object. Each object type has
    a specific `id` structure, and those are not interchangeable between objects of different kinds.
    CSS objects can be loaded using the `get*ForNode()` calls (which accept a DOM node id). A client
    can also keep track of stylesheets via the `styleSheetAdded`/`styleSheetRemoved` events and
    subsequently load the required stylesheet contents using the `getStyleSheet[Text]()` methods.
       */
      module CSS {
          type StyleSheetId = string;
          /**
           * Stylesheet type: "injected" for stylesheets injected via extension, "user-agent" for user-agent
      stylesheets, "inspector" for stylesheets created by the inspector (i.e. those holding the "via
      inspector" rules), "regular" for regular stylesheets.
           */
          type StyleSheetOrigin = "injected" | "user-agent" | "inspector" | "regular";
          /**
           * CSS rule collection for a single pseudo style.
           */
          interface PseudoElementMatches {
              /**
               * Pseudo element type.
               */
              pseudoType: DOM.PseudoType;
              /**
               * Matches of CSS rules applicable to the pseudo style.
               */
              matches: RuleMatch[];
          }
          /**
           * Inherited CSS rule collection from ancestor node.
           */
          interface InheritedStyleEntry {
              /**
               * The ancestor node's inline style, if any, in the style inheritance chain.
               */
              inlineStyle?: CSSStyle;
              /**
               * Matches of CSS rules matching the ancestor node in the style inheritance chain.
               */
              matchedCSSRules: RuleMatch[];
          }
          /**
           * Match data for a CSS rule.
           */
          interface RuleMatch {
              /**
               * CSS rule in the match.
               */
              rule: CSSRule;
              /**
               * Matching selector indices in the rule's selectorList selectors (0-based).
               */
              matchingSelectors: number[];
          }
          /**
           * Data for a simple selector (these are delimited by commas in a selector list).
           */
          interface Value {
              /**
               * Value text.
               */
              text: string;
              /**
               * Value range in the underlying resource (if available).
               */
              range?: SourceRange;
          }
          /**
           * Selector list data.
           */
          interface SelectorList {
              /**
               * Selectors in the list.
               */
              selectors: Value[];
              /**
               * Rule selector text.
               */
              text: string;
          }
          /**
           * CSS stylesheet metainformation.
           */
          interface CSSStyleSheetHeader {
              /**
               * The stylesheet identifier.
               */
              styleSheetId: StyleSheetId;
              /**
               * Owner frame identifier.
               */
              frameId: Page.FrameId;
              /**
               * Stylesheet resource URL.
               */
              sourceURL: string;
              /**
               * URL of source map associated with the stylesheet (if any).
               */
              sourceMapURL?: string;
              /**
               * Stylesheet origin.
               */
              origin: StyleSheetOrigin;
              /**
               * Stylesheet title.
               */
              title: string;
              /**
               * The backend id for the owner node of the stylesheet.
               */
              ownerNode?: DOM.BackendNodeId;
              /**
               * Denotes whether the stylesheet is disabled.
               */
              disabled: boolean;
              /**
               * Whether the sourceURL field value comes from the sourceURL comment.
               */
              hasSourceURL?: boolean;
              /**
               * Whether this stylesheet is created for STYLE tag by parser. This flag is not set for
        document.written STYLE tags.
               */
              isInline: boolean;
              /**
               * Line offset of the stylesheet within the resource (zero based).
               */
              startLine: number;
              /**
               * Column offset of the stylesheet within the resource (zero based).
               */
              startColumn: number;
              /**
               * Size of the content (in characters).
               */
              length: number;
              /**
               * Line offset of the end of the stylesheet within the resource (zero based).
               */
              endLine: number;
              /**
               * Column offset of the end of the stylesheet within the resource (zero based).
               */
              endColumn: number;
          }
          /**
           * CSS rule representation.
           */
          interface CSSRule {
              /**
               * The css style sheet identifier (absent for user agent stylesheet and user-specified
        stylesheet rules) this rule came from.
               */
              styleSheetId?: StyleSheetId;
              /**
               * Rule selector data.
               */
              selectorList: SelectorList;
              /**
               * Parent stylesheet's origin.
               */
              origin: StyleSheetOrigin;
              /**
               * Associated style declaration.
               */
              style: CSSStyle;
              /**
               * Media list array (for rules involving media queries). The array enumerates media queries
        starting with the innermost one, going outwards.
               */
              media?: CSSMedia[];
          }
          /**
           * CSS coverage information.
           */
          interface RuleUsage {
              /**
               * The css style sheet identifier (absent for user agent stylesheet and user-specified
        stylesheet rules) this rule came from.
               */
              styleSheetId: StyleSheetId;
              /**
               * Offset of the start of the rule (including selector) from the beginning of the stylesheet.
               */
              startOffset: number;
              /**
               * Offset of the end of the rule body from the beginning of the stylesheet.
               */
              endOffset: number;
              /**
               * Indicates whether the rule was actually used by some element in the page.
               */
              used: boolean;
          }
          /**
           * Text range within a resource. All numbers are zero-based.
           */
          interface SourceRange {
              /**
               * Start line of range.
               */
              startLine: number;
              /**
               * Start column of range (inclusive).
               */
              startColumn: number;
              /**
               * End line of range
               */
              endLine: number;
              /**
               * End column of range (exclusive).
               */
              endColumn: number;
          }
          interface ShorthandEntry {
              /**
               * Shorthand name.
               */
              name: string;
              /**
               * Shorthand value.
               */
              value: string;
              /**
               * Whether the property has "!important" annotation (implies `false` if absent).
               */
              important?: boolean;
          }
          interface CSSComputedStyleProperty {
              /**
               * Computed style property name.
               */
              name: string;
              /**
               * Computed style property value.
               */
              value: string;
          }
          /**
           * CSS style representation.
           */
          interface CSSStyle {
              /**
               * The css style sheet identifier (absent for user agent stylesheet and user-specified
        stylesheet rules) this rule came from.
               */
              styleSheetId?: StyleSheetId;
              /**
               * CSS properties in the style.
               */
              cssProperties: CSSProperty[];
              /**
               * Computed values for all shorthands found in the style.
               */
              shorthandEntries: ShorthandEntry[];
              /**
               * Style declaration text (if available).
               */
              cssText?: string;
              /**
               * Style declaration range in the enclosing stylesheet (if available).
               */
              range?: SourceRange;
          }
          /**
           * CSS property declaration data.
           */
          interface CSSProperty {
              /**
               * The property name.
               */
              name: string;
              /**
               * The property value.
               */
              value: string;
              /**
               * Whether the property has "!important" annotation (implies `false` if absent).
               */
              important?: boolean;
              /**
               * Whether the property is implicit (implies `false` if absent).
               */
              implicit?: boolean;
              /**
               * The full property text as specified in the style.
               */
              text?: string;
              /**
               * Whether the property is understood by the browser (implies `true` if absent).
               */
              parsedOk?: boolean;
              /**
               * Whether the property is disabled by the user (present for source-based properties only).
               */
              disabled?: boolean;
              /**
               * The entire property range in the enclosing style declaration (if available).
               */
              range?: SourceRange;
          }
          /**
           * CSS media rule descriptor.
           */
          interface CSSMedia {
              /**
               * Media query text.
               */
              text: string;
              /**
               * Source of the media query: "mediaRule" if specified by a @media rule, "importRule" if
        specified by an @import rule, "linkedSheet" if specified by a "media" attribute in a linked
        stylesheet's LINK tag, "inlineSheet" if specified by a "media" attribute in an inline
        stylesheet's STYLE tag.
               */
              source: "mediaRule" | "importRule" | "linkedSheet" | "inlineSheet";
              /**
               * URL of the document containing the media query description.
               */
              sourceURL?: string;
              /**
               * The associated rule (@media or @import) header range in the enclosing stylesheet (if
        available).
               */
              range?: SourceRange;
              /**
               * Identifier of the stylesheet containing this object (if exists).
               */
              styleSheetId?: StyleSheetId;
              /**
               * Array of media queries.
               */
              mediaList?: MediaQuery[];
          }
          /**
           * Media query descriptor.
           */
          interface MediaQuery {
              /**
               * Array of media query expressions.
               */
              expressions: MediaQueryExpression[];
              /**
               * Whether the media query condition is satisfied.
               */
              active: boolean;
          }
          /**
           * Media query expression descriptor.
           */
          interface MediaQueryExpression {
              /**
               * Media query expression value.
               */
              value: number;
              /**
               * Media query expression units.
               */
              unit: string;
              /**
               * Media query expression feature.
               */
              feature: string;
              /**
               * The associated range of the value text in the enclosing stylesheet (if available).
               */
              valueRange?: SourceRange;
              /**
               * Computed length of media query expression (if applicable).
               */
              computedLength?: number;
          }
          /**
           * Information about amount of glyphs that were rendered with given font.
           */
          interface PlatformFontUsage {
              /**
               * Font's family name reported by platform.
               */
              familyName: string;
              /**
               * Indicates if the font was downloaded or resolved locally.
               */
              isCustomFont: boolean;
              /**
               * Amount of glyphs that were rendered with this font.
               */
              glyphCount: number;
          }
          /**
           * Properties of a web font: https://www.w3.org/TR/2008/REC-CSS2-20080411/fonts.html#font-descriptions
           */
          interface FontFace {
              /**
               * The font-family.
               */
              fontFamily: string;
              /**
               * The font-style.
               */
              fontStyle: string;
              /**
               * The font-variant.
               */
              fontVariant: string;
              /**
               * The font-weight.
               */
              fontWeight: string;
              /**
               * The font-stretch.
               */
              fontStretch: string;
              /**
               * The unicode-range.
               */
              unicodeRange: string;
              /**
               * The src.
               */
              src: string;
              /**
               * The resolved platform font family
               */
              platformFontFamily: string;
          }
          /**
           * CSS keyframes rule representation.
           */
          interface CSSKeyframesRule {
              /**
               * Animation name.
               */
              animationName: Value;
              /**
               * List of keyframes.
               */
              keyframes: CSSKeyframeRule[];
          }
          /**
           * CSS keyframe rule representation.
           */
          interface CSSKeyframeRule {
              /**
               * The css style sheet identifier (absent for user agent stylesheet and user-specified
        stylesheet rules) this rule came from.
               */
              styleSheetId?: StyleSheetId;
              /**
               * Parent stylesheet's origin.
               */
              origin: StyleSheetOrigin;
              /**
               * Associated key text.
               */
              keyText: Value;
              /**
               * Associated style declaration.
               */
              style: CSSStyle;
          }
          /**
           * A descriptor of operation to mutate style declaration text.
           */
          interface StyleDeclarationEdit {
              /**
               * The css style sheet identifier.
               */
              styleSheetId: StyleSheetId;
              /**
               * The range of the style text in the enclosing stylesheet.
               */
              range: SourceRange;
              /**
               * New style text.
               */
              text: string;
          }
          /**
           * Fires whenever a web font is updated.  A non-empty font parameter indicates a successfully loaded
      web font
           */
          type fontsUpdatedPayload = {
              /**
               * The web font that has loaded.
               */
              font?: FontFace;
          };
          /**
           * Fires whenever a MediaQuery result changes (for example, after a browser window has been
      resized.) The current implementation considers only viewport-dependent media features.
           */
          type mediaQueryResultChangedPayload = void;
          /**
           * Fired whenever an active document stylesheet is added.
           */
          type styleSheetAddedPayload = {
              /**
               * Added stylesheet metainfo.
               */
              header: CSSStyleSheetHeader;
          };
          /**
           * Fired whenever a stylesheet is changed as a result of the client operation.
           */
          type styleSheetChangedPayload = {
              styleSheetId: StyleSheetId;
          };
          /**
           * Fired whenever an active document stylesheet is removed.
           */
          type styleSheetRemovedPayload = {
              /**
               * Identifier of the removed stylesheet.
               */
              styleSheetId: StyleSheetId;
          };
          /**
           * Inserts a new rule with the given `ruleText` in a stylesheet with given `styleSheetId`, at the
      position specified by `location`.
           */
          type addRuleParameters = {
              /**
               * The css style sheet identifier where a new rule should be inserted.
               */
              styleSheetId: StyleSheetId;
              /**
               * The text of a new rule.
               */
              ruleText: string;
              /**
               * Text position of a new rule in the target style sheet.
               */
              location: SourceRange;
          };
          type addRuleReturnValue = {
              /**
               * The newly created rule.
               */
              rule: CSSRule;
          };
          /**
           * Returns all class names from specified stylesheet.
           */
          type collectClassNamesParameters = {
              styleSheetId: StyleSheetId;
          };
          type collectClassNamesReturnValue = {
              /**
               * Class name list.
               */
              classNames: string[];
          };
          /**
           * Creates a new special "via-inspector" stylesheet in the frame with given `frameId`.
           */
          type createStyleSheetParameters = {
              /**
               * Identifier of the frame where "via-inspector" stylesheet should be created.
               */
              frameId: Page.FrameId;
          };
          type createStyleSheetReturnValue = {
              /**
               * Identifier of the created "via-inspector" stylesheet.
               */
              styleSheetId: StyleSheetId;
          };
          /**
           * Disables the CSS agent for the given page.
           */
          type disableParameters = {};
          type disableReturnValue = {};
          /**
           * Enables the CSS agent for the given page. Clients should not assume that the CSS agent has been
      enabled until the result of this command is received.
           */
          type enableParameters = {};
          type enableReturnValue = {};
          /**
           * Ensures that the given node will have specified pseudo-classes whenever its style is computed by
      the browser.
           */
          type forcePseudoStateParameters = {
              /**
               * The element id for which to force the pseudo state.
               */
              nodeId: DOM.NodeId;
              /**
               * Element pseudo classes to force when computing the element's style.
               */
              forcedPseudoClasses: string[];
          };
          type forcePseudoStateReturnValue = {};
          type getBackgroundColorsParameters = {
              /**
               * Id of the node to get background colors for.
               */
              nodeId: DOM.NodeId;
          };
          type getBackgroundColorsReturnValue = {
              /**
               * The range of background colors behind this element, if it contains any visible text. If no
        visible text is present, this will be undefined. In the case of a flat background color,
        this will consist of simply that color. In the case of a gradient, this will consist of each
        of the color stops. For anything more complicated, this will be an empty array. Images will
        be ignored (as if the image had failed to load).
               */
              backgroundColors?: string[];
              /**
               * The computed font size for this node, as a CSS computed value string (e.g. '12px').
               */
              computedFontSize?: string;
              /**
               * The computed font weight for this node, as a CSS computed value string (e.g. 'normal' or
        '100').
               */
              computedFontWeight?: string;
          };
          /**
           * Returns the computed style for a DOM node identified by `nodeId`.
           */
          type getComputedStyleForNodeParameters = {
              nodeId: DOM.NodeId;
          };
          type getComputedStyleForNodeReturnValue = {
              /**
               * Computed style for the specified DOM node.
               */
              computedStyle: CSSComputedStyleProperty[];
          };
          /**
           * Returns the styles defined inline (explicitly in the "style" attribute and implicitly, using DOM
      attributes) for a DOM node identified by `nodeId`.
           */
          type getInlineStylesForNodeParameters = {
              nodeId: DOM.NodeId;
          };
          type getInlineStylesForNodeReturnValue = {
              /**
               * Inline style for the specified DOM node.
               */
              inlineStyle?: CSSStyle;
              /**
               * Attribute-defined element style (e.g. resulting from "width=20 height=100%").
               */
              attributesStyle?: CSSStyle;
          };
          /**
           * Returns requested styles for a DOM node identified by `nodeId`.
           */
          type getMatchedStylesForNodeParameters = {
              nodeId: DOM.NodeId;
          };
          type getMatchedStylesForNodeReturnValue = {
              /**
               * Inline style for the specified DOM node.
               */
              inlineStyle?: CSSStyle;
              /**
               * Attribute-defined element style (e.g. resulting from "width=20 height=100%").
               */
              attributesStyle?: CSSStyle;
              /**
               * CSS rules matching this node, from all applicable stylesheets.
               */
              matchedCSSRules?: RuleMatch[];
              /**
               * Pseudo style matches for this node.
               */
              pseudoElements?: PseudoElementMatches[];
              /**
               * A chain of inherited styles (from the immediate node parent up to the DOM tree root).
               */
              inherited?: InheritedStyleEntry[];
              /**
               * A list of CSS keyframed animations matching this node.
               */
              cssKeyframesRules?: CSSKeyframesRule[];
          };
          /**
           * Returns all media queries parsed by the rendering engine.
           */
          type getMediaQueriesParameters = {};
          type getMediaQueriesReturnValue = {
              medias: CSSMedia[];
          };
          /**
           * Requests information about platform fonts which we used to render child TextNodes in the given
      node.
           */
          type getPlatformFontsForNodeParameters = {
              nodeId: DOM.NodeId;
          };
          type getPlatformFontsForNodeReturnValue = {
              /**
               * Usage statistics for every employed platform font.
               */
              fonts: PlatformFontUsage[];
          };
          /**
           * Returns the current textual content for a stylesheet.
           */
          type getStyleSheetTextParameters = {
              styleSheetId: StyleSheetId;
          };
          type getStyleSheetTextReturnValue = {
              /**
               * The stylesheet text.
               */
              text: string;
          };
          /**
           * Find a rule with the given active property for the given node and set the new value for this
      property
           */
          type setEffectivePropertyValueForNodeParameters = {
              /**
               * The element id for which to set property.
               */
              nodeId: DOM.NodeId;
              propertyName: string;
              value: string;
          };
          type setEffectivePropertyValueForNodeReturnValue = {};
          /**
           * Modifies the keyframe rule key text.
           */
          type setKeyframeKeyParameters = {
              styleSheetId: StyleSheetId;
              range: SourceRange;
              keyText: string;
          };
          type setKeyframeKeyReturnValue = {
              /**
               * The resulting key text after modification.
               */
              keyText: Value;
          };
          /**
           * Modifies the rule selector.
           */
          type setMediaTextParameters = {
              styleSheetId: StyleSheetId;
              range: SourceRange;
              text: string;
          };
          type setMediaTextReturnValue = {
              /**
               * The resulting CSS media rule after modification.
               */
              media: CSSMedia;
          };
          /**
           * Modifies the rule selector.
           */
          type setRuleSelectorParameters = {
              styleSheetId: StyleSheetId;
              range: SourceRange;
              selector: string;
          };
          type setRuleSelectorReturnValue = {
              /**
               * The resulting selector list after modification.
               */
              selectorList: SelectorList;
          };
          /**
           * Sets the new stylesheet text.
           */
          type setStyleSheetTextParameters = {
              styleSheetId: StyleSheetId;
              text: string;
          };
          type setStyleSheetTextReturnValue = {
              /**
               * URL of source map associated with script (if any).
               */
              sourceMapURL?: string;
          };
          /**
           * Applies specified style edits one after another in the given order.
           */
          type setStyleTextsParameters = {
              edits: StyleDeclarationEdit[];
          };
          type setStyleTextsReturnValue = {
              /**
               * The resulting styles after modification.
               */
              styles: CSSStyle[];
          };
          /**
           * Enables the selector recording.
           */
          type startRuleUsageTrackingParameters = {};
          type startRuleUsageTrackingReturnValue = {};
          /**
           * Stop tracking rule usage and return the list of rules that were used since last call to
      `takeCoverageDelta` (or since start of coverage instrumentation)
           */
          type stopRuleUsageTrackingParameters = {};
          type stopRuleUsageTrackingReturnValue = {
              ruleUsage: RuleUsage[];
          };
          /**
           * Obtain list of rules that became used since last call to this method (or since start of coverage
      instrumentation)
           */
          type takeCoverageDeltaParameters = {};
          type takeCoverageDeltaReturnValue = {
              coverage: RuleUsage[];
              /**
               * Monotonically increasing time, in seconds.
               */
              timestamp: number;
          };
      }
      module CacheStorage {
          /**
           * Unique identifier of the Cache object.
           */
          type CacheId = string;
          /**
           * type of HTTP response cached
           */
          type CachedResponseType = "basic" | "cors" | "default" | "error" | "opaqueResponse" | "opaqueRedirect";
          /**
           * Data entry.
           */
          interface DataEntry {
              /**
               * Request URL.
               */
              requestURL: string;
              /**
               * Request method.
               */
              requestMethod: string;
              /**
               * Request headers
               */
              requestHeaders: Header[];
              /**
               * Number of seconds since epoch.
               */
              responseTime: number;
              /**
               * HTTP response status code.
               */
              responseStatus: number;
              /**
               * HTTP response status text.
               */
              responseStatusText: string;
              /**
               * HTTP response type
               */
              responseType: CachedResponseType;
              /**
               * Response headers
               */
              responseHeaders: Header[];
          }
          /**
           * Cache identifier.
           */
          interface Cache {
              /**
               * An opaque unique id of the cache.
               */
              cacheId: CacheId;
              /**
               * Security origin of the cache.
               */
              securityOrigin: string;
              /**
               * The name of the cache.
               */
              cacheName: string;
          }
          interface Header {
              name: string;
              value: string;
          }
          /**
           * Cached response
           */
          interface CachedResponse {
              /**
               * Entry content, base64-encoded.
               */
              body: binary;
          }
          /**
           * Deletes a cache.
           */
          type deleteCacheParameters = {
              /**
               * Id of cache for deletion.
               */
              cacheId: CacheId;
          };
          type deleteCacheReturnValue = {};
          /**
           * Deletes a cache entry.
           */
          type deleteEntryParameters = {
              /**
               * Id of cache where the entry will be deleted.
               */
              cacheId: CacheId;
              /**
               * URL spec of the request.
               */
              request: string;
          };
          type deleteEntryReturnValue = {};
          /**
           * Requests cache names.
           */
          type requestCacheNamesParameters = {
              /**
               * Security origin.
               */
              securityOrigin: string;
          };
          type requestCacheNamesReturnValue = {
              /**
               * Caches for the security origin.
               */
              caches: Cache[];
          };
          /**
           * Fetches cache entry.
           */
          type requestCachedResponseParameters = {
              /**
               * Id of cache that contains the entry.
               */
              cacheId: CacheId;
              /**
               * URL spec of the request.
               */
              requestURL: string;
              /**
               * headers of the request.
               */
              requestHeaders: Header[];
          };
          type requestCachedResponseReturnValue = {
              /**
               * Response read from the cache.
               */
              response: CachedResponse;
          };
          /**
           * Requests data from cache.
           */
          type requestEntriesParameters = {
              /**
               * ID of cache to get entries from.
               */
              cacheId: CacheId;
              /**
               * Number of records to skip.
               */
              skipCount?: number;
              /**
               * Number of records to fetch.
               */
              pageSize?: number;
              /**
               * If present, only return the entries containing this substring in the path
               */
              pathFilter?: string;
          };
          type requestEntriesReturnValue = {
              /**
               * Array of object store data entries.
               */
              cacheDataEntries: DataEntry[];
              /**
               * Count of returned entries from this storage. If pathFilter is empty, it
        is the count of all entries from this storage.
               */
              returnCount: number;
          };
      }
      /**
       * A domain for interacting with Cast, Presentation API, and Remote Playback API
    functionalities.
       */
      module Cast {
          interface Sink {
              name: string;
              id: string;
              /**
               * Text describing the current session. Present only if there is an active
        session on the sink.
               */
              session?: string;
          }
          /**
           * This is fired whenever the list of available sinks changes. A sink is a
      device or a software surface that you can cast to.
           */
          type sinksUpdatedPayload = {
              sinks: Sink[];
          };
          /**
           * This is fired whenever the outstanding issue/error message changes.
      |issueMessage| is empty if there is no issue.
           */
          type issueUpdatedPayload = {
              issueMessage: string;
          };
          /**
           * Starts observing for sinks that can be used for tab mirroring, and if set,
      sinks compatible with |presentationUrl| as well. When sinks are found, a
      |sinksUpdated| event is fired.
      Also starts observing for issue messages. When an issue is added or removed,
      an |issueUpdated| event is fired.
           */
          type enableParameters = {
              presentationUrl?: string;
          };
          type enableReturnValue = {};
          /**
           * Stops observing for sinks and issues.
           */
          type disableParameters = {};
          type disableReturnValue = {};
          /**
           * Sets a sink to be used when the web page requests the browser to choose a
      sink via Presentation API, Remote Playback API, or Cast SDK.
           */
          type setSinkToUseParameters = {
              sinkName: string;
          };
          type setSinkToUseReturnValue = {};
          /**
           * Starts mirroring the tab to the sink.
           */
          type startTabMirroringParameters = {
              sinkName: string;
          };
          type startTabMirroringReturnValue = {};
          /**
           * Stops the active Cast session on the sink.
           */
          type stopCastingParameters = {
              sinkName: string;
          };
          type stopCastingReturnValue = {};
      }
      /**
       * This domain exposes DOM read/write operations. Each DOM Node is represented with its mirror object
    that has an `id`. This `id` can be used to get additional information on the Node, resolve it into
    the JavaScript object wrapper, etc. It is important that client receives DOM events only for the
    nodes that are known to the client. Backend keeps track of the nodes that were sent to the client
    and never sends the same node twice. It is client's responsibility to collect information about
    the nodes that were sent to the client.<p>Note that `iframe` owner elements will return
    corresponding document elements as their child nodes.</p>
       */
      module DOM {
          /**
           * Unique DOM node identifier.
           */
          type NodeId = number;
          /**
           * Unique DOM node identifier used to reference a node that may not have been pushed to the
      front-end.
           */
          type BackendNodeId = number;
          /**
           * Backend node with a friendly name.
           */
          interface BackendNode {
              /**
               * `Node`'s nodeType.
               */
              nodeType: number;
              /**
               * `Node`'s nodeName.
               */
              nodeName: string;
              backendNodeId: BackendNodeId;
          }
          /**
           * Pseudo element type.
           */
          type PseudoType = "first-line" | "first-letter" | "before" | "after" | "marker" | "backdrop" | "selection" | "first-line-inherited" | "scrollbar" | "scrollbar-thumb" | "scrollbar-button" | "scrollbar-track" | "scrollbar-track-piece" | "scrollbar-corner" | "resizer" | "input-list-button";
          /**
           * Shadow root type.
           */
          type ShadowRootType = "user-agent" | "open" | "closed";
          /**
           * DOM interaction is implemented in terms of mirror objects that represent the actual DOM nodes.
      DOMNode is a base node mirror type.
           */
          interface Node {
              /**
               * Node identifier that is passed into the rest of the DOM messages as the `nodeId`. Backend
        will only push node with given `id` once. It is aware of all requested nodes and will only
        fire DOM events for nodes known to the client.
               */
              nodeId: NodeId;
              /**
               * The id of the parent node if any.
               */
              parentId?: NodeId;
              /**
               * The BackendNodeId for this node.
               */
              backendNodeId: BackendNodeId;
              /**
               * `Node`'s nodeType.
               */
              nodeType: number;
              /**
               * `Node`'s nodeName.
               */
              nodeName: string;
              /**
               * `Node`'s localName.
               */
              localName: string;
              /**
               * `Node`'s nodeValue.
               */
              nodeValue: string;
              /**
               * Child count for `Container` nodes.
               */
              childNodeCount?: number;
              /**
               * Child nodes of this node when requested with children.
               */
              children?: Node[];
              /**
               * Attributes of the `Element` node in the form of flat array `[name1, value1, name2, value2]`.
               */
              attributes?: string[];
              /**
               * Document URL that `Document` or `FrameOwner` node points to.
               */
              documentURL?: string;
              /**
               * Base URL that `Document` or `FrameOwner` node uses for URL completion.
               */
              baseURL?: string;
              /**
               * `DocumentType`'s publicId.
               */
              publicId?: string;
              /**
               * `DocumentType`'s systemId.
               */
              systemId?: string;
              /**
               * `DocumentType`'s internalSubset.
               */
              internalSubset?: string;
              /**
               * `Document`'s XML version in case of XML documents.
               */
              xmlVersion?: string;
              /**
               * `Attr`'s name.
               */
              name?: string;
              /**
               * `Attr`'s value.
               */
              value?: string;
              /**
               * Pseudo element type for this node.
               */
              pseudoType?: PseudoType;
              /**
               * Shadow root type.
               */
              shadowRootType?: ShadowRootType;
              /**
               * Frame ID for frame owner elements.
               */
              frameId?: Page.FrameId;
              /**
               * Content document for frame owner elements.
               */
              contentDocument?: Node;
              /**
               * Shadow root list for given element host.
               */
              shadowRoots?: Node[];
              /**
               * Content document fragment for template elements.
               */
              templateContent?: Node;
              /**
               * Pseudo elements associated with this node.
               */
              pseudoElements?: Node[];
              /**
               * Import document for the HTMLImport links.
               */
              importedDocument?: Node;
              /**
               * Distributed nodes for given insertion point.
               */
              distributedNodes?: BackendNode[];
              /**
               * Whether the node is SVG.
               */
              isSVG?: boolean;
          }
          /**
           * A structure holding an RGBA color.
           */
          interface RGBA {
              /**
               * The red component, in the [0-255] range.
               */
              r: number;
              /**
               * The green component, in the [0-255] range.
               */
              g: number;
              /**
               * The blue component, in the [0-255] range.
               */
              b: number;
              /**
               * The alpha component, in the [0-1] range (default: 1).
               */
              a?: number;
          }
          /**
           * An array of quad vertices, x immediately followed by y for each point, points clock-wise.
           */
          type Quad = number[];
          /**
           * Box model.
           */
          interface BoxModel {
              /**
               * Content box
               */
              content: Quad;
              /**
               * Padding box
               */
              padding: Quad;
              /**
               * Border box
               */
              border: Quad;
              /**
               * Margin box
               */
              margin: Quad;
              /**
               * Node width
               */
              width: number;
              /**
               * Node height
               */
              height: number;
              /**
               * Shape outside coordinates
               */
              shapeOutside?: ShapeOutsideInfo;
          }
          /**
           * CSS Shape Outside details.
           */
          interface ShapeOutsideInfo {
              /**
               * Shape bounds
               */
              bounds: Quad;
              /**
               * Shape coordinate details
               */
              shape: any[];
              /**
               * Margin shape bounds
               */
              marginShape: any[];
          }
          /**
           * Rectangle.
           */
          interface Rect {
              /**
               * X coordinate
               */
              x: number;
              /**
               * Y coordinate
               */
              y: number;
              /**
               * Rectangle width
               */
              width: number;
              /**
               * Rectangle height
               */
              height: number;
          }
          /**
           * Fired when `Element`'s attribute is modified.
           */
          type attributeModifiedPayload = {
              /**
               * Id of the node that has changed.
               */
              nodeId: NodeId;
              /**
               * Attribute name.
               */
              name: string;
              /**
               * Attribute value.
               */
              value: string;
          };
          /**
           * Fired when `Element`'s attribute is removed.
           */
          type attributeRemovedPayload = {
              /**
               * Id of the node that has changed.
               */
              nodeId: NodeId;
              /**
               * A ttribute name.
               */
              name: string;
          };
          /**
           * Mirrors `DOMCharacterDataModified` event.
           */
          type characterDataModifiedPayload = {
              /**
               * Id of the node that has changed.
               */
              nodeId: NodeId;
              /**
               * New text value.
               */
              characterData: string;
          };
          /**
           * Fired when `Container`'s child node count has changed.
           */
          type childNodeCountUpdatedPayload = {
              /**
               * Id of the node that has changed.
               */
              nodeId: NodeId;
              /**
               * New node count.
               */
              childNodeCount: number;
          };
          /**
           * Mirrors `DOMNodeInserted` event.
           */
          type childNodeInsertedPayload = {
              /**
               * Id of the node that has changed.
               */
              parentNodeId: NodeId;
              /**
               * If of the previous siblint.
               */
              previousNodeId: NodeId;
              /**
               * Inserted node data.
               */
              node: Node;
          };
          /**
           * Mirrors `DOMNodeRemoved` event.
           */
          type childNodeRemovedPayload = {
              /**
               * Parent id.
               */
              parentNodeId: NodeId;
              /**
               * Id of the node that has been removed.
               */
              nodeId: NodeId;
          };
          /**
           * Called when distrubution is changed.
           */
          type distributedNodesUpdatedPayload = {
              /**
               * Insertion point where distrubuted nodes were updated.
               */
              insertionPointId: NodeId;
              /**
               * Distributed nodes for given insertion point.
               */
              distributedNodes: BackendNode[];
          };
          /**
           * Fired when `Document` has been totally updated. Node ids are no longer valid.
           */
          type documentUpdatedPayload = void;
          /**
           * Fired when `Element`'s inline style is modified via a CSS property modification.
           */
          type inlineStyleInvalidatedPayload = {
              /**
               * Ids of the nodes for which the inline styles have been invalidated.
               */
              nodeIds: NodeId[];
          };
          /**
           * Called when a pseudo element is added to an element.
           */
          type pseudoElementAddedPayload = {
              /**
               * Pseudo element's parent element id.
               */
              parentId: NodeId;
              /**
               * The added pseudo element.
               */
              pseudoElement: Node;
          };
          /**
           * Called when a pseudo element is removed from an element.
           */
          type pseudoElementRemovedPayload = {
              /**
               * Pseudo element's parent element id.
               */
              parentId: NodeId;
              /**
               * The removed pseudo element id.
               */
              pseudoElementId: NodeId;
          };
          /**
           * Fired when backend wants to provide client with the missing DOM structure. This happens upon
      most of the calls requesting node ids.
           */
          type setChildNodesPayload = {
              /**
               * Parent node id to populate with children.
               */
              parentId: NodeId;
              /**
               * Child nodes array.
               */
              nodes: Node[];
          };
          /**
           * Called when shadow root is popped from the element.
           */
          type shadowRootPoppedPayload = {
              /**
               * Host element id.
               */
              hostId: NodeId;
              /**
               * Shadow root id.
               */
              rootId: NodeId;
          };
          /**
           * Called when shadow root is pushed into the element.
           */
          type shadowRootPushedPayload = {
              /**
               * Host element id.
               */
              hostId: NodeId;
              /**
               * Shadow root.
               */
              root: Node;
          };
          /**
           * Collects class names for the node with given id and all of it's child nodes.
           */
          type collectClassNamesFromSubtreeParameters = {
              /**
               * Id of the node to collect class names.
               */
              nodeId: NodeId;
          };
          type collectClassNamesFromSubtreeReturnValue = {
              /**
               * Class name list.
               */
              classNames: string[];
          };
          /**
           * Creates a deep copy of the specified node and places it into the target container before the
      given anchor.
           */
          type copyToParameters = {
              /**
               * Id of the node to copy.
               */
              nodeId: NodeId;
              /**
               * Id of the element to drop the copy into.
               */
              targetNodeId: NodeId;
              /**
               * Drop the copy before this node (if absent, the copy becomes the last child of
        `targetNodeId`).
               */
              insertBeforeNodeId?: NodeId;
          };
          type copyToReturnValue = {
              /**
               * Id of the node clone.
               */
              nodeId: NodeId;
          };
          /**
           * Describes node given its id, does not require domain to be enabled. Does not start tracking any
      objects, can be used for automation.
           */
          type describeNodeParameters = {
              /**
               * Identifier of the node.
               */
              nodeId?: NodeId;
              /**
               * Identifier of the backend node.
               */
              backendNodeId?: BackendNodeId;
              /**
               * JavaScript object id of the node wrapper.
               */
              objectId?: Runtime.RemoteObjectId;
              /**
               * The maximum depth at which children should be retrieved, defaults to 1. Use -1 for the
        entire subtree or provide an integer larger than 0.
               */
              depth?: number;
              /**
               * Whether or not iframes and shadow roots should be traversed when returning the subtree
        (default is false).
               */
              pierce?: boolean;
          };
          type describeNodeReturnValue = {
              /**
               * Node description.
               */
              node: Node;
          };
          /**
           * Scrolls the specified rect of the given node into view if not already visible.
      Note: exactly one between nodeId, backendNodeId and objectId should be passed
      to identify the node.
           */
          type scrollIntoViewIfNeededParameters = {
              /**
               * Identifier of the node.
               */
              nodeId?: NodeId;
              /**
               * Identifier of the backend node.
               */
              backendNodeId?: BackendNodeId;
              /**
               * JavaScript object id of the node wrapper.
               */
              objectId?: Runtime.RemoteObjectId;
              /**
               * The rect to be scrolled into view, relative to the node's border box, in CSS pixels.
        When omitted, center of the node will be used, similar to Element.scrollIntoView.
               */
              rect?: Rect;
          };
          type scrollIntoViewIfNeededReturnValue = {};
          /**
           * Disables DOM agent for the given page.
           */
          type disableParameters = {};
          type disableReturnValue = {};
          /**
           * Discards search results from the session with the given id. `getSearchResults` should no longer
      be called for that search.
           */
          type discardSearchResultsParameters = {
              /**
               * Unique search session identifier.
               */
              searchId: string;
          };
          type discardSearchResultsReturnValue = {};
          /**
           * Enables DOM agent for the given page.
           */
          type enableParameters = {};
          type enableReturnValue = {};
          /**
           * Focuses the given element.
           */
          type focusParameters = {
              /**
               * Identifier of the node.
               */
              nodeId?: NodeId;
              /**
               * Identifier of the backend node.
               */
              backendNodeId?: BackendNodeId;
              /**
               * JavaScript object id of the node wrapper.
               */
              objectId?: Runtime.RemoteObjectId;
          };
          type focusReturnValue = {};
          /**
           * Returns attributes for the specified node.
           */
          type getAttributesParameters = {
              /**
               * Id of the node to retrieve attibutes for.
               */
              nodeId: NodeId;
          };
          type getAttributesReturnValue = {
              /**
               * An interleaved array of node attribute names and values.
               */
              attributes: string[];
          };
          /**
           * Returns boxes for the given node.
           */
          type getBoxModelParameters = {
              /**
               * Identifier of the node.
               */
              nodeId?: NodeId;
              /**
               * Identifier of the backend node.
               */
              backendNodeId?: BackendNodeId;
              /**
               * JavaScript object id of the node wrapper.
               */
              objectId?: Runtime.RemoteObjectId;
          };
          type getBoxModelReturnValue = {
              /**
               * Box model for the node.
               */
              model: BoxModel;
          };
          /**
           * Returns quads that describe node position on the page. This method
      might return multiple quads for inline nodes.
           */
          type getContentQuadsParameters = {
              /**
               * Identifier of the node.
               */
              nodeId?: NodeId;
              /**
               * Identifier of the backend node.
               */
              backendNodeId?: BackendNodeId;
              /**
               * JavaScript object id of the node wrapper.
               */
              objectId?: Runtime.RemoteObjectId;
          };
          type getContentQuadsReturnValue = {
              /**
               * Quads that describe node layout relative to viewport.
               */
              quads: Quad[];
          };
          /**
           * Returns the root DOM node (and optionally the subtree) to the caller.
           */
          type getDocumentParameters = {
              /**
               * The maximum depth at which children should be retrieved, defaults to 1. Use -1 for the
        entire subtree or provide an integer larger than 0.
               */
              depth?: number;
              /**
               * Whether or not iframes and shadow roots should be traversed when returning the subtree
        (default is false).
               */
              pierce?: boolean;
          };
          type getDocumentReturnValue = {
              /**
               * Resulting node.
               */
              root: Node;
          };
          /**
           * Returns the root DOM node (and optionally the subtree) to the caller.
           */
          type getFlattenedDocumentParameters = {
              /**
               * The maximum depth at which children should be retrieved, defaults to 1. Use -1 for the
        entire subtree or provide an integer larger than 0.
               */
              depth?: number;
              /**
               * Whether or not iframes and shadow roots should be traversed when returning the subtree
        (default is false).
               */
              pierce?: boolean;
          };
          type getFlattenedDocumentReturnValue = {
              /**
               * Resulting node.
               */
              nodes: Node[];
          };
          /**
           * Returns node id at given location. Depending on whether DOM domain is enabled, nodeId is
      either returned or not.
           */
          type getNodeForLocationParameters = {
              /**
               * X coordinate.
               */
              x: number;
              /**
               * Y coordinate.
               */
              y: number;
              /**
               * False to skip to the nearest non-UA shadow root ancestor (default: false).
               */
              includeUserAgentShadowDOM?: boolean;
              /**
               * Whether to ignore pointer-events: none on elements and hit test them.
               */
              ignorePointerEventsNone?: boolean;
          };
          type getNodeForLocationReturnValue = {
              /**
               * Resulting node.
               */
              backendNodeId: BackendNodeId;
              /**
               * Frame this node belongs to.
               */
              frameId: Page.FrameId;
              /**
               * Id of the node at given coordinates, only when enabled and requested document.
               */
              nodeId?: NodeId;
          };
          /**
           * Returns node's HTML markup.
           */
          type getOuterHTMLParameters = {
              /**
               * Identifier of the node.
               */
              nodeId?: NodeId;
              /**
               * Identifier of the backend node.
               */
              backendNodeId?: BackendNodeId;
              /**
               * JavaScript object id of the node wrapper.
               */
              objectId?: Runtime.RemoteObjectId;
          };
          type getOuterHTMLReturnValue = {
              /**
               * Outer HTML markup.
               */
              outerHTML: string;
          };
          /**
           * Returns the id of the nearest ancestor that is a relayout boundary.
           */
          type getRelayoutBoundaryParameters = {
              /**
               * Id of the node.
               */
              nodeId: NodeId;
          };
          type getRelayoutBoundaryReturnValue = {
              /**
               * Relayout boundary node id for the given node.
               */
              nodeId: NodeId;
          };
          /**
           * Returns search results from given `fromIndex` to given `toIndex` from the search with the given
      identifier.
           */
          type getSearchResultsParameters = {
              /**
               * Unique search session identifier.
               */
              searchId: string;
              /**
               * Start index of the search result to be returned.
               */
              fromIndex: number;
              /**
               * End index of the search result to be returned.
               */
              toIndex: number;
          };
          type getSearchResultsReturnValue = {
              /**
               * Ids of the search result nodes.
               */
              nodeIds: NodeId[];
          };
          /**
           * Hides any highlight.
           */
          type hideHighlightParameters = {};
          type hideHighlightReturnValue = {};
          /**
           * Highlights DOM node.
           */
          type highlightNodeParameters = {};
          type highlightNodeReturnValue = {};
          /**
           * Highlights given rectangle.
           */
          type highlightRectParameters = {};
          type highlightRectReturnValue = {};
          /**
           * Marks last undoable state.
           */
          type markUndoableStateParameters = {};
          type markUndoableStateReturnValue = {};
          /**
           * Moves node into the new container, places it before the given anchor.
           */
          type moveToParameters = {
              /**
               * Id of the node to move.
               */
              nodeId: NodeId;
              /**
               * Id of the element to drop the moved node into.
               */
              targetNodeId: NodeId;
              /**
               * Drop node before this one (if absent, the moved node becomes the last child of
        `targetNodeId`).
               */
              insertBeforeNodeId?: NodeId;
          };
          type moveToReturnValue = {
              /**
               * New id of the moved node.
               */
              nodeId: NodeId;
          };
          /**
           * Searches for a given string in the DOM tree. Use `getSearchResults` to access search results or
      `cancelSearch` to end this search session.
           */
          type performSearchParameters = {
              /**
               * Plain text or query selector or XPath search query.
               */
              query: string;
              /**
               * True to search in user agent shadow DOM.
               */
              includeUserAgentShadowDOM?: boolean;
          };
          type performSearchReturnValue = {
              /**
               * Unique search session identifier.
               */
              searchId: string;
              /**
               * Number of search results.
               */
              resultCount: number;
          };
          /**
           * Requests that the node is sent to the caller given its path. // FIXME, use XPath
           */
          type pushNodeByPathToFrontendParameters = {
              /**
               * Path to node in the proprietary format.
               */
              path: string;
          };
          type pushNodeByPathToFrontendReturnValue = {
              /**
               * Id of the node for given path.
               */
              nodeId: NodeId;
          };
          /**
           * Requests that a batch of nodes is sent to the caller given their backend node ids.
           */
          type pushNodesByBackendIdsToFrontendParameters = {
              /**
               * The array of backend node ids.
               */
              backendNodeIds: BackendNodeId[];
          };
          type pushNodesByBackendIdsToFrontendReturnValue = {
              /**
               * The array of ids of pushed nodes that correspond to the backend ids specified in
        backendNodeIds.
               */
              nodeIds: NodeId[];
          };
          /**
           * Executes `querySelector` on a given node.
           */
          type querySelectorParameters = {
              /**
               * Id of the node to query upon.
               */
              nodeId: NodeId;
              /**
               * Selector string.
               */
              selector: string;
          };
          type querySelectorReturnValue = {
              /**
               * Query selector result.
               */
              nodeId: NodeId;
          };
          /**
           * Executes `querySelectorAll` on a given node.
           */
          type querySelectorAllParameters = {
              /**
               * Id of the node to query upon.
               */
              nodeId: NodeId;
              /**
               * Selector string.
               */
              selector: string;
          };
          type querySelectorAllReturnValue = {
              /**
               * Query selector result.
               */
              nodeIds: NodeId[];
          };
          /**
           * Re-does the last undone action.
           */
          type redoParameters = {};
          type redoReturnValue = {};
          /**
           * Removes attribute with given name from an element with given id.
           */
          type removeAttributeParameters = {
              /**
               * Id of the element to remove attribute from.
               */
              nodeId: NodeId;
              /**
               * Name of the attribute to remove.
               */
              name: string;
          };
          type removeAttributeReturnValue = {};
          /**
           * Removes node with given id.
           */
          type removeNodeParameters = {
              /**
               * Id of the node to remove.
               */
              nodeId: NodeId;
          };
          type removeNodeReturnValue = {};
          /**
           * Requests that children of the node with given id are returned to the caller in form of
      `setChildNodes` events where not only immediate children are retrieved, but all children down to
      the specified depth.
           */
          type requestChildNodesParameters = {
              /**
               * Id of the node to get children for.
               */
              nodeId: NodeId;
              /**
               * The maximum depth at which children should be retrieved, defaults to 1. Use -1 for the
        entire subtree or provide an integer larger than 0.
               */
              depth?: number;
              /**
               * Whether or not iframes and shadow roots should be traversed when returning the sub-tree
        (default is false).
               */
              pierce?: boolean;
          };
          type requestChildNodesReturnValue = {};
          /**
           * Requests that the node is sent to the caller given the JavaScript node object reference. All
      nodes that form the path from the node to the root are also sent to the client as a series of
      `setChildNodes` notifications.
           */
          type requestNodeParameters = {
              /**
               * JavaScript object id to convert into node.
               */
              objectId: Runtime.RemoteObjectId;
          };
          type requestNodeReturnValue = {
              /**
               * Node id for given object.
               */
              nodeId: NodeId;
          };
          /**
           * Resolves the JavaScript node object for a given NodeId or BackendNodeId.
           */
          type resolveNodeParameters = {
              /**
               * Id of the node to resolve.
               */
              nodeId?: NodeId;
              /**
               * Backend identifier of the node to resolve.
               */
              backendNodeId?: DOM.BackendNodeId;
              /**
               * Symbolic group name that can be used to release multiple objects.
               */
              objectGroup?: string;
              /**
               * Execution context in which to resolve the node.
               */
              executionContextId?: Runtime.ExecutionContextId;
          };
          type resolveNodeReturnValue = {
              /**
               * JavaScript object wrapper for given node.
               */
              object: Runtime.RemoteObject;
          };
          /**
           * Sets attribute for an element with given id.
           */
          type setAttributeValueParameters = {
              /**
               * Id of the element to set attribute for.
               */
              nodeId: NodeId;
              /**
               * Attribute name.
               */
              name: string;
              /**
               * Attribute value.
               */
              value: string;
          };
          type setAttributeValueReturnValue = {};
          /**
           * Sets attributes on element with given id. This method is useful when user edits some existing
      attribute value and types in several attribute name/value pairs.
           */
          type setAttributesAsTextParameters = {
              /**
               * Id of the element to set attributes for.
               */
              nodeId: NodeId;
              /**
               * Text with a number of attributes. Will parse this text using HTML parser.
               */
              text: string;
              /**
               * Attribute name to replace with new attributes derived from text in case text parsed
        successfully.
               */
              name?: string;
          };
          type setAttributesAsTextReturnValue = {};
          /**
           * Sets files for the given file input element.
           */
          type setFileInputFilesParameters = {
              /**
               * Array of file paths to set.
               */
              files: string[];
              /**
               * Identifier of the node.
               */
              nodeId?: NodeId;
              /**
               * Identifier of the backend node.
               */
              backendNodeId?: BackendNodeId;
              /**
               * JavaScript object id of the node wrapper.
               */
              objectId?: Runtime.RemoteObjectId;
          };
          type setFileInputFilesReturnValue = {};
          /**
           * Sets if stack traces should be captured for Nodes. See `Node.getNodeStackTraces`. Default is disabled.
           */
          type setNodeStackTracesEnabledParameters = {
              /**
               * Enable or disable.
               */
              enable: boolean;
          };
          type setNodeStackTracesEnabledReturnValue = {};
          /**
           * Gets stack traces associated with a Node. As of now, only provides stack trace for Node creation.
           */
          type getNodeStackTracesParameters = {
              /**
               * Id of the node to get stack traces for.
               */
              nodeId: NodeId;
          };
          type getNodeStackTracesReturnValue = {
              /**
               * Creation stack trace, if available.
               */
              creation?: Runtime.StackTrace;
          };
          /**
           * Returns file information for the given
      File wrapper.
           */
          type getFileInfoParameters = {
              /**
               * JavaScript object id of the node wrapper.
               */
              objectId: Runtime.RemoteObjectId;
          };
          type getFileInfoReturnValue = {
              path: string;
          };
          /**
           * Enables console to refer to the node with given id via $x (see Command Line API for more details
      $x functions).
           */
          type setInspectedNodeParameters = {
              /**
               * DOM node id to be accessible by means of $x command line API.
               */
              nodeId: NodeId;
          };
          type setInspectedNodeReturnValue = {};
          /**
           * Sets node name for a node with given id.
           */
          type setNodeNameParameters = {
              /**
               * Id of the node to set name for.
               */
              nodeId: NodeId;
              /**
               * New node's name.
               */
              name: string;
          };
          type setNodeNameReturnValue = {
              /**
               * New node's id.
               */
              nodeId: NodeId;
          };
          /**
           * Sets node value for a node with given id.
           */
          type setNodeValueParameters = {
              /**
               * Id of the node to set value for.
               */
              nodeId: NodeId;
              /**
               * New node's value.
               */
              value: string;
          };
          type setNodeValueReturnValue = {};
          /**
           * Sets node HTML markup, returns new node id.
           */
          type setOuterHTMLParameters = {
              /**
               * Id of the node to set markup for.
               */
              nodeId: NodeId;
              /**
               * Outer HTML markup to set.
               */
              outerHTML: string;
          };
          type setOuterHTMLReturnValue = {};
          /**
           * Undoes the last performed action.
           */
          type undoParameters = {};
          type undoReturnValue = {};
          /**
           * Returns iframe node that owns iframe with the given domain.
           */
          type getFrameOwnerParameters = {
              frameId: Page.FrameId;
          };
          type getFrameOwnerReturnValue = {
              /**
               * Resulting node.
               */
              backendNodeId: BackendNodeId;
              /**
               * Id of the node at given coordinates, only when enabled and requested document.
               */
              nodeId?: NodeId;
          };
      }
      /**
       * DOM debugging allows setting breakpoints on particular DOM operations and events. JavaScript
    execution will stop on these operations as if there was a regular breakpoint set.
       */
      module DOMDebugger {
          /**
           * DOM breakpoint type.
           */
          type DOMBreakpointType = "subtree-modified" | "attribute-modified" | "node-removed";
          /**
           * Object event listener.
           */
          interface EventListener {
              /**
               * `EventListener`'s type.
               */
              type: string;
              /**
               * `EventListener`'s useCapture.
               */
              useCapture: boolean;
              /**
               * `EventListener`'s passive flag.
               */
              passive: boolean;
              /**
               * `EventListener`'s once flag.
               */
              once: boolean;
              /**
               * Script id of the handler code.
               */
              scriptId: Runtime.ScriptId;
              /**
               * Line number in the script (0-based).
               */
              lineNumber: number;
              /**
               * Column number in the script (0-based).
               */
              columnNumber: number;
              /**
               * Event handler function value.
               */
              handler?: Runtime.RemoteObject;
              /**
               * Event original handler function value.
               */
              originalHandler?: Runtime.RemoteObject;
              /**
               * Node the listener is added to (if any).
               */
              backendNodeId?: DOM.BackendNodeId;
          }
          /**
           * Returns event listeners of the given object.
           */
          type getEventListenersParameters = {
              /**
               * Identifier of the object to return listeners for.
               */
              objectId: Runtime.RemoteObjectId;
              /**
               * The maximum depth at which Node children should be retrieved, defaults to 1. Use -1 for the
        entire subtree or provide an integer larger than 0.
               */
              depth?: number;
              /**
               * Whether or not iframes and shadow roots should be traversed when returning the subtree
        (default is false). Reports listeners for all contexts if pierce is enabled.
               */
              pierce?: boolean;
          };
          type getEventListenersReturnValue = {
              /**
               * Array of relevant listeners.
               */
              listeners: EventListener[];
          };
          /**
           * Removes DOM breakpoint that was set using `setDOMBreakpoint`.
           */
          type removeDOMBreakpointParameters = {
              /**
               * Identifier of the node to remove breakpoint from.
               */
              nodeId: DOM.NodeId;
              /**
               * Type of the breakpoint to remove.
               */
              type: DOMBreakpointType;
          };
          type removeDOMBreakpointReturnValue = {};
          /**
           * Removes breakpoint on particular DOM event.
           */
          type removeEventListenerBreakpointParameters = {
              /**
               * Event name.
               */
              eventName: string;
              /**
               * EventTarget interface name.
               */
              targetName?: string;
          };
          type removeEventListenerBreakpointReturnValue = {};
          /**
           * Removes breakpoint on particular native event.
           */
          type removeInstrumentationBreakpointParameters = {
              /**
               * Instrumentation name to stop on.
               */
              eventName: string;
          };
          type removeInstrumentationBreakpointReturnValue = {};
          /**
           * Removes breakpoint from XMLHttpRequest.
           */
          type removeXHRBreakpointParameters = {
              /**
               * Resource URL substring.
               */
              url: string;
          };
          type removeXHRBreakpointReturnValue = {};
          /**
           * Sets breakpoint on particular operation with DOM.
           */
          type setDOMBreakpointParameters = {
              /**
               * Identifier of the node to set breakpoint on.
               */
              nodeId: DOM.NodeId;
              /**
               * Type of the operation to stop upon.
               */
              type: DOMBreakpointType;
          };
          type setDOMBreakpointReturnValue = {};
          /**
           * Sets breakpoint on particular DOM event.
           */
          type setEventListenerBreakpointParameters = {
              /**
               * DOM Event name to stop on (any DOM event will do).
               */
              eventName: string;
              /**
               * EventTarget interface name to stop on. If equal to `"*"` or not provided, will stop on any
        EventTarget.
               */
              targetName?: string;
          };
          type setEventListenerBreakpointReturnValue = {};
          /**
           * Sets breakpoint on particular native event.
           */
          type setInstrumentationBreakpointParameters = {
              /**
               * Instrumentation name to stop on.
               */
              eventName: string;
          };
          type setInstrumentationBreakpointReturnValue = {};
          /**
           * Sets breakpoint on XMLHttpRequest.
           */
          type setXHRBreakpointParameters = {
              /**
               * Resource URL substring. All XHRs having this substring in the URL will get stopped upon.
               */
              url: string;
          };
          type setXHRBreakpointReturnValue = {};
      }
      /**
       * This domain facilitates obtaining document snapshots with DOM, layout, and style information.
       */
      module DOMSnapshot {
          /**
           * A Node in the DOM tree.
           */
          interface DOMNode {
              /**
               * `Node`'s nodeType.
               */
              nodeType: number;
              /**
               * `Node`'s nodeName.
               */
              nodeName: string;
              /**
               * `Node`'s nodeValue.
               */
              nodeValue: string;
              /**
               * Only set for textarea elements, contains the text value.
               */
              textValue?: string;
              /**
               * Only set for input elements, contains the input's associated text value.
               */
              inputValue?: string;
              /**
               * Only set for radio and checkbox input elements, indicates if the element has been checked
               */
              inputChecked?: boolean;
              /**
               * Only set for option elements, indicates if the element has been selected
               */
              optionSelected?: boolean;
              /**
               * `Node`'s id, corresponds to DOM.Node.backendNodeId.
               */
              backendNodeId: DOM.BackendNodeId;
              /**
               * The indexes of the node's child nodes in the `domNodes` array returned by `getSnapshot`, if
        any.
               */
              childNodeIndexes?: number[];
              /**
               * Attributes of an `Element` node.
               */
              attributes?: NameValue[];
              /**
               * Indexes of pseudo elements associated with this node in the `domNodes` array returned by
        `getSnapshot`, if any.
               */
              pseudoElementIndexes?: number[];
              /**
               * The index of the node's related layout tree node in the `layoutTreeNodes` array returned by
        `getSnapshot`, if any.
               */
              layoutNodeIndex?: number;
              /**
               * Document URL that `Document` or `FrameOwner` node points to.
               */
              documentURL?: string;
              /**
               * Base URL that `Document` or `FrameOwner` node uses for URL completion.
               */
              baseURL?: string;
              /**
               * Only set for documents, contains the document's content language.
               */
              contentLanguage?: string;
              /**
               * Only set for documents, contains the document's character set encoding.
               */
              documentEncoding?: string;
              /**
               * `DocumentType` node's publicId.
               */
              publicId?: string;
              /**
               * `DocumentType` node's systemId.
               */
              systemId?: string;
              /**
               * Frame ID for frame owner elements and also for the document node.
               */
              frameId?: Page.FrameId;
              /**
               * The index of a frame owner element's content document in the `domNodes` array returned by
        `getSnapshot`, if any.
               */
              contentDocumentIndex?: number;
              /**
               * Type of a pseudo element node.
               */
              pseudoType?: DOM.PseudoType;
              /**
               * Shadow root type.
               */
              shadowRootType?: DOM.ShadowRootType;
              /**
               * Whether this DOM node responds to mouse clicks. This includes nodes that have had click
        event listeners attached via JavaScript as well as anchor tags that naturally navigate when
        clicked.
               */
              isClickable?: boolean;
              /**
               * Details of the node's event listeners, if any.
               */
              eventListeners?: DOMDebugger.EventListener[];
              /**
               * The selected url for nodes with a srcset attribute.
               */
              currentSourceURL?: string;
              /**
               * The url of the script (if any) that generates this node.
               */
              originURL?: string;
              /**
               * Scroll offsets, set when this node is a Document.
               */
              scrollOffsetX?: number;
              scrollOffsetY?: number;
          }
          /**
           * Details of post layout rendered text positions. The exact layout should not be regarded as
      stable and may change between versions.
           */
          interface InlineTextBox {
              /**
               * The bounding box in document coordinates. Note that scroll offset of the document is ignored.
               */
              boundingBox: DOM.Rect;
              /**
               * The starting index in characters, for this post layout textbox substring. Characters that
        would be represented as a surrogate pair in UTF-16 have length 2.
               */
              startCharacterIndex: number;
              /**
               * The number of characters in this post layout textbox substring. Characters that would be
        represented as a surrogate pair in UTF-16 have length 2.
               */
              numCharacters: number;
          }
          /**
           * Details of an element in the DOM tree with a LayoutObject.
           */
          interface LayoutTreeNode {
              /**
               * The index of the related DOM node in the `domNodes` array returned by `getSnapshot`.
               */
              domNodeIndex: number;
              /**
               * The bounding box in document coordinates. Note that scroll offset of the document is ignored.
               */
              boundingBox: DOM.Rect;
              /**
               * Contents of the LayoutText, if any.
               */
              layoutText?: string;
              /**
               * The post-layout inline text nodes, if any.
               */
              inlineTextNodes?: InlineTextBox[];
              /**
               * Index into the `computedStyles` array returned by `getSnapshot`.
               */
              styleIndex?: number;
              /**
               * Global paint order index, which is determined by the stacking order of the nodes. Nodes
        that are painted together will have the same index. Only provided if includePaintOrder in
        getSnapshot was true.
               */
              paintOrder?: number;
              /**
               * Set to true to indicate the element begins a new stacking context.
               */
              isStackingContext?: boolean;
          }
          /**
           * A subset of the full ComputedStyle as defined by the request whitelist.
           */
          interface ComputedStyle {
              /**
               * Name/value pairs of computed style properties.
               */
              properties: NameValue[];
          }
          /**
           * A name/value pair.
           */
          interface NameValue {
              /**
               * Attribute/property name.
               */
              name: string;
              /**
               * Attribute/property value.
               */
              value: string;
          }
          /**
           * Index of the string in the strings table.
           */
          type StringIndex = number;
          /**
           * Index of the string in the strings table.
           */
          type ArrayOfStrings = StringIndex[];
          /**
           * Data that is only present on rare nodes.
           */
          interface RareStringData {
              index: number[];
              value: StringIndex[];
          }
          interface RareBooleanData {
              index: number[];
          }
          interface RareIntegerData {
              index: number[];
              value: number[];
          }
          type Rectangle = number[];
          /**
           * Document snapshot.
           */
          interface DocumentSnapshot {
              /**
               * Document URL that `Document` or `FrameOwner` node points to.
               */
              documentURL: StringIndex;
              /**
               * Document title.
               */
              title: StringIndex;
              /**
               * Base URL that `Document` or `FrameOwner` node uses for URL completion.
               */
              baseURL: StringIndex;
              /**
               * Contains the document's content language.
               */
              contentLanguage: StringIndex;
              /**
               * Contains the document's character set encoding.
               */
              encodingName: StringIndex;
              /**
               * `DocumentType` node's publicId.
               */
              publicId: StringIndex;
              /**
               * `DocumentType` node's systemId.
               */
              systemId: StringIndex;
              /**
               * Frame ID for frame owner elements and also for the document node.
               */
              frameId: StringIndex;
              /**
               * A table with dom nodes.
               */
              nodes: NodeTreeSnapshot;
              /**
               * The nodes in the layout tree.
               */
              layout: LayoutTreeSnapshot;
              /**
               * The post-layout inline text nodes.
               */
              textBoxes: TextBoxSnapshot;
              /**
               * Horizontal scroll offset.
               */
              scrollOffsetX?: number;
              /**
               * Vertical scroll offset.
               */
              scrollOffsetY?: number;
              /**
               * Document content width.
               */
              contentWidth?: number;
              /**
               * Document content height.
               */
              contentHeight?: number;
          }
          /**
           * Table containing nodes.
           */
          interface NodeTreeSnapshot {
              /**
               * Parent node index.
               */
              parentIndex?: number[];
              /**
               * `Node`'s nodeType.
               */
              nodeType?: number[];
              /**
               * `Node`'s nodeName.
               */
              nodeName?: StringIndex[];
              /**
               * `Node`'s nodeValue.
               */
              nodeValue?: StringIndex[];
              /**
               * `Node`'s id, corresponds to DOM.Node.backendNodeId.
               */
              backendNodeId?: DOM.BackendNodeId[];
              /**
               * Attributes of an `Element` node. Flatten name, value pairs.
               */
              attributes?: ArrayOfStrings[];
              /**
               * Only set for textarea elements, contains the text value.
               */
              textValue?: RareStringData;
              /**
               * Only set for input elements, contains the input's associated text value.
               */
              inputValue?: RareStringData;
              /**
               * Only set for radio and checkbox input elements, indicates if the element has been checked
               */
              inputChecked?: RareBooleanData;
              /**
               * Only set for option elements, indicates if the element has been selected
               */
              optionSelected?: RareBooleanData;
              /**
               * The index of the document in the list of the snapshot documents.
               */
              contentDocumentIndex?: RareIntegerData;
              /**
               * Type of a pseudo element node.
               */
              pseudoType?: RareStringData;
              /**
               * Whether this DOM node responds to mouse clicks. This includes nodes that have had click
        event listeners attached via JavaScript as well as anchor tags that naturally navigate when
        clicked.
               */
              isClickable?: RareBooleanData;
              /**
               * The selected url for nodes with a srcset attribute.
               */
              currentSourceURL?: RareStringData;
              /**
               * The url of the script (if any) that generates this node.
               */
              originURL?: RareStringData;
          }
          /**
           * Table of details of an element in the DOM tree with a LayoutObject.
           */
          interface LayoutTreeSnapshot {
              /**
               * Index of the corresponding node in the `NodeTreeSnapshot` array returned by `captureSnapshot`.
               */
              nodeIndex: number[];
              /**
               * Array of indexes specifying computed style strings, filtered according to the `computedStyles` parameter passed to `captureSnapshot`.
               */
              styles: ArrayOfStrings[];
              /**
               * The absolute position bounding box.
               */
              bounds: Rectangle[];
              /**
               * Contents of the LayoutText, if any.
               */
              text: StringIndex[];
              /**
               * Stacking context information.
               */
              stackingContexts: RareBooleanData;
              /**
               * Global paint order index, which is determined by the stacking order of the nodes. Nodes
        that are painted together will have the same index. Only provided if includePaintOrder in
        captureSnapshot was true.
               */
              paintOrders?: number[];
              /**
               * The offset rect of nodes. Only available when includeDOMRects is set to true
               */
              offsetRects?: Rectangle[];
              /**
               * The scroll rect of nodes. Only available when includeDOMRects is set to true
               */
              scrollRects?: Rectangle[];
              /**
               * The client rect of nodes. Only available when includeDOMRects is set to true
               */
              clientRects?: Rectangle[];
          }
          /**
           * Table of details of the post layout rendered text positions. The exact layout should not be regarded as
      stable and may change between versions.
           */
          interface TextBoxSnapshot {
              /**
               * Index of the layout tree node that owns this box collection.
               */
              layoutIndex: number[];
              /**
               * The absolute position bounding box.
               */
              bounds: Rectangle[];
              /**
               * The starting index in characters, for this post layout textbox substring. Characters that
        would be represented as a surrogate pair in UTF-16 have length 2.
               */
              start: number[];
              /**
               * The number of characters in this post layout textbox substring. Characters that would be
        represented as a surrogate pair in UTF-16 have length 2.
               */
              length: number[];
          }
          /**
           * Disables DOM snapshot agent for the given page.
           */
          type disableParameters = {};
          type disableReturnValue = {};
          /**
           * Enables DOM snapshot agent for the given page.
           */
          type enableParameters = {};
          type enableReturnValue = {};
          /**
           * Returns a document snapshot, including the full DOM tree of the root node (including iframes,
      template contents, and imported documents) in a flattened array, as well as layout and
      white-listed computed style information for the nodes. Shadow DOM in the returned DOM tree is
      flattened.
           */
          type getSnapshotParameters = {
              /**
               * Whitelist of computed styles to return.
               */
              computedStyleWhitelist: string[];
              /**
               * Whether or not to retrieve details of DOM listeners (default false).
               */
              includeEventListeners?: boolean;
              /**
               * Whether to determine and include the paint order index of LayoutTreeNodes (default false).
               */
              includePaintOrder?: boolean;
              /**
               * Whether to include UA shadow tree in the snapshot (default false).
               */
              includeUserAgentShadowTree?: boolean;
          };
          type getSnapshotReturnValue = {
              /**
               * The nodes in the DOM tree. The DOMNode at index 0 corresponds to the root document.
               */
              domNodes: DOMNode[];
              /**
               * The nodes in the layout tree.
               */
              layoutTreeNodes: LayoutTreeNode[];
              /**
               * Whitelisted ComputedStyle properties for each node in the layout tree.
               */
              computedStyles: ComputedStyle[];
          };
          /**
           * Returns a document snapshot, including the full DOM tree of the root node (including iframes,
      template contents, and imported documents) in a flattened array, as well as layout and
      white-listed computed style information for the nodes. Shadow DOM in the returned DOM tree is
      flattened.
           */
          type captureSnapshotParameters = {
              /**
               * Whitelist of computed styles to return.
               */
              computedStyles: string[];
              /**
               * Whether to include layout object paint orders into the snapshot.
               */
              includePaintOrder?: boolean;
              /**
               * Whether to include DOM rectangles (offsetRects, clientRects, scrollRects) into the snapshot
               */
              includeDOMRects?: boolean;
          };
          type captureSnapshotReturnValue = {
              /**
               * The nodes in the DOM tree. The DOMNode at index 0 corresponds to the root document.
               */
              documents: DocumentSnapshot[];
              /**
               * Shared string table that all string properties refer to with indexes.
               */
              strings: string[];
          };
      }
      /**
       * Query and modify DOM storage.
       */
      module DOMStorage {
          /**
           * DOM Storage identifier.
           */
          interface StorageId {
              /**
               * Security origin for the storage.
               */
              securityOrigin: string;
              /**
               * Whether the storage is local storage (not session storage).
               */
              isLocalStorage: boolean;
          }
          /**
           * DOM Storage item.
           */
          type Item = string[];
          type domStorageItemAddedPayload = {
              storageId: StorageId;
              key: string;
              newValue: string;
          };
          type domStorageItemRemovedPayload = {
              storageId: StorageId;
              key: string;
          };
          type domStorageItemUpdatedPayload = {
              storageId: StorageId;
              key: string;
              oldValue: string;
              newValue: string;
          };
          type domStorageItemsClearedPayload = {
              storageId: StorageId;
          };
          type clearParameters = {
              storageId: StorageId;
          };
          type clearReturnValue = {};
          /**
           * Disables storage tracking, prevents storage events from being sent to the client.
           */
          type disableParameters = {};
          type disableReturnValue = {};
          /**
           * Enables storage tracking, storage events will now be delivered to the client.
           */
          type enableParameters = {};
          type enableReturnValue = {};
          type getDOMStorageItemsParameters = {
              storageId: StorageId;
          };
          type getDOMStorageItemsReturnValue = {
              entries: Item[];
          };
          type removeDOMStorageItemParameters = {
              storageId: StorageId;
              key: string;
          };
          type removeDOMStorageItemReturnValue = {};
          type setDOMStorageItemParameters = {
              storageId: StorageId;
              key: string;
              value: string;
          };
          type setDOMStorageItemReturnValue = {};
      }
      module Database {
          /**
           * Unique identifier of Database object.
           */
          type DatabaseId = string;
          /**
           * Database object.
           */
          interface Database {
              /**
               * Database ID.
               */
              id: DatabaseId;
              /**
               * Database domain.
               */
              domain: string;
              /**
               * Database name.
               */
              name: string;
              /**
               * Database version.
               */
              version: string;
          }
          /**
           * Database error.
           */
          interface Error {
              /**
               * Error message.
               */
              message: string;
              /**
               * Error code.
               */
              code: number;
          }
          type addDatabasePayload = {
              database: Database;
          };
          /**
           * Disables database tracking, prevents database events from being sent to the client.
           */
          type disableParameters = {};
          type disableReturnValue = {};
          /**
           * Enables database tracking, database events will now be delivered to the client.
           */
          type enableParameters = {};
          type enableReturnValue = {};
          type executeSQLParameters = {
              databaseId: DatabaseId;
              query: string;
          };
          type executeSQLReturnValue = {
              columnNames?: string[];
              values?: any[];
              sqlError?: Error;
          };
          type getDatabaseTableNamesParameters = {
              databaseId: DatabaseId;
          };
          type getDatabaseTableNamesReturnValue = {
              tableNames: string[];
          };
      }
      module DeviceOrientation {
          /**
           * Clears the overridden Device Orientation.
           */
          type clearDeviceOrientationOverrideParameters = {};
          type clearDeviceOrientationOverrideReturnValue = {};
          /**
           * Overrides the Device Orientation.
           */
          type setDeviceOrientationOverrideParameters = {
              /**
               * Mock alpha
               */
              alpha: number;
              /**
               * Mock beta
               */
              beta: number;
              /**
               * Mock gamma
               */
              gamma: number;
          };
          type setDeviceOrientationOverrideReturnValue = {};
      }
      /**
       * This domain emulates different environments for the page.
       */
      module Emulation {
          /**
           * Screen orientation.
           */
          interface ScreenOrientation {
              /**
               * Orientation type.
               */
              type: "portraitPrimary" | "portraitSecondary" | "landscapePrimary" | "landscapeSecondary";
              /**
               * Orientation angle.
               */
              angle: number;
          }
          interface MediaFeature {
              name: string;
              value: string;
          }
          /**
           * advance: If the scheduler runs out of immediate work, the virtual time base may fast forward to
      allow the next delayed task (if any) to run; pause: The virtual time base may not advance;
      pauseIfNetworkFetchesPending: The virtual time base may not advance if there are any pending
      resource fetches.
           */
          type VirtualTimePolicy = "advance" | "pause" | "pauseIfNetworkFetchesPending";
          /**
           * Notification sent after the virtual time budget for the current VirtualTimePolicy has run out.
           */
          type virtualTimeBudgetExpiredPayload = void;
          /**
           * Tells whether emulation is supported.
           */
          type canEmulateParameters = {};
          type canEmulateReturnValue = {
              /**
               * True if emulation is supported.
               */
              result: boolean;
          };
          /**
           * Clears the overriden device metrics.
           */
          type clearDeviceMetricsOverrideParameters = {};
          type clearDeviceMetricsOverrideReturnValue = {};
          /**
           * Clears the overriden Geolocation Position and Error.
           */
          type clearGeolocationOverrideParameters = {};
          type clearGeolocationOverrideReturnValue = {};
          /**
           * Requests that page scale factor is reset to initial values.
           */
          type resetPageScaleFactorParameters = {};
          type resetPageScaleFactorReturnValue = {};
          /**
           * Enables or disables simulating a focused and active page.
           */
          type setFocusEmulationEnabledParameters = {
              /**
               * Whether to enable to disable focus emulation.
               */
              enabled: boolean;
          };
          type setFocusEmulationEnabledReturnValue = {};
          /**
           * Enables CPU throttling to emulate slow CPUs.
           */
          type setCPUThrottlingRateParameters = {
              /**
               * Throttling rate as a slowdown factor (1 is no throttle, 2 is 2x slowdown, etc).
               */
              rate: number;
          };
          type setCPUThrottlingRateReturnValue = {};
          /**
           * Sets or clears an override of the default background color of the frame. This override is used
      if the content does not specify one.
           */
          type setDefaultBackgroundColorOverrideParameters = {
              /**
               * RGBA of the default background color. If not specified, any existing override will be
        cleared.
               */
              color?: DOM.RGBA;
          };
          type setDefaultBackgroundColorOverrideReturnValue = {};
          /**
           * Overrides the values of device screen dimensions (window.screen.width, window.screen.height,
      window.innerWidth, window.innerHeight, and "device-width"/"device-height"-related CSS media
      query results).
           */
          type setDeviceMetricsOverrideParameters = {
              /**
               * Overriding width value in pixels (minimum 0, maximum 10000000). 0 disables the override.
               */
              width: number;
              /**
               * Overriding height value in pixels (minimum 0, maximum 10000000). 0 disables the override.
               */
              height: number;
              /**
               * Overriding device scale factor value. 0 disables the override.
               */
              deviceScaleFactor: number;
              /**
               * Whether to emulate mobile device. This includes viewport meta tag, overlay scrollbars, text
        autosizing and more.
               */
              mobile: boolean;
              /**
               * Scale to apply to resulting view image.
               */
              scale?: number;
              /**
               * Overriding screen width value in pixels (minimum 0, maximum 10000000).
               */
              screenWidth?: number;
              /**
               * Overriding screen height value in pixels (minimum 0, maximum 10000000).
               */
              screenHeight?: number;
              /**
               * Overriding view X position on screen in pixels (minimum 0, maximum 10000000).
               */
              positionX?: number;
              /**
               * Overriding view Y position on screen in pixels (minimum 0, maximum 10000000).
               */
              positionY?: number;
              /**
               * Do not set visible view size, rely upon explicit setVisibleSize call.
               */
              dontSetVisibleSize?: boolean;
              /**
               * Screen orientation override.
               */
              screenOrientation?: ScreenOrientation;
              /**
               * If set, the visible area of the page will be overridden to this viewport. This viewport
        change is not observed by the page, e.g. viewport-relative elements do not change positions.
               */
              viewport?: Page.Viewport;
          };
          type setDeviceMetricsOverrideReturnValue = {};
          type setScrollbarsHiddenParameters = {
              /**
               * Whether scrollbars should be always hidden.
               */
              hidden: boolean;
          };
          type setScrollbarsHiddenReturnValue = {};
          type setDocumentCookieDisabledParameters = {
              /**
               * Whether document.coookie API should be disabled.
               */
              disabled: boolean;
          };
          type setDocumentCookieDisabledReturnValue = {};
          type setEmitTouchEventsForMouseParameters = {
              /**
               * Whether touch emulation based on mouse input should be enabled.
               */
              enabled: boolean;
              /**
               * Touch/gesture events configuration. Default: current platform.
               */
              configuration?: "mobile" | "desktop";
          };
          type setEmitTouchEventsForMouseReturnValue = {};
          /**
           * Emulates the given media type or media feature for CSS media queries.
           */
          type setEmulatedMediaParameters = {
              /**
               * Media type to emulate. Empty string disables the override.
               */
              media?: string;
              /**
               * Media features to emulate.
               */
              features?: MediaFeature[];
          };
          type setEmulatedMediaReturnValue = {};
          /**
           * Emulates the given vision deficiency.
           */
          type setEmulatedVisionDeficiencyParameters = {
              /**
               * Vision deficiency to emulate.
               */
              type: "none" | "achromatomaly" | "achromatopsia" | "blurredVision" | "deuteranomaly" | "deuteranopia" | "protanomaly" | "protanopia" | "tritanomaly" | "tritanopia";
          };
          type setEmulatedVisionDeficiencyReturnValue = {};
          /**
           * Overrides the Geolocation Position or Error. Omitting any of the parameters emulates position
      unavailable.
           */
          type setGeolocationOverrideParameters = {
              /**
               * Mock latitude
               */
              latitude?: number;
              /**
               * Mock longitude
               */
              longitude?: number;
              /**
               * Mock accuracy
               */
              accuracy?: number;
          };
          type setGeolocationOverrideReturnValue = {};
          /**
           * Overrides value returned by the javascript navigator object.
           */
          type setNavigatorOverridesParameters = {
              /**
               * The platform navigator.platform should return.
               */
              platform: string;
          };
          type setNavigatorOverridesReturnValue = {};
          /**
           * Sets a specified page scale factor.
           */
          type setPageScaleFactorParameters = {
              /**
               * Page scale factor.
               */
              pageScaleFactor: number;
          };
          type setPageScaleFactorReturnValue = {};
          /**
           * Switches script execution in the page.
           */
          type setScriptExecutionDisabledParameters = {
              /**
               * Whether script execution should be disabled in the page.
               */
              value: boolean;
          };
          type setScriptExecutionDisabledReturnValue = {};
          /**
           * Enables touch on platforms which do not support them.
           */
          type setTouchEmulationEnabledParameters = {
              /**
               * Whether the touch event emulation should be enabled.
               */
              enabled: boolean;
              /**
               * Maximum touch points supported. Defaults to one.
               */
              maxTouchPoints?: number;
          };
          type setTouchEmulationEnabledReturnValue = {};
          /**
           * Turns on virtual time for all frames (replacing real-time with a synthetic time source) and sets
      the current virtual time policy.  Note this supersedes any previous time budget.
           */
          type setVirtualTimePolicyParameters = {
              policy: VirtualTimePolicy;
              /**
               * If set, after this many virtual milliseconds have elapsed virtual time will be paused and a
        virtualTimeBudgetExpired event is sent.
               */
              budget?: number;
              /**
               * If set this specifies the maximum number of tasks that can be run before virtual is forced
        forwards to prevent deadlock.
               */
              maxVirtualTimeTaskStarvationCount?: number;
              /**
               * If set the virtual time policy change should be deferred until any frame starts navigating.
        Note any previous deferred policy change is superseded.
               */
              waitForNavigation?: boolean;
              /**
               * If set, base::Time::Now will be overriden to initially return this value.
               */
              initialVirtualTime?: Network.TimeSinceEpoch;
          };
          type setVirtualTimePolicyReturnValue = {
              /**
               * Absolute timestamp at which virtual time was first enabled (up time in milliseconds).
               */
              virtualTimeTicksBase: number;
          };
          /**
           * Overrides default host system locale with the specified one.
           */
          type setLocaleOverrideParameters = {
              /**
               * ICU style C locale (e.g. "en_US"). If not specified or empty, disables the override and
        restores default host system locale.
               */
              locale?: string;
          };
          type setLocaleOverrideReturnValue = {};
          /**
           * Overrides default host system timezone with the specified one.
           */
          type setTimezoneOverrideParameters = {
              /**
               * The timezone identifier. If empty, disables the override and
        restores default host system timezone.
               */
              timezoneId: string;
          };
          type setTimezoneOverrideReturnValue = {};
          /**
           * Resizes the frame/viewport of the page. Note that this does not affect the frame's container
      (e.g. browser window). Can be used to produce screenshots of the specified size. Not supported
      on Android.
           */
          type setVisibleSizeParameters = {
              /**
               * Frame width (DIP).
               */
              width: number;
              /**
               * Frame height (DIP).
               */
              height: number;
          };
          type setVisibleSizeReturnValue = {};
          /**
           * Allows overriding user agent with the given string.
           */
          type setUserAgentOverrideParameters = {
              /**
               * User agent to use.
               */
              userAgent: string;
              /**
               * Browser langugage to emulate.
               */
              acceptLanguage?: string;
              /**
               * The platform navigator.platform should return.
               */
              platform?: string;
          };
          type setUserAgentOverrideReturnValue = {};
      }
      /**
       * This domain provides experimental commands only supported in headless mode.
       */
      module HeadlessExperimental {
          /**
           * Encoding options for a screenshot.
           */
          interface ScreenshotParams {
              /**
               * Image compression format (defaults to png).
               */
              format?: "jpeg" | "png";
              /**
               * Compression quality from range [0..100] (jpeg only).
               */
              quality?: number;
          }
          /**
           * Issued when the target starts or stops needing BeginFrames.
      Deprecated. Issue beginFrame unconditionally instead and use result from
      beginFrame to detect whether the frames were suppressed.
           */
          type needsBeginFramesChangedPayload = {
              /**
               * True if BeginFrames are needed, false otherwise.
               */
              needsBeginFrames: boolean;
          };
          /**
           * Sends a BeginFrame to the target and returns when the frame was completed. Optionally captures a
      screenshot from the resulting frame. Requires that the target was created with enabled
      BeginFrameControl. Designed for use with --run-all-compositor-stages-before-draw, see also
      https://goo.gl/3zHXhB for more background.
           */
          type beginFrameParameters = {
              /**
               * Timestamp of this BeginFrame in Renderer TimeTicks (milliseconds of uptime). If not set,
        the current time will be used.
               */
              frameTimeTicks?: number;
              /**
               * The interval between BeginFrames that is reported to the compositor, in milliseconds.
        Defaults to a 60 frames/second interval, i.e. about 16.666 milliseconds.
               */
              interval?: number;
              /**
               * Whether updates should not be committed and drawn onto the display. False by default. If
        true, only side effects of the BeginFrame will be run, such as layout and animations, but
        any visual updates may not be visible on the display or in screenshots.
               */
              noDisplayUpdates?: boolean;
              /**
               * If set, a screenshot of the frame will be captured and returned in the response. Otherwise,
        no screenshot will be captured. Note that capturing a screenshot can fail, for example,
        during renderer initialization. In such a case, no screenshot data will be returned.
               */
              screenshot?: ScreenshotParams;
          };
          type beginFrameReturnValue = {
              /**
               * Whether the BeginFrame resulted in damage and, thus, a new frame was committed to the
        display. Reported for diagnostic uses, may be removed in the future.
               */
              hasDamage: boolean;
              /**
               * Base64-encoded image data of the screenshot, if one was requested and successfully taken.
               */
              screenshotData?: binary;
          };
          /**
           * Disables headless events for the target.
           */
          type disableParameters = {};
          type disableReturnValue = {};
          /**
           * Enables headless events for the target.
           */
          type enableParameters = {};
          type enableReturnValue = {};
      }
      /**
       * Input/Output operations for streams produced by DevTools.
       */
      module IO {
          /**
           * This is either obtained from another method or specifed as `blob:&lt;uuid&gt;` where
      `&lt;uuid&gt` is an UUID of a Blob.
           */
          type StreamHandle = string;
          /**
           * Close the stream, discard any temporary backing storage.
           */
          type closeParameters = {
              /**
               * Handle of the stream to close.
               */
              handle: StreamHandle;
          };
          type closeReturnValue = {};
          /**
           * Read a chunk of the stream
           */
          type readParameters = {
              /**
               * Handle of the stream to read.
               */
              handle: StreamHandle;
              /**
               * Seek to the specified offset before reading (if not specificed, proceed with offset
        following the last read). Some types of streams may only support sequential reads.
               */
              offset?: number;
              /**
               * Maximum number of bytes to read (left upon the agent discretion if not specified).
               */
              size?: number;
          };
          type readReturnValue = {
              /**
               * Set if the data is base64-encoded
               */
              base64Encoded?: boolean;
              /**
               * Data that were read.
               */
              data: string;
              /**
               * Set if the end-of-file condition occured while reading.
               */
              eof: boolean;
          };
          /**
           * Return UUID of Blob object specified by a remote object id.
           */
          type resolveBlobParameters = {
              /**
               * Object id of a Blob object wrapper.
               */
              objectId: Runtime.RemoteObjectId;
          };
          type resolveBlobReturnValue = {
              /**
               * UUID of the specified Blob.
               */
              uuid: string;
          };
      }
      module IndexedDB {
          /**
           * Database with an array of object stores.
           */
          interface DatabaseWithObjectStores {
              /**
               * Database name.
               */
              name: string;
              /**
               * Database version (type is not 'integer', as the standard
        requires the version number to be 'unsigned long long')
               */
              version: number;
              /**
               * Object stores in this database.
               */
              objectStores: ObjectStore[];
          }
          /**
           * Object store.
           */
          interface ObjectStore {
              /**
               * Object store name.
               */
              name: string;
              /**
               * Object store key path.
               */
              keyPath: KeyPath;
              /**
               * If true, object store has auto increment flag set.
               */
              autoIncrement: boolean;
              /**
               * Indexes in this object store.
               */
              indexes: ObjectStoreIndex[];
          }
          /**
           * Object store index.
           */
          interface ObjectStoreIndex {
              /**
               * Index name.
               */
              name: string;
              /**
               * Index key path.
               */
              keyPath: KeyPath;
              /**
               * If true, index is unique.
               */
              unique: boolean;
              /**
               * If true, index allows multiple entries for a key.
               */
              multiEntry: boolean;
          }
          /**
           * Key.
           */
          interface Key {
              /**
               * Key type.
               */
              type: "number" | "string" | "date" | "array";
              /**
               * Number value.
               */
              number?: number;
              /**
               * String value.
               */
              string?: string;
              /**
               * Date value.
               */
              date?: number;
              /**
               * Array value.
               */
              array?: Key[];
          }
          /**
           * Key range.
           */
          interface KeyRange {
              /**
               * Lower bound.
               */
              lower?: Key;
              /**
               * Upper bound.
               */
              upper?: Key;
              /**
               * If true lower bound is open.
               */
              lowerOpen: boolean;
              /**
               * If true upper bound is open.
               */
              upperOpen: boolean;
          }
          /**
           * Data entry.
           */
          interface DataEntry {
              /**
               * Key object.
               */
              key: Runtime.RemoteObject;
              /**
               * Primary key object.
               */
              primaryKey: Runtime.RemoteObject;
              /**
               * Value object.
               */
              value: Runtime.RemoteObject;
          }
          /**
           * Key path.
           */
          interface KeyPath {
              /**
               * Key path type.
               */
              type: "null" | "string" | "array";
              /**
               * String value.
               */
              string?: string;
              /**
               * Array value.
               */
              array?: string[];
          }
          /**
           * Clears all entries from an object store.
           */
          type clearObjectStoreParameters = {
              /**
               * Security origin.
               */
              securityOrigin: string;
              /**
               * Database name.
               */
              databaseName: string;
              /**
               * Object store name.
               */
              objectStoreName: string;
          };
          type clearObjectStoreReturnValue = {};
          /**
           * Deletes a database.
           */
          type deleteDatabaseParameters = {
              /**
               * Security origin.
               */
              securityOrigin: string;
              /**
               * Database name.
               */
              databaseName: string;
          };
          type deleteDatabaseReturnValue = {};
          /**
           * Delete a range of entries from an object store
           */
          type deleteObjectStoreEntriesParameters = {
              securityOrigin: string;
              databaseName: string;
              objectStoreName: string;
              /**
               * Range of entry keys to delete
               */
              keyRange: KeyRange;
          };
          type deleteObjectStoreEntriesReturnValue = {};
          /**
           * Disables events from backend.
           */
          type disableParameters = {};
          type disableReturnValue = {};
          /**
           * Enables events from backend.
           */
          type enableParameters = {};
          type enableReturnValue = {};
          /**
           * Requests data from object store or index.
           */
          type requestDataParameters = {
              /**
               * Security origin.
               */
              securityOrigin: string;
              /**
               * Database name.
               */
              databaseName: string;
              /**
               * Object store name.
               */
              objectStoreName: string;
              /**
               * Index name, empty string for object store data requests.
               */
              indexName: string;
              /**
               * Number of records to skip.
               */
              skipCount: number;
              /**
               * Number of records to fetch.
               */
              pageSize: number;
              /**
               * Key range.
               */
              keyRange?: KeyRange;
          };
          type requestDataReturnValue = {
              /**
               * Array of object store data entries.
               */
              objectStoreDataEntries: DataEntry[];
              /**
               * If true, there are more entries to fetch in the given range.
               */
              hasMore: boolean;
          };
          /**
           * Gets metadata of an object store
           */
          type getMetadataParameters = {
              /**
               * Security origin.
               */
              securityOrigin: string;
              /**
               * Database name.
               */
              databaseName: string;
              /**
               * Object store name.
               */
              objectStoreName: string;
          };
          type getMetadataReturnValue = {
              /**
               * the entries count
               */
              entriesCount: number;
              /**
               * the current value of key generator, to become the next inserted
        key into the object store. Valid if objectStore.autoIncrement
        is true.
               */
              keyGeneratorValue: number;
          };
          /**
           * Requests database with given name in given frame.
           */
          type requestDatabaseParameters = {
              /**
               * Security origin.
               */
              securityOrigin: string;
              /**
               * Database name.
               */
              databaseName: string;
          };
          type requestDatabaseReturnValue = {
              /**
               * Database with an array of object stores.
               */
              databaseWithObjectStores: DatabaseWithObjectStores;
          };
          /**
           * Requests database names for given security origin.
           */
          type requestDatabaseNamesParameters = {
              /**
               * Security origin.
               */
              securityOrigin: string;
          };
          type requestDatabaseNamesReturnValue = {
              /**
               * Database names for origin.
               */
              databaseNames: string[];
          };
      }
      module Input {
          interface TouchPoint {
              /**
               * X coordinate of the event relative to the main frame's viewport in CSS pixels.
               */
              x: number;
              /**
               * Y coordinate of the event relative to the main frame's viewport in CSS pixels. 0 refers to
        the top of the viewport and Y increases as it proceeds towards the bottom of the viewport.
               */
              y: number;
              /**
               * X radius of the touch area (default: 1.0).
               */
              radiusX?: number;
              /**
               * Y radius of the touch area (default: 1.0).
               */
              radiusY?: number;
              /**
               * Rotation angle (default: 0.0).
               */
              rotationAngle?: number;
              /**
               * Force (default: 1.0).
               */
              force?: number;
              /**
               * Identifier used to track touch sources between events, must be unique within an event.
               */
              id?: number;
          }
          type GestureSourceType = "default" | "touch" | "mouse";
          type MouseButton = "none" | "left" | "middle" | "right" | "back" | "forward";
          /**
           * UTC time in seconds, counted from January 1, 1970.
           */
          type TimeSinceEpoch = number;
          /**
           * Dispatches a key event to the page.
           */
          type dispatchKeyEventParameters = {
              /**
               * Type of the key event.
               */
              type: "keyDown" | "keyUp" | "rawKeyDown" | "char";
              /**
               * Bit field representing pressed modifier keys. Alt=1, Ctrl=2, Meta/Command=4, Shift=8
        (default: 0).
               */
              modifiers?: number;
              /**
               * Time at which the event occurred.
               */
              timestamp?: TimeSinceEpoch;
              /**
               * Text as generated by processing a virtual key code with a keyboard layout. Not needed for
        for `keyUp` and `rawKeyDown` events (default: "")
               */
              text?: string;
              /**
               * Text that would have been generated by the keyboard if no modifiers were pressed (except for
        shift). Useful for shortcut (accelerator) key handling (default: "").
               */
              unmodifiedText?: string;
              /**
               * Unique key identifier (e.g., 'U+0041') (default: "").
               */
              keyIdentifier?: string;
              /**
               * Unique DOM defined string value for each physical key (e.g., 'KeyA') (default: "").
               */
              code?: string;
              /**
               * Unique DOM defined string value describing the meaning of the key in the context of active
        modifiers, keyboard layout, etc (e.g., 'AltGr') (default: "").
               */
              key?: string;
              /**
               * Windows virtual key code (default: 0).
               */
              windowsVirtualKeyCode?: number;
              /**
               * Native virtual key code (default: 0).
               */
              nativeVirtualKeyCode?: number;
              /**
               * Whether the event was generated from auto repeat (default: false).
               */
              autoRepeat?: boolean;
              /**
               * Whether the event was generated from the keypad (default: false).
               */
              isKeypad?: boolean;
              /**
               * Whether the event was a system key event (default: false).
               */
              isSystemKey?: boolean;
              /**
               * Whether the event was from the left or right side of the keyboard. 1=Left, 2=Right (default:
        0).
               */
              location?: number;
          };
          type dispatchKeyEventReturnValue = {};
          /**
           * This method emulates inserting text that doesn't come from a key press,
      for example an emoji keyboard or an IME.
           */
          type insertTextParameters = {
              /**
               * The text to insert.
               */
              text: string;
          };
          type insertTextReturnValue = {};
          /**
           * Dispatches a mouse event to the page.
           */
          type dispatchMouseEventParameters = {
              /**
               * Type of the mouse event.
               */
              type: "mousePressed" | "mouseReleased" | "mouseMoved" | "mouseWheel";
              /**
               * X coordinate of the event relative to the main frame's viewport in CSS pixels.
               */
              x: number;
              /**
               * Y coordinate of the event relative to the main frame's viewport in CSS pixels. 0 refers to
        the top of the viewport and Y increases as it proceeds towards the bottom of the viewport.
               */
              y: number;
              /**
               * Bit field representing pressed modifier keys. Alt=1, Ctrl=2, Meta/Command=4, Shift=8
        (default: 0).
               */
              modifiers?: number;
              /**
               * Time at which the event occurred.
               */
              timestamp?: TimeSinceEpoch;
              /**
               * Mouse button (default: "none").
               */
              button?: MouseButton;
              /**
               * A number indicating which buttons are pressed on the mouse when a mouse event is triggered.
        Left=1, Right=2, Middle=4, Back=8, Forward=16, None=0.
               */
              buttons?: number;
              /**
               * Number of times the mouse button was clicked (default: 0).
               */
              clickCount?: number;
              /**
               * X delta in CSS pixels for mouse wheel event (default: 0).
               */
              deltaX?: number;
              /**
               * Y delta in CSS pixels for mouse wheel event (default: 0).
               */
              deltaY?: number;
              /**
               * Pointer type (default: "mouse").
               */
              pointerType?: "mouse" | "pen";
          };
          type dispatchMouseEventReturnValue = {};
          /**
           * Dispatches a touch event to the page.
           */
          type dispatchTouchEventParameters = {
              /**
               * Type of the touch event. TouchEnd and TouchCancel must not contain any touch points, while
        TouchStart and TouchMove must contains at least one.
               */
              type: "touchStart" | "touchEnd" | "touchMove" | "touchCancel";
              /**
               * Active touch points on the touch device. One event per any changed point (compared to
        previous touch event in a sequence) is generated, emulating pressing/moving/releasing points
        one by one.
               */
              touchPoints: TouchPoint[];
              /**
               * Bit field representing pressed modifier keys. Alt=1, Ctrl=2, Meta/Command=4, Shift=8
        (default: 0).
               */
              modifiers?: number;
              /**
               * Time at which the event occurred.
               */
              timestamp?: TimeSinceEpoch;
          };
          type dispatchTouchEventReturnValue = {};
          /**
           * Emulates touch event from the mouse event parameters.
           */
          type emulateTouchFromMouseEventParameters = {
              /**
               * Type of the mouse event.
               */
              type: "mousePressed" | "mouseReleased" | "mouseMoved" | "mouseWheel";
              /**
               * X coordinate of the mouse pointer in DIP.
               */
              x: number;
              /**
               * Y coordinate of the mouse pointer in DIP.
               */
              y: number;
              /**
               * Mouse button. Only "none", "left", "right" are supported.
               */
              button: MouseButton;
              /**
               * Time at which the event occurred (default: current time).
               */
              timestamp?: TimeSinceEpoch;
              /**
               * X delta in DIP for mouse wheel event (default: 0).
               */
              deltaX?: number;
              /**
               * Y delta in DIP for mouse wheel event (default: 0).
               */
              deltaY?: number;
              /**
               * Bit field representing pressed modifier keys. Alt=1, Ctrl=2, Meta/Command=4, Shift=8
        (default: 0).
               */
              modifiers?: number;
              /**
               * Number of times the mouse button was clicked (default: 0).
               */
              clickCount?: number;
          };
          type emulateTouchFromMouseEventReturnValue = {};
          /**
           * Ignores input events (useful while auditing page).
           */
          type setIgnoreInputEventsParameters = {
              /**
               * Ignores input events processing when set to true.
               */
              ignore: boolean;
          };
          type setIgnoreInputEventsReturnValue = {};
          /**
           * Synthesizes a pinch gesture over a time period by issuing appropriate touch events.
           */
          type synthesizePinchGestureParameters = {
              /**
               * X coordinate of the start of the gesture in CSS pixels.
               */
              x: number;
              /**
               * Y coordinate of the start of the gesture in CSS pixels.
               */
              y: number;
              /**
               * Relative scale factor after zooming (>1.0 zooms in, <1.0 zooms out).
               */
              scaleFactor: number;
              /**
               * Relative pointer speed in pixels per second (default: 800).
               */
              relativeSpeed?: number;
              /**
               * Which type of input events to be generated (default: 'default', which queries the platform
        for the preferred input type).
               */
              gestureSourceType?: GestureSourceType;
          };
          type synthesizePinchGestureReturnValue = {};
          /**
           * Synthesizes a scroll gesture over a time period by issuing appropriate touch events.
           */
          type synthesizeScrollGestureParameters = {
              /**
               * X coordinate of the start of the gesture in CSS pixels.
               */
              x: number;
              /**
               * Y coordinate of the start of the gesture in CSS pixels.
               */
              y: number;
              /**
               * The distance to scroll along the X axis (positive to scroll left).
               */
              xDistance?: number;
              /**
               * The distance to scroll along the Y axis (positive to scroll up).
               */
              yDistance?: number;
              /**
               * The number of additional pixels to scroll back along the X axis, in addition to the given
        distance.
               */
              xOverscroll?: number;
              /**
               * The number of additional pixels to scroll back along the Y axis, in addition to the given
        distance.
               */
              yOverscroll?: number;
              /**
               * Prevent fling (default: true).
               */
              preventFling?: boolean;
              /**
               * Swipe speed in pixels per second (default: 800).
               */
              speed?: number;
              /**
               * Which type of input events to be generated (default: 'default', which queries the platform
        for the preferred input type).
               */
              gestureSourceType?: GestureSourceType;
              /**
               * The number of times to repeat the gesture (default: 0).
               */
              repeatCount?: number;
              /**
               * The number of milliseconds delay between each repeat. (default: 250).
               */
              repeatDelayMs?: number;
              /**
               * The name of the interaction markers to generate, if not empty (default: "").
               */
              interactionMarkerName?: string;
          };
          type synthesizeScrollGestureReturnValue = {};
          /**
           * Synthesizes a tap gesture over a time period by issuing appropriate touch events.
           */
          type synthesizeTapGestureParameters = {
              /**
               * X coordinate of the start of the gesture in CSS pixels.
               */
              x: number;
              /**
               * Y coordinate of the start of the gesture in CSS pixels.
               */
              y: number;
              /**
               * Duration between touchdown and touchup events in ms (default: 50).
               */
              duration?: number;
              /**
               * Number of times to perform the tap (e.g. 2 for double tap, default: 1).
               */
              tapCount?: number;
              /**
               * Which type of input events to be generated (default: 'default', which queries the platform
        for the preferred input type).
               */
              gestureSourceType?: GestureSourceType;
          };
          type synthesizeTapGestureReturnValue = {};
      }
      module Inspector {
          /**
           * Fired when remote debugging connection is about to be terminated. Contains detach reason.
           */
          type detachedPayload = {
              /**
               * The reason why connection has been terminated.
               */
              reason: string;
          };
          /**
           * Fired when debugging target has crashed
           */
          type targetCrashedPayload = void;
          /**
           * Fired when debugging target has reloaded after crash
           */
          type targetReloadedAfterCrashPayload = void;
          /**
           * Disables inspector domain notifications.
           */
          type disableParameters = {};
          type disableReturnValue = {};
          /**
           * Enables inspector domain notifications.
           */
          type enableParameters = {};
          type enableReturnValue = {};
      }
      module LayerTree {
          /**
           * Unique Layer identifier.
           */
          type LayerId = string;
          /**
           * Unique snapshot identifier.
           */
          type SnapshotId = string;
          /**
           * Rectangle where scrolling happens on the main thread.
           */
          interface ScrollRect {
              /**
               * Rectangle itself.
               */
              rect: DOM.Rect;
              /**
               * Reason for rectangle to force scrolling on the main thread
               */
              type: "RepaintsOnScroll" | "TouchEventHandler" | "WheelEventHandler";
          }
          /**
           * Sticky position constraints.
           */
          interface StickyPositionConstraint {
              /**
               * Layout rectangle of the sticky element before being shifted
               */
              stickyBoxRect: DOM.Rect;
              /**
               * Layout rectangle of the containing block of the sticky element
               */
              containingBlockRect: DOM.Rect;
              /**
               * The nearest sticky layer that shifts the sticky box
               */
              nearestLayerShiftingStickyBox?: LayerId;
              /**
               * The nearest sticky layer that shifts the containing block
               */
              nearestLayerShiftingContainingBlock?: LayerId;
          }
          /**
           * Serialized fragment of layer picture along with its offset within the layer.
           */
          interface PictureTile {
              /**
               * Offset from owning layer left boundary
               */
              x: number;
              /**
               * Offset from owning layer top boundary
               */
              y: number;
              /**
               * Base64-encoded snapshot data.
               */
              picture: binary;
          }
          /**
           * Information about a compositing layer.
           */
          interface Layer {
              /**
               * The unique id for this layer.
               */
              layerId: LayerId;
              /**
               * The id of parent (not present for root).
               */
              parentLayerId?: LayerId;
              /**
               * The backend id for the node associated with this layer.
               */
              backendNodeId?: DOM.BackendNodeId;
              /**
               * Offset from parent layer, X coordinate.
               */
              offsetX: number;
              /**
               * Offset from parent layer, Y coordinate.
               */
              offsetY: number;
              /**
               * Layer width.
               */
              width: number;
              /**
               * Layer height.
               */
              height: number;
              /**
               * Transformation matrix for layer, default is identity matrix
               */
              transform?: number[];
              /**
               * Transform anchor point X, absent if no transform specified
               */
              anchorX?: number;
              /**
               * Transform anchor point Y, absent if no transform specified
               */
              anchorY?: number;
              /**
               * Transform anchor point Z, absent if no transform specified
               */
              anchorZ?: number;
              /**
               * Indicates how many time this layer has painted.
               */
              paintCount: number;
              /**
               * Indicates whether this layer hosts any content, rather than being used for
        transform/scrolling purposes only.
               */
              drawsContent: boolean;
              /**
               * Set if layer is not visible.
               */
              invisible?: boolean;
              /**
               * Rectangles scrolling on main thread only.
               */
              scrollRects?: ScrollRect[];
              /**
               * Sticky position constraint information
               */
              stickyPositionConstraint?: StickyPositionConstraint;
          }
          /**
           * Array of timings, one per paint step.
           */
          type PaintProfile = number[];
          type layerPaintedPayload = {
              /**
               * The id of the painted layer.
               */
              layerId: LayerId;
              /**
               * Clip rectangle.
               */
              clip: DOM.Rect;
          };
          type layerTreeDidChangePayload = {
              /**
               * Layer tree, absent if not in the comspositing mode.
               */
              layers?: Layer[];
          };
          /**
           * Provides the reasons why the given layer was composited.
           */
          type compositingReasonsParameters = {
              /**
               * The id of the layer for which we want to get the reasons it was composited.
               */
              layerId: LayerId;
          };
          type compositingReasonsReturnValue = {
              /**
               * A list of strings specifying reasons for the given layer to become composited.
               */
              compositingReasons: string[];
              /**
               * A list of strings specifying reason IDs for the given layer to become composited.
               */
              compositingReasonIds: string[];
          };
          /**
           * Disables compositing tree inspection.
           */
          type disableParameters = {};
          type disableReturnValue = {};
          /**
           * Enables compositing tree inspection.
           */
          type enableParameters = {};
          type enableReturnValue = {};
          /**
           * Returns the snapshot identifier.
           */
          type loadSnapshotParameters = {
              /**
               * An array of tiles composing the snapshot.
               */
              tiles: PictureTile[];
          };
          type loadSnapshotReturnValue = {
              /**
               * The id of the snapshot.
               */
              snapshotId: SnapshotId;
          };
          /**
           * Returns the layer snapshot identifier.
           */
          type makeSnapshotParameters = {
              /**
               * The id of the layer.
               */
              layerId: LayerId;
          };
          type makeSnapshotReturnValue = {
              /**
               * The id of the layer snapshot.
               */
              snapshotId: SnapshotId;
          };
          type profileSnapshotParameters = {
              /**
               * The id of the layer snapshot.
               */
              snapshotId: SnapshotId;
              /**
               * The maximum number of times to replay the snapshot (1, if not specified).
               */
              minRepeatCount?: number;
              /**
               * The minimum duration (in seconds) to replay the snapshot.
               */
              minDuration?: number;
              /**
               * The clip rectangle to apply when replaying the snapshot.
               */
              clipRect?: DOM.Rect;
          };
          type profileSnapshotReturnValue = {
              /**
               * The array of paint profiles, one per run.
               */
              timings: PaintProfile[];
          };
          /**
           * Releases layer snapshot captured by the back-end.
           */
          type releaseSnapshotParameters = {
              /**
               * The id of the layer snapshot.
               */
              snapshotId: SnapshotId;
          };
          type releaseSnapshotReturnValue = {};
          /**
           * Replays the layer snapshot and returns the resulting bitmap.
           */
          type replaySnapshotParameters = {
              /**
               * The id of the layer snapshot.
               */
              snapshotId: SnapshotId;
              /**
               * The first step to replay from (replay from the very start if not specified).
               */
              fromStep?: number;
              /**
               * The last step to replay to (replay till the end if not specified).
               */
              toStep?: number;
              /**
               * The scale to apply while replaying (defaults to 1).
               */
              scale?: number;
          };
          type replaySnapshotReturnValue = {
              /**
               * A data: URL for resulting image.
               */
              dataURL: string;
          };
          /**
           * Replays the layer snapshot and returns canvas log.
           */
          type snapshotCommandLogParameters = {
              /**
               * The id of the layer snapshot.
               */
              snapshotId: SnapshotId;
          };
          type snapshotCommandLogReturnValue = {
              /**
               * The array of canvas function calls.
               */
              commandLog: {
                  [key: string]: string;
              }[];
          };
      }
      /**
       * Provides access to log entries.
       */
      module Log {
          /**
           * Log entry.
           */
          interface LogEntry {
              /**
               * Log entry source.
               */
              source: "xml" | "javascript" | "network" | "storage" | "appcache" | "rendering" | "security" | "deprecation" | "worker" | "violation" | "intervention" | "recommendation" | "other";
              /**
               * Log entry severity.
               */
              level: "verbose" | "info" | "warning" | "error";
              /**
               * Logged text.
               */
              text: string;
              /**
               * Timestamp when this entry was added.
               */
              timestamp: Runtime.Timestamp;
              /**
               * URL of the resource if known.
               */
              url?: string;
              /**
               * Line number in the resource.
               */
              lineNumber?: number;
              /**
               * JavaScript stack trace.
               */
              stackTrace?: Runtime.StackTrace;
              /**
               * Identifier of the network request associated with this entry.
               */
              networkRequestId?: Network.RequestId;
              /**
               * Identifier of the worker associated with this entry.
               */
              workerId?: string;
              /**
               * Call arguments.
               */
              args?: Runtime.RemoteObject[];
          }
          /**
           * Violation configuration setting.
           */
          interface ViolationSetting {
              /**
               * Violation type.
               */
              name: "longTask" | "longLayout" | "blockedEvent" | "blockedParser" | "discouragedAPIUse" | "handler" | "recurringHandler";
              /**
               * Time threshold to trigger upon.
               */
              threshold: number;
          }
          /**
           * Issued when new message was logged.
           */
          type entryAddedPayload = {
              /**
               * The entry.
               */
              entry: LogEntry;
          };
          /**
           * Clears the log.
           */
          type clearParameters = {};
          type clearReturnValue = {};
          /**
           * Disables log domain, prevents further log entries from being reported to the client.
           */
          type disableParameters = {};
          type disableReturnValue = {};
          /**
           * Enables log domain, sends the entries collected so far to the client by means of the
      `entryAdded` notification.
           */
          type enableParameters = {};
          type enableReturnValue = {};
          /**
           * start violation reporting.
           */
          type startViolationsReportParameters = {
              /**
               * Configuration for violations.
               */
              config: ViolationSetting[];
          };
          type startViolationsReportReturnValue = {};
          /**
           * Stop violation reporting.
           */
          type stopViolationsReportParameters = {};
          type stopViolationsReportReturnValue = {};
      }
      module Memory {
          /**
           * Memory pressure level.
           */
          type PressureLevel = "moderate" | "critical";
          /**
           * Heap profile sample.
           */
          interface SamplingProfileNode {
              /**
               * Size of the sampled allocation.
               */
              size: number;
              /**
               * Total bytes attributed to this sample.
               */
              total: number;
              /**
               * Execution stack at the point of allocation.
               */
              stack: string[];
          }
          /**
           * Array of heap profile samples.
           */
          interface SamplingProfile {
              samples: SamplingProfileNode[];
              modules: Module[];
          }
          /**
           * Executable module information
           */
          interface Module {
              /**
               * Name of the module.
               */
              name: string;
              /**
               * UUID of the module.
               */
              uuid: string;
              /**
               * Base address where the module is loaded into memory. Encoded as a decimal
        or hexadecimal (0x prefixed) string.
               */
              baseAddress: string;
              /**
               * Size of the module in bytes.
               */
              size: number;
          }
          type getDOMCountersParameters = {};
          type getDOMCountersReturnValue = {
              documents: number;
              nodes: number;
              jsEventListeners: number;
          };
          type prepareForLeakDetectionParameters = {};
          type prepareForLeakDetectionReturnValue = {};
          /**
           * Simulate OomIntervention by purging V8 memory.
           */
          type forciblyPurgeJavaScriptMemoryParameters = {};
          type forciblyPurgeJavaScriptMemoryReturnValue = {};
          /**
           * Enable/disable suppressing memory pressure notifications in all processes.
           */
          type setPressureNotificationsSuppressedParameters = {
              /**
               * If true, memory pressure notifications will be suppressed.
               */
              suppressed: boolean;
          };
          type setPressureNotificationsSuppressedReturnValue = {};
          /**
           * Simulate a memory pressure notification in all processes.
           */
          type simulatePressureNotificationParameters = {
              /**
               * Memory pressure level of the notification.
               */
              level: PressureLevel;
          };
          type simulatePressureNotificationReturnValue = {};
          /**
           * Start collecting native memory profile.
           */
          type startSamplingParameters = {
              /**
               * Average number of bytes between samples.
               */
              samplingInterval?: number;
              /**
               * Do not randomize intervals between samples.
               */
              suppressRandomness?: boolean;
          };
          type startSamplingReturnValue = {};
          /**
           * Stop collecting native memory profile.
           */
          type stopSamplingParameters = {};
          type stopSamplingReturnValue = {};
          /**
           * Retrieve native memory allocations profile
      collected since renderer process startup.
           */
          type getAllTimeSamplingProfileParameters = {};
          type getAllTimeSamplingProfileReturnValue = {
              profile: SamplingProfile;
          };
          /**
           * Retrieve native memory allocations profile
      collected since browser process startup.
           */
          type getBrowserSamplingProfileParameters = {};
          type getBrowserSamplingProfileReturnValue = {
              profile: SamplingProfile;
          };
          /**
           * Retrieve native memory allocations profile collected since last
      `startSampling` call.
           */
          type getSamplingProfileParameters = {};
          type getSamplingProfileReturnValue = {
              profile: SamplingProfile;
          };
      }
      /**
       * Network domain allows tracking network activities of the page. It exposes information about http,
    file, data and other requests and responses, their headers, bodies, timing, etc.
       */
      module Network {
          /**
           * Resource type as it was perceived by the rendering engine.
           */
          type ResourceType = "Document" | "Stylesheet" | "Image" | "Media" | "Font" | "Script" | "TextTrack" | "XHR" | "Fetch" | "EventSource" | "WebSocket" | "Manifest" | "SignedExchange" | "Ping" | "CSPViolationReport" | "Other";
          /**
           * Unique loader identifier.
           */
          type LoaderId = string;
          /**
           * Unique request identifier.
           */
          type RequestId = string;
          /**
           * Unique intercepted request identifier.
           */
          type InterceptionId = string;
          /**
           * Network level fetch failure reason.
           */
          type ErrorReason = "Failed" | "Aborted" | "TimedOut" | "AccessDenied" | "ConnectionClosed" | "ConnectionReset" | "ConnectionRefused" | "ConnectionAborted" | "ConnectionFailed" | "NameNotResolved" | "InternetDisconnected" | "AddressUnreachable" | "BlockedByClient" | "BlockedByResponse";
          /**
           * UTC time in seconds, counted from January 1, 1970.
           */
          type TimeSinceEpoch = number;
          /**
           * Monotonically increasing time in seconds since an arbitrary point in the past.
           */
          type MonotonicTime = number;
          /**
           * Request / response headers as keys / values of JSON object.
           */
          type Headers = {
              [key: string]: string;
          };
          /**
           * The underlying connection technology that the browser is supposedly using.
           */
          type ConnectionType = "none" | "cellular2g" | "cellular3g" | "cellular4g" | "bluetooth" | "ethernet" | "wifi" | "wimax" | "other";
          /**
           * Represents the cookie's 'SameSite' status:
      https://tools.ietf.org/html/draft-west-first-party-cookies
           */
          type CookieSameSite = "Strict" | "Lax" | "None";
          /**
           * Represents the cookie's 'Priority' status:
      https://tools.ietf.org/html/draft-west-cookie-priority-00
           */
          type CookiePriority = "Low" | "Medium" | "High";
          /**
           * Timing information for the request.
           */
          interface ResourceTiming {
              /**
               * Timing's requestTime is a baseline in seconds, while the other numbers are ticks in
        milliseconds relatively to this requestTime.
               */
              requestTime: number;
              /**
               * Started resolving proxy.
               */
              proxyStart: number;
              /**
               * Finished resolving proxy.
               */
              proxyEnd: number;
              /**
               * Started DNS address resolve.
               */
              dnsStart: number;
              /**
               * Finished DNS address resolve.
               */
              dnsEnd: number;
              /**
               * Started connecting to the remote host.
               */
              connectStart: number;
              /**
               * Connected to the remote host.
               */
              connectEnd: number;
              /**
               * Started SSL handshake.
               */
              sslStart: number;
              /**
               * Finished SSL handshake.
               */
              sslEnd: number;
              /**
               * Started running ServiceWorker.
               */
              workerStart: number;
              /**
               * Finished Starting ServiceWorker.
               */
              workerReady: number;
              /**
               * Started sending request.
               */
              sendStart: number;
              /**
               * Finished sending request.
               */
              sendEnd: number;
              /**
               * Time the server started pushing request.
               */
              pushStart: number;
              /**
               * Time the server finished pushing request.
               */
              pushEnd: number;
              /**
               * Finished receiving response headers.
               */
              receiveHeadersEnd: number;
          }
          /**
           * Loading priority of a resource request.
           */
          type ResourcePriority = "VeryLow" | "Low" | "Medium" | "High" | "VeryHigh";
          /**
           * HTTP request data.
           */
          interface Request {
              /**
               * Request URL (without fragment).
               */
              url: string;
              /**
               * Fragment of the requested URL starting with hash, if present.
               */
              urlFragment?: string;
              /**
               * HTTP request method.
               */
              method: string;
              /**
               * HTTP request headers.
               */
              headers: Headers;
              /**
               * HTTP POST request data.
               */
              postData?: string;
              /**
               * True when the request has POST data. Note that postData might still be omitted when this flag is true when the data is too long.
               */
              hasPostData?: boolean;
              /**
               * The mixed content type of the request.
               */
              mixedContentType?: Security.MixedContentType;
              /**
               * Priority of the resource request at the time request is sent.
               */
              initialPriority: ResourcePriority;
              /**
               * The referrer policy of the request, as defined in https://www.w3.org/TR/referrer-policy/
               */
              referrerPolicy: "unsafe-url" | "no-referrer-when-downgrade" | "no-referrer" | "origin" | "origin-when-cross-origin" | "same-origin" | "strict-origin" | "strict-origin-when-cross-origin";
              /**
               * Whether is loaded via link preload.
               */
              isLinkPreload?: boolean;
          }
          /**
           * Details of a signed certificate timestamp (SCT).
           */
          interface SignedCertificateTimestamp {
              /**
               * Validation status.
               */
              status: string;
              /**
               * Origin.
               */
              origin: string;
              /**
               * Log name / description.
               */
              logDescription: string;
              /**
               * Log ID.
               */
              logId: string;
              /**
               * Issuance date.
               */
              timestamp: TimeSinceEpoch;
              /**
               * Hash algorithm.
               */
              hashAlgorithm: string;
              /**
               * Signature algorithm.
               */
              signatureAlgorithm: string;
              /**
               * Signature data.
               */
              signatureData: string;
          }
          /**
           * Security details about a request.
           */
          interface SecurityDetails {
              /**
               * Protocol name (e.g. "TLS 1.2" or "QUIC").
               */
              protocol: string;
              /**
               * Key Exchange used by the connection, or the empty string if not applicable.
               */
              keyExchange: string;
              /**
               * (EC)DH group used by the connection, if applicable.
               */
              keyExchangeGroup?: string;
              /**
               * Cipher name.
               */
              cipher: string;
              /**
               * TLS MAC. Note that AEAD ciphers do not have separate MACs.
               */
              mac?: string;
              /**
               * Certificate ID value.
               */
              certificateId: Security.CertificateId;
              /**
               * Certificate subject name.
               */
              subjectName: string;
              /**
               * Subject Alternative Name (SAN) DNS names and IP addresses.
               */
              sanList: string[];
              /**
               * Name of the issuing CA.
               */
              issuer: string;
              /**
               * Certificate valid from date.
               */
              validFrom: TimeSinceEpoch;
              /**
               * Certificate valid to (expiration) date
               */
              validTo: TimeSinceEpoch;
              /**
               * List of signed certificate timestamps (SCTs).
               */
              signedCertificateTimestampList: SignedCertificateTimestamp[];
              /**
               * Whether the request complied with Certificate Transparency policy
               */
              certificateTransparencyCompliance: CertificateTransparencyCompliance;
          }
          /**
           * Whether the request complied with Certificate Transparency policy.
           */
          type CertificateTransparencyCompliance = "unknown" | "not-compliant" | "compliant";
          /**
           * The reason why request was blocked.
           */
          type BlockedReason = "other" | "csp" | "mixed-content" | "origin" | "inspector" | "subresource-filter" | "content-type" | "collapsed-by-client" | "coep-frame-resource-needs-coep-header" | "coop-sandboxed-iframe-cannot-navigate-to-coop-page" | "corp-not-same-origin" | "corp-not-same-origin-after-defaulted-to-same-origin-by-coep" | "corp-not-same-site";
          /**
           * HTTP response data.
           */
          interface Response {
              /**
               * Response URL. This URL can be different from CachedResource.url in case of redirect.
               */
              url: string;
              /**
               * HTTP response status code.
               */
              status: number;
              /**
               * HTTP response status text.
               */
              statusText: string;
              /**
               * HTTP response headers.
               */
              headers: Headers;
              /**
               * HTTP response headers text.
               */
              headersText?: string;
              /**
               * Resource mimeType as determined by the browser.
               */
              mimeType: string;
              /**
               * Refined HTTP request headers that were actually transmitted over the network.
               */
              requestHeaders?: Headers;
              /**
               * HTTP request headers text.
               */
              requestHeadersText?: string;
              /**
               * Specifies whether physical connection was actually reused for this request.
               */
              connectionReused: boolean;
              /**
               * Physical connection id that was actually used for this request.
               */
              connectionId: number;
              /**
               * Remote IP address.
               */
              remoteIPAddress?: string;
              /**
               * Remote port.
               */
              remotePort?: number;
              /**
               * Specifies that the request was served from the disk cache.
               */
              fromDiskCache?: boolean;
              /**
               * Specifies that the request was served from the ServiceWorker.
               */
              fromServiceWorker?: boolean;
              /**
               * Specifies that the request was served from the prefetch cache.
               */
              fromPrefetchCache?: boolean;
              /**
               * Total number of bytes received for this request so far.
               */
              encodedDataLength: number;
              /**
               * Timing information for the given request.
               */
              timing?: ResourceTiming;
              /**
               * Protocol used to fetch this request.
               */
              protocol?: string;
              /**
               * Security state of the request resource.
               */
              securityState: Security.SecurityState;
              /**
               * Security details for the request.
               */
              securityDetails?: SecurityDetails;
          }
          /**
           * WebSocket request data.
           */
          interface WebSocketRequest {
              /**
               * HTTP request headers.
               */
              headers: Headers;
          }
          /**
           * WebSocket response data.
           */
          interface WebSocketResponse {
              /**
               * HTTP response status code.
               */
              status: number;
              /**
               * HTTP response status text.
               */
              statusText: string;
              /**
               * HTTP response headers.
               */
              headers: Headers;
              /**
               * HTTP response headers text.
               */
              headersText?: string;
              /**
               * HTTP request headers.
               */
              requestHeaders?: Headers;
              /**
               * HTTP request headers text.
               */
              requestHeadersText?: string;
          }
          /**
           * WebSocket message data. This represents an entire WebSocket message, not just a fragmented frame as the name suggests.
           */
          interface WebSocketFrame {
              /**
               * WebSocket message opcode.
               */
              opcode: number;
              /**
               * WebSocket message mask.
               */
              mask: boolean;
              /**
               * WebSocket message payload data.
        If the opcode is 1, this is a text message and payloadData is a UTF-8 string.
        If the opcode isn't 1, then payloadData is a base64 encoded string representing binary data.
               */
              payloadData: string;
          }
          /**
           * Information about the cached resource.
           */
          interface CachedResource {
              /**
               * Resource URL. This is the url of the original network request.
               */
              url: string;
              /**
               * Type of this resource.
               */
              type: ResourceType;
              /**
               * Cached response data.
               */
              response?: Response;
              /**
               * Cached response body size.
               */
              bodySize: number;
          }
          /**
           * Information about the request initiator.
           */
          interface Initiator {
              /**
               * Type of this initiator.
               */
              type: "parser" | "script" | "preload" | "SignedExchange" | "other";
              /**
               * Initiator JavaScript stack trace, set for Script only.
               */
              stack?: Runtime.StackTrace;
              /**
               * Initiator URL, set for Parser type or for Script type (when script is importing module) or for SignedExchange type.
               */
              url?: string;
              /**
               * Initiator line number, set for Parser type or for Script type (when script is importing
        module) (0-based).
               */
              lineNumber?: number;
          }
          /**
           * Cookie object
           */
          interface Cookie {
              /**
               * Cookie name.
               */
              name: string;
              /**
               * Cookie value.
               */
              value: string;
              /**
               * Cookie domain.
               */
              domain: string;
              /**
               * Cookie path.
               */
              path: string;
              /**
               * Cookie expiration date as the number of seconds since the UNIX epoch.
               */
              expires: number;
              /**
               * Cookie size.
               */
              size: number;
              /**
               * True if cookie is http-only.
               */
              httpOnly: boolean;
              /**
               * True if cookie is secure.
               */
              secure: boolean;
              /**
               * True in case of session cookie.
               */
              session: boolean;
              /**
               * Cookie SameSite type.
               */
              sameSite?: CookieSameSite;
              /**
               * Cookie Priority
               */
              priority: CookiePriority;
          }
          /**
           * Types of reasons why a cookie may not be stored from a response.
           */
          type SetCookieBlockedReason = "SecureOnly" | "SameSiteStrict" | "SameSiteLax" | "SameSiteUnspecifiedTreatedAsLax" | "SameSiteNoneInsecure" | "UserPreferences" | "SyntaxError" | "SchemeNotSupported" | "OverwriteSecure" | "InvalidDomain" | "InvalidPrefix" | "UnknownError";
          /**
           * Types of reasons why a cookie may not be sent with a request.
           */
          type CookieBlockedReason = "SecureOnly" | "NotOnPath" | "DomainMismatch" | "SameSiteStrict" | "SameSiteLax" | "SameSiteUnspecifiedTreatedAsLax" | "SameSiteNoneInsecure" | "UserPreferences" | "UnknownError";
          /**
           * A cookie which was not stored from a response with the corresponding reason.
           */
          interface BlockedSetCookieWithReason {
              /**
               * The reason(s) this cookie was blocked.
               */
              blockedReasons: SetCookieBlockedReason[];
              /**
               * The string representing this individual cookie as it would appear in the header.
        This is not the entire "cookie" or "set-cookie" header which could have multiple cookies.
               */
              cookieLine: string;
              /**
               * The cookie object which represents the cookie which was not stored. It is optional because
        sometimes complete cookie information is not available, such as in the case of parsing
        errors.
               */
              cookie?: Cookie;
          }
          /**
           * A cookie with was not sent with a request with the corresponding reason.
           */
          interface BlockedCookieWithReason {
              /**
               * The reason(s) the cookie was blocked.
               */
              blockedReasons: CookieBlockedReason[];
              /**
               * The cookie object representing the cookie which was not sent.
               */
              cookie: Cookie;
          }
          /**
           * Cookie parameter object
           */
          interface CookieParam {
              /**
               * Cookie name.
               */
              name: string;
              /**
               * Cookie value.
               */
              value: string;
              /**
               * The request-URI to associate with the setting of the cookie. This value can affect the
        default domain and path values of the created cookie.
               */
              url?: string;
              /**
               * Cookie domain.
               */
              domain?: string;
              /**
               * Cookie path.
               */
              path?: string;
              /**
               * True if cookie is secure.
               */
              secure?: boolean;
              /**
               * True if cookie is http-only.
               */
              httpOnly?: boolean;
              /**
               * Cookie SameSite type.
               */
              sameSite?: CookieSameSite;
              /**
               * Cookie expiration date, session cookie if not set
               */
              expires?: TimeSinceEpoch;
              /**
               * Cookie Priority.
               */
              priority?: CookiePriority;
          }
          /**
           * Authorization challenge for HTTP status code 401 or 407.
           */
          interface AuthChallenge {
              /**
               * Source of the authentication challenge.
               */
              source?: "Server" | "Proxy";
              /**
               * Origin of the challenger.
               */
              origin: string;
              /**
               * The authentication scheme used, such as basic or digest
               */
              scheme: string;
              /**
               * The realm of the challenge. May be empty.
               */
              realm: string;
          }
          /**
           * Response to an AuthChallenge.
           */
          interface AuthChallengeResponse {
              /**
               * The decision on what to do in response to the authorization challenge.  Default means
        deferring to the default behavior of the net stack, which will likely either the Cancel
        authentication or display a popup dialog box.
               */
              response: "Default" | "CancelAuth" | "ProvideCredentials";
              /**
               * The username to provide, possibly empty. Should only be set if response is
        ProvideCredentials.
               */
              username?: string;
              /**
               * The password to provide, possibly empty. Should only be set if response is
        ProvideCredentials.
               */
              password?: string;
          }
          /**
           * Stages of the interception to begin intercepting. Request will intercept before the request is
      sent. Response will intercept after the response is received.
           */
          type InterceptionStage = "Request" | "HeadersReceived";
          /**
           * Request pattern for interception.
           */
          interface RequestPattern {
              /**
               * Wildcards ('*' -> zero or more, '?' -> exactly one) are allowed. Escape character is
        backslash. Omitting is equivalent to "*".
               */
              urlPattern?: string;
              /**
               * If set, only requests for matching resource types will be intercepted.
               */
              resourceType?: ResourceType;
              /**
               * Stage at wich to begin intercepting requests. Default is Request.
               */
              interceptionStage?: InterceptionStage;
          }
          /**
           * Information about a signed exchange signature.
      https://wicg.github.io/webpackage/draft-yasskin-httpbis-origin-signed-exchanges-impl.html#rfc.section.3.1
           */
          interface SignedExchangeSignature {
              /**
               * Signed exchange signature label.
               */
              label: string;
              /**
               * The hex string of signed exchange signature.
               */
              signature: string;
              /**
               * Signed exchange signature integrity.
               */
              integrity: string;
              /**
               * Signed exchange signature cert Url.
               */
              certUrl?: string;
              /**
               * The hex string of signed exchange signature cert sha256.
               */
              certSha256?: string;
              /**
               * Signed exchange signature validity Url.
               */
              validityUrl: string;
              /**
               * Signed exchange signature date.
               */
              date: number;
              /**
               * Signed exchange signature expires.
               */
              expires: number;
              /**
               * The encoded certificates.
               */
              certificates?: string[];
          }
          /**
           * Information about a signed exchange header.
      https://wicg.github.io/webpackage/draft-yasskin-httpbis-origin-signed-exchanges-impl.html#cbor-representation
           */
          interface SignedExchangeHeader {
              /**
               * Signed exchange request URL.
               */
              requestUrl: string;
              /**
               * Signed exchange response code.
               */
              responseCode: number;
              /**
               * Signed exchange response headers.
               */
              responseHeaders: Headers;
              /**
               * Signed exchange response signature.
               */
              signatures: SignedExchangeSignature[];
              /**
               * Signed exchange header integrity hash in the form of "sha256-<base64-hash-value>".
               */
              headerIntegrity: string;
          }
          /**
           * Field type for a signed exchange related error.
           */
          type SignedExchangeErrorField = "signatureSig" | "signatureIntegrity" | "signatureCertUrl" | "signatureCertSha256" | "signatureValidityUrl" | "signatureTimestamps";
          /**
           * Information about a signed exchange response.
           */
          interface SignedExchangeError {
              /**
               * Error message.
               */
              message: string;
              /**
               * The index of the signature which caused the error.
               */
              signatureIndex?: number;
              /**
               * The field which caused the error.
               */
              errorField?: SignedExchangeErrorField;
          }
          /**
           * Information about a signed exchange response.
           */
          interface SignedExchangeInfo {
              /**
               * The outer response of signed HTTP exchange which was received from network.
               */
              outerResponse: Response;
              /**
               * Information about the signed exchange header.
               */
              header?: SignedExchangeHeader;
              /**
               * Security details for the signed exchange header.
               */
              securityDetails?: SecurityDetails;
              /**
               * Errors occurred while handling the signed exchagne.
               */
              errors?: SignedExchangeError[];
          }
          /**
           * Fired when data chunk was received over the network.
           */
          type dataReceivedPayload = {
              /**
               * Request identifier.
               */
              requestId: RequestId;
              /**
               * Timestamp.
               */
              timestamp: MonotonicTime;
              /**
               * Data chunk length.
               */
              dataLength: number;
              /**
               * Actual bytes received (might be less than dataLength for compressed encodings).
               */
              encodedDataLength: number;
          };
          /**
           * Fired when EventSource message is received.
           */
          type eventSourceMessageReceivedPayload = {
              /**
               * Request identifier.
               */
              requestId: RequestId;
              /**
               * Timestamp.
               */
              timestamp: MonotonicTime;
              /**
               * Message type.
               */
              eventName: string;
              /**
               * Message identifier.
               */
              eventId: string;
              /**
               * Message content.
               */
              data: string;
          };
          /**
           * Fired when HTTP request has failed to load.
           */
          type loadingFailedPayload = {
              /**
               * Request identifier.
               */
              requestId: RequestId;
              /**
               * Timestamp.
               */
              timestamp: MonotonicTime;
              /**
               * Resource type.
               */
              type: ResourceType;
              /**
               * User friendly error message.
               */
              errorText: string;
              /**
               * True if loading was canceled.
               */
              canceled?: boolean;
              /**
               * The reason why loading was blocked, if any.
               */
              blockedReason?: BlockedReason;
          };
          /**
           * Fired when HTTP request has finished loading.
           */
          type loadingFinishedPayload = {
              /**
               * Request identifier.
               */
              requestId: RequestId;
              /**
               * Timestamp.
               */
              timestamp: MonotonicTime;
              /**
               * Total number of bytes received for this request.
               */
              encodedDataLength: number;
              /**
               * Set when 1) response was blocked by Cross-Origin Read Blocking and also
        2) this needs to be reported to the DevTools console.
               */
              shouldReportCorbBlocking?: boolean;
          };
          /**
           * Details of an intercepted HTTP request, which must be either allowed, blocked, modified or
      mocked.
      Deprecated, use Fetch.requestPaused instead.
           */
          type requestInterceptedPayload = {
              /**
               * Each request the page makes will have a unique id, however if any redirects are encountered
        while processing that fetch, they will be reported with the same id as the original fetch.
        Likewise if HTTP authentication is needed then the same fetch id will be used.
               */
              interceptionId: InterceptionId;
              request: Request;
              /**
               * The id of the frame that initiated the request.
               */
              frameId: Page.FrameId;
              /**
               * How the requested resource will be used.
               */
              resourceType: ResourceType;
              /**
               * Whether this is a navigation request, which can abort the navigation completely.
               */
              isNavigationRequest: boolean;
              /**
               * Set if the request is a navigation that will result in a download.
        Only present after response is received from the server (i.e. HeadersReceived stage).
               */
              isDownload?: boolean;
              /**
               * Redirect location, only sent if a redirect was intercepted.
               */
              redirectUrl?: string;
              /**
               * Details of the Authorization Challenge encountered. If this is set then
        continueInterceptedRequest must contain an authChallengeResponse.
               */
              authChallenge?: AuthChallenge;
              /**
               * Response error if intercepted at response stage or if redirect occurred while intercepting
        request.
               */
              responseErrorReason?: ErrorReason;
              /**
               * Response code if intercepted at response stage or if redirect occurred while intercepting
        request or auth retry occurred.
               */
              responseStatusCode?: number;
              /**
               * Response headers if intercepted at the response stage or if redirect occurred while
        intercepting request or auth retry occurred.
               */
              responseHeaders?: Headers;
              /**
               * If the intercepted request had a corresponding requestWillBeSent event fired for it, then
        this requestId will be the same as the requestId present in the requestWillBeSent event.
               */
              requestId?: RequestId;
          };
          /**
           * Fired if request ended up loading from cache.
           */
          type requestServedFromCachePayload = {
              /**
               * Request identifier.
               */
              requestId: RequestId;
          };
          /**
           * Fired when page is about to send HTTP request.
           */
          type requestWillBeSentPayload = {
              /**
               * Request identifier.
               */
              requestId: RequestId;
              /**
               * Loader identifier. Empty string if the request is fetched from worker.
               */
              loaderId: LoaderId;
              /**
               * URL of the document this request is loaded for.
               */
              documentURL: string;
              /**
               * Request data.
               */
              request: Request;
              /**
               * Timestamp.
               */
              timestamp: MonotonicTime;
              /**
               * Timestamp.
               */
              wallTime: TimeSinceEpoch;
              /**
               * Request initiator.
               */
              initiator: Initiator;
              /**
               * Redirect response data.
               */
              redirectResponse?: Response;
              /**
               * Type of this resource.
               */
              type?: ResourceType;
              /**
               * Frame identifier.
               */
              frameId?: Page.FrameId;
              /**
               * Whether the request is initiated by a user gesture. Defaults to false.
               */
              hasUserGesture?: boolean;
          };
          /**
           * Fired when resource loading priority is changed
           */
          type resourceChangedPriorityPayload = {
              /**
               * Request identifier.
               */
              requestId: RequestId;
              /**
               * New priority
               */
              newPriority: ResourcePriority;
              /**
               * Timestamp.
               */
              timestamp: MonotonicTime;
          };
          /**
           * Fired when a signed exchange was received over the network
           */
          type signedExchangeReceivedPayload = {
              /**
               * Request identifier.
               */
              requestId: RequestId;
              /**
               * Information about the signed exchange response.
               */
              info: SignedExchangeInfo;
          };
          /**
           * Fired when HTTP response is available.
           */
          type responseReceivedPayload = {
              /**
               * Request identifier.
               */
              requestId: RequestId;
              /**
               * Loader identifier. Empty string if the request is fetched from worker.
               */
              loaderId: LoaderId;
              /**
               * Timestamp.
               */
              timestamp: MonotonicTime;
              /**
               * Resource type.
               */
              type: ResourceType;
              /**
               * Response data.
               */
              response: Response;
              /**
               * Frame identifier.
               */
              frameId?: Page.FrameId;
          };
          /**
           * Fired when WebSocket is closed.
           */
          type webSocketClosedPayload = {
              /**
               * Request identifier.
               */
              requestId: RequestId;
              /**
               * Timestamp.
               */
              timestamp: MonotonicTime;
          };
          /**
           * Fired upon WebSocket creation.
           */
          type webSocketCreatedPayload = {
              /**
               * Request identifier.
               */
              requestId: RequestId;
              /**
               * WebSocket request URL.
               */
              url: string;
              /**
               * Request initiator.
               */
              initiator?: Initiator;
          };
          /**
           * Fired when WebSocket message error occurs.
           */
          type webSocketFrameErrorPayload = {
              /**
               * Request identifier.
               */
              requestId: RequestId;
              /**
               * Timestamp.
               */
              timestamp: MonotonicTime;
              /**
               * WebSocket error message.
               */
              errorMessage: string;
          };
          /**
           * Fired when WebSocket message is received.
           */
          type webSocketFrameReceivedPayload = {
              /**
               * Request identifier.
               */
              requestId: RequestId;
              /**
               * Timestamp.
               */
              timestamp: MonotonicTime;
              /**
               * WebSocket response data.
               */
              response: WebSocketFrame;
          };
          /**
           * Fired when WebSocket message is sent.
           */
          type webSocketFrameSentPayload = {
              /**
               * Request identifier.
               */
              requestId: RequestId;
              /**
               * Timestamp.
               */
              timestamp: MonotonicTime;
              /**
               * WebSocket response data.
               */
              response: WebSocketFrame;
          };
          /**
           * Fired when WebSocket handshake response becomes available.
           */
          type webSocketHandshakeResponseReceivedPayload = {
              /**
               * Request identifier.
               */
              requestId: RequestId;
              /**
               * Timestamp.
               */
              timestamp: MonotonicTime;
              /**
               * WebSocket response data.
               */
              response: WebSocketResponse;
          };
          /**
           * Fired when WebSocket is about to initiate handshake.
           */
          type webSocketWillSendHandshakeRequestPayload = {
              /**
               * Request identifier.
               */
              requestId: RequestId;
              /**
               * Timestamp.
               */
              timestamp: MonotonicTime;
              /**
               * UTC Timestamp.
               */
              wallTime: TimeSinceEpoch;
              /**
               * WebSocket request data.
               */
              request: WebSocketRequest;
          };
          /**
           * Fired when additional information about a requestWillBeSent event is available from the
      network stack. Not every requestWillBeSent event will have an additional
      requestWillBeSentExtraInfo fired for it, and there is no guarantee whether requestWillBeSent
      or requestWillBeSentExtraInfo will be fired first for the same request.
           */
          type requestWillBeSentExtraInfoPayload = {
              /**
               * Request identifier. Used to match this information to an existing requestWillBeSent event.
               */
              requestId: RequestId;
              /**
               * A list of cookies which will not be sent with this request along with corresponding reasons
        for blocking.
               */
              blockedCookies: BlockedCookieWithReason[];
              /**
               * Raw request headers as they will be sent over the wire.
               */
              headers: Headers;
          };
          /**
           * Fired when additional information about a responseReceived event is available from the network
      stack. Not every responseReceived event will have an additional responseReceivedExtraInfo for
      it, and responseReceivedExtraInfo may be fired before or after responseReceived.
           */
          type responseReceivedExtraInfoPayload = {
              /**
               * Request identifier. Used to match this information to another responseReceived event.
               */
              requestId: RequestId;
              /**
               * A list of cookies which were not stored from the response along with the corresponding
        reasons for blocking. The cookies here may not be valid due to syntax errors, which
        are represented by the invalid cookie line string instead of a proper cookie.
               */
              blockedCookies: BlockedSetCookieWithReason[];
              /**
               * Raw response headers as they were received over the wire.
               */
              headers: Headers;
              /**
               * Raw response header text as it was received over the wire. The raw text may not always be
        available, such as in the case of HTTP/2 or QUIC.
               */
              headersText?: string;
          };
          /**
           * Tells whether clearing browser cache is supported.
           */
          type canClearBrowserCacheParameters = {};
          type canClearBrowserCacheReturnValue = {
              /**
               * True if browser cache can be cleared.
               */
              result: boolean;
          };
          /**
           * Tells whether clearing browser cookies is supported.
           */
          type canClearBrowserCookiesParameters = {};
          type canClearBrowserCookiesReturnValue = {
              /**
               * True if browser cookies can be cleared.
               */
              result: boolean;
          };
          /**
           * Tells whether emulation of network conditions is supported.
           */
          type canEmulateNetworkConditionsParameters = {};
          type canEmulateNetworkConditionsReturnValue = {
              /**
               * True if emulation of network conditions is supported.
               */
              result: boolean;
          };
          /**
           * Clears browser cache.
           */
          type clearBrowserCacheParameters = {};
          type clearBrowserCacheReturnValue = {};
          /**
           * Clears browser cookies.
           */
          type clearBrowserCookiesParameters = {};
          type clearBrowserCookiesReturnValue = {};
          /**
           * Response to Network.requestIntercepted which either modifies the request to continue with any
      modifications, or blocks it, or completes it with the provided response bytes. If a network
      fetch occurs as a result which encounters a redirect an additional Network.requestIntercepted
      event will be sent with the same InterceptionId.
      Deprecated, use Fetch.continueRequest, Fetch.fulfillRequest and Fetch.failRequest instead.
           */
          type continueInterceptedRequestParameters = {
              interceptionId: InterceptionId;
              /**
               * If set this causes the request to fail with the given reason. Passing `Aborted` for requests
        marked with `isNavigationRequest` also cancels the navigation. Must not be set in response
        to an authChallenge.
               */
              errorReason?: ErrorReason;
              /**
               * If set the requests completes using with the provided base64 encoded raw response, including
        HTTP status line and headers etc... Must not be set in response to an authChallenge.
               */
              rawResponse?: binary;
              /**
               * If set the request url will be modified in a way that's not observable by page. Must not be
        set in response to an authChallenge.
               */
              url?: string;
              /**
               * If set this allows the request method to be overridden. Must not be set in response to an
        authChallenge.
               */
              method?: string;
              /**
               * If set this allows postData to be set. Must not be set in response to an authChallenge.
               */
              postData?: string;
              /**
               * If set this allows the request headers to be changed. Must not be set in response to an
        authChallenge.
               */
              headers?: Headers;
              /**
               * Response to a requestIntercepted with an authChallenge. Must not be set otherwise.
               */
              authChallengeResponse?: AuthChallengeResponse;
          };
          type continueInterceptedRequestReturnValue = {};
          /**
           * Deletes browser cookies with matching name and url or domain/path pair.
           */
          type deleteCookiesParameters = {
              /**
               * Name of the cookies to remove.
               */
              name: string;
              /**
               * If specified, deletes all the cookies with the given name where domain and path match
        provided URL.
               */
              url?: string;
              /**
               * If specified, deletes only cookies with the exact domain.
               */
              domain?: string;
              /**
               * If specified, deletes only cookies with the exact path.
               */
              path?: string;
          };
          type deleteCookiesReturnValue = {};
          /**
           * Disables network tracking, prevents network events from being sent to the client.
           */
          type disableParameters = {};
          type disableReturnValue = {};
          /**
           * Activates emulation of network conditions.
           */
          type emulateNetworkConditionsParameters = {
              /**
               * True to emulate internet disconnection.
               */
              offline: boolean;
              /**
               * Minimum latency from request sent to response headers received (ms).
               */
              latency: number;
              /**
               * Maximal aggregated download throughput (bytes/sec). -1 disables download throttling.
               */
              downloadThroughput: number;
              /**
               * Maximal aggregated upload throughput (bytes/sec).  -1 disables upload throttling.
               */
              uploadThroughput: number;
              /**
               * Connection type if known.
               */
              connectionType?: ConnectionType;
          };
          type emulateNetworkConditionsReturnValue = {};
          /**
           * Enables network tracking, network events will now be delivered to the client.
           */
          type enableParameters = {
              /**
               * Buffer size in bytes to use when preserving network payloads (XHRs, etc).
               */
              maxTotalBufferSize?: number;
              /**
               * Per-resource buffer size in bytes to use when preserving network payloads (XHRs, etc).
               */
              maxResourceBufferSize?: number;
              /**
               * Longest post body size (in bytes) that would be included in requestWillBeSent notification
               */
              maxPostDataSize?: number;
          };
          type enableReturnValue = {};
          /**
           * Returns all browser cookies. Depending on the backend support, will return detailed cookie
      information in the `cookies` field.
           */
          type getAllCookiesParameters = {};
          type getAllCookiesReturnValue = {
              /**
               * Array of cookie objects.
               */
              cookies: Cookie[];
          };
          /**
           * Returns the DER-encoded certificate.
           */
          type getCertificateParameters = {
              /**
               * Origin to get certificate for.
               */
              origin: string;
          };
          type getCertificateReturnValue = {
              tableNames: string[];
          };
          /**
           * Returns all browser cookies for the current URL. Depending on the backend support, will return
      detailed cookie information in the `cookies` field.
           */
          type getCookiesParameters = {
              /**
               * The list of URLs for which applicable cookies will be fetched
               */
              urls?: string[];
          };
          type getCookiesReturnValue = {
              /**
               * Array of cookie objects.
               */
              cookies: Cookie[];
          };
          /**
           * Returns content served for the given request.
           */
          type getResponseBodyParameters = {
              /**
               * Identifier of the network request to get content for.
               */
              requestId: RequestId;
          };
          type getResponseBodyReturnValue = {
              /**
               * Response body.
               */
              body: string;
              /**
               * True, if content was sent as base64.
               */
              base64Encoded: boolean;
          };
          /**
           * Returns post data sent with the request. Returns an error when no data was sent with the request.
           */
          type getRequestPostDataParameters = {
              /**
               * Identifier of the network request to get content for.
               */
              requestId: RequestId;
          };
          type getRequestPostDataReturnValue = {
              /**
               * Request body string, omitting files from multipart requests
               */
              postData: string;
          };
          /**
           * Returns content served for the given currently intercepted request.
           */
          type getResponseBodyForInterceptionParameters = {
              /**
               * Identifier for the intercepted request to get body for.
               */
              interceptionId: InterceptionId;
          };
          type getResponseBodyForInterceptionReturnValue = {
              /**
               * Response body.
               */
              body: string;
              /**
               * True, if content was sent as base64.
               */
              base64Encoded: boolean;
          };
          /**
           * Returns a handle to the stream representing the response body. Note that after this command,
      the intercepted request can't be continued as is -- you either need to cancel it or to provide
      the response body. The stream only supports sequential read, IO.read will fail if the position
      is specified.
           */
          type takeResponseBodyForInterceptionAsStreamParameters = {
              interceptionId: InterceptionId;
          };
          type takeResponseBodyForInterceptionAsStreamReturnValue = {
              stream: IO.StreamHandle;
          };
          /**
           * This method sends a new XMLHttpRequest which is identical to the original one. The following
      parameters should be identical: method, url, async, request body, extra headers, withCredentials
      attribute, user, password.
           */
          type replayXHRParameters = {
              /**
               * Identifier of XHR to replay.
               */
              requestId: RequestId;
          };
          type replayXHRReturnValue = {};
          /**
           * Searches for given string in response content.
           */
          type searchInResponseBodyParameters = {
              /**
               * Identifier of the network response to search.
               */
              requestId: RequestId;
              /**
               * String to search for.
               */
              query: string;
              /**
               * If true, search is case sensitive.
               */
              caseSensitive?: boolean;
              /**
               * If true, treats string parameter as regex.
               */
              isRegex?: boolean;
          };
          type searchInResponseBodyReturnValue = {
              /**
               * List of search matches.
               */
              result: Debugger.SearchMatch[];
          };
          /**
           * Blocks URLs from loading.
           */
          type setBlockedURLsParameters = {
              /**
               * URL patterns to block. Wildcards ('*') are allowed.
               */
              urls: string[];
          };
          type setBlockedURLsReturnValue = {};
          /**
           * Toggles ignoring of service worker for each request.
           */
          type setBypassServiceWorkerParameters = {
              /**
               * Bypass service worker and load from network.
               */
              bypass: boolean;
          };
          type setBypassServiceWorkerReturnValue = {};
          /**
           * Toggles ignoring cache for each request. If `true`, cache will not be used.
           */
          type setCacheDisabledParameters = {
              /**
               * Cache disabled state.
               */
              cacheDisabled: boolean;
          };
          type setCacheDisabledReturnValue = {};
          /**
           * Sets a cookie with the given cookie data; may overwrite equivalent cookies if they exist.
           */
          type setCookieParameters = {
              /**
               * Cookie name.
               */
              name: string;
              /**
               * Cookie value.
               */
              value: string;
              /**
               * The request-URI to associate with the setting of the cookie. This value can affect the
        default domain and path values of the created cookie.
               */
              url?: string;
              /**
               * Cookie domain.
               */
              domain?: string;
              /**
               * Cookie path.
               */
              path?: string;
              /**
               * True if cookie is secure.
               */
              secure?: boolean;
              /**
               * True if cookie is http-only.
               */
              httpOnly?: boolean;
              /**
               * Cookie SameSite type.
               */
              sameSite?: CookieSameSite;
              /**
               * Cookie expiration date, session cookie if not set
               */
              expires?: TimeSinceEpoch;
              /**
               * Cookie Priority type.
               */
              priority?: CookiePriority;
          };
          type setCookieReturnValue = {
              /**
               * True if successfully set cookie.
               */
              success: boolean;
          };
          /**
           * Sets given cookies.
           */
          type setCookiesParameters = {
              /**
               * Cookies to be set.
               */
              cookies: CookieParam[];
          };
          type setCookiesReturnValue = {};
          /**
           * For testing.
           */
          type setDataSizeLimitsForTestParameters = {
              /**
               * Maximum total buffer size.
               */
              maxTotalSize: number;
              /**
               * Maximum per-resource size.
               */
              maxResourceSize: number;
          };
          type setDataSizeLimitsForTestReturnValue = {};
          /**
           * Specifies whether to always send extra HTTP headers with the requests from this page.
           */
          type setExtraHTTPHeadersParameters = {
              /**
               * Map with extra HTTP headers.
               */
              headers: Headers;
          };
          type setExtraHTTPHeadersReturnValue = {};
          /**
           * Sets the requests to intercept that match the provided patterns and optionally resource types.
      Deprecated, please use Fetch.enable instead.
           */
          type setRequestInterceptionParameters = {
              /**
               * Requests matching any of these patterns will be forwarded and wait for the corresponding
        continueInterceptedRequest call.
               */
              patterns: RequestPattern[];
          };
          type setRequestInterceptionReturnValue = {};
          /**
           * Allows overriding user agent with the given string.
           */
          type setUserAgentOverrideParameters = {
              /**
               * User agent to use.
               */
              userAgent: string;
              /**
               * Browser langugage to emulate.
               */
              acceptLanguage?: string;
              /**
               * The platform navigator.platform should return.
               */
              platform?: string;
          };
          type setUserAgentOverrideReturnValue = {};
      }
      /**
       * This domain provides various functionality related to drawing atop the inspected page.
       */
      module Overlay {
          /**
           * Configuration data for the highlighting of page elements.
           */
          interface HighlightConfig {
              /**
               * Whether the node info tooltip should be shown (default: false).
               */
              showInfo?: boolean;
              /**
               * Whether the node styles in the tooltip (default: false).
               */
              showStyles?: boolean;
              /**
               * Whether the rulers should be shown (default: false).
               */
              showRulers?: boolean;
              /**
               * Whether the extension lines from node to the rulers should be shown (default: false).
               */
              showExtensionLines?: boolean;
              /**
               * The content box highlight fill color (default: transparent).
               */
              contentColor?: DOM.RGBA;
              /**
               * The padding highlight fill color (default: transparent).
               */
              paddingColor?: DOM.RGBA;
              /**
               * The border highlight fill color (default: transparent).
               */
              borderColor?: DOM.RGBA;
              /**
               * The margin highlight fill color (default: transparent).
               */
              marginColor?: DOM.RGBA;
              /**
               * The event target element highlight fill color (default: transparent).
               */
              eventTargetColor?: DOM.RGBA;
              /**
               * The shape outside fill color (default: transparent).
               */
              shapeColor?: DOM.RGBA;
              /**
               * The shape margin fill color (default: transparent).
               */
              shapeMarginColor?: DOM.RGBA;
              /**
               * The grid layout color (default: transparent).
               */
              cssGridColor?: DOM.RGBA;
          }
          type InspectMode = "searchForNode" | "searchForUAShadowDOM" | "captureAreaScreenshot" | "showDistances" | "none";
          /**
           * Fired when the node should be inspected. This happens after call to `setInspectMode` or when
      user manually inspects an element.
           */
          type inspectNodeRequestedPayload = {
              /**
               * Id of the node to inspect.
               */
              backendNodeId: DOM.BackendNodeId;
          };
          /**
           * Fired when the node should be highlighted. This happens after call to `setInspectMode`.
           */
          type nodeHighlightRequestedPayload = {
              nodeId: DOM.NodeId;
          };
          /**
           * Fired when user asks to capture screenshot of some area on the page.
           */
          type screenshotRequestedPayload = {
              /**
               * Viewport to capture, in device independent pixels (dip).
               */
              viewport: Page.Viewport;
          };
          /**
           * Fired when user cancels the inspect mode.
           */
          type inspectModeCanceledPayload = void;
          /**
           * Disables domain notifications.
           */
          type disableParameters = {};
          type disableReturnValue = {};
          /**
           * Enables domain notifications.
           */
          type enableParameters = {};
          type enableReturnValue = {};
          /**
           * For testing.
           */
          type getHighlightObjectForTestParameters = {
              /**
               * Id of the node to get highlight object for.
               */
              nodeId: DOM.NodeId;
              /**
               * Whether to include distance info.
               */
              includeDistance?: boolean;
              /**
               * Whether to include style info.
               */
              includeStyle?: boolean;
          };
          type getHighlightObjectForTestReturnValue = {
              /**
               * Highlight data for the node.
               */
              highlight: {
                  [key: string]: string;
              };
          };
          /**
           * Hides any highlight.
           */
          type hideHighlightParameters = {};
          type hideHighlightReturnValue = {};
          /**
           * Highlights owner element of the frame with given id.
           */
          type highlightFrameParameters = {
              /**
               * Identifier of the frame to highlight.
               */
              frameId: Page.FrameId;
              /**
               * The content box highlight fill color (default: transparent).
               */
              contentColor?: DOM.RGBA;
              /**
               * The content box highlight outline color (default: transparent).
               */
              contentOutlineColor?: DOM.RGBA;
          };
          type highlightFrameReturnValue = {};
          /**
           * Highlights DOM node with given id or with the given JavaScript object wrapper. Either nodeId or
      objectId must be specified.
           */
          type highlightNodeParameters = {
              /**
               * A descriptor for the highlight appearance.
               */
              highlightConfig: HighlightConfig;
              /**
               * Identifier of the node to highlight.
               */
              nodeId?: DOM.NodeId;
              /**
               * Identifier of the backend node to highlight.
               */
              backendNodeId?: DOM.BackendNodeId;
              /**
               * JavaScript object id of the node to be highlighted.
               */
              objectId?: Runtime.RemoteObjectId;
              /**
               * Selectors to highlight relevant nodes.
               */
              selector?: string;
          };
          type highlightNodeReturnValue = {};
          /**
           * Highlights given quad. Coordinates are absolute with respect to the main frame viewport.
           */
          type highlightQuadParameters = {
              /**
               * Quad to highlight
               */
              quad: DOM.Quad;
              /**
               * The highlight fill color (default: transparent).
               */
              color?: DOM.RGBA;
              /**
               * The highlight outline color (default: transparent).
               */
              outlineColor?: DOM.RGBA;
          };
          type highlightQuadReturnValue = {};
          /**
           * Highlights given rectangle. Coordinates are absolute with respect to the main frame viewport.
           */
          type highlightRectParameters = {
              /**
               * X coordinate
               */
              x: number;
              /**
               * Y coordinate
               */
              y: number;
              /**
               * Rectangle width
               */
              width: number;
              /**
               * Rectangle height
               */
              height: number;
              /**
               * The highlight fill color (default: transparent).
               */
              color?: DOM.RGBA;
              /**
               * The highlight outline color (default: transparent).
               */
              outlineColor?: DOM.RGBA;
          };
          type highlightRectReturnValue = {};
          /**
           * Enters the 'inspect' mode. In this mode, elements that user is hovering over are highlighted.
      Backend then generates 'inspectNodeRequested' event upon element selection.
           */
          type setInspectModeParameters = {
              /**
               * Set an inspection mode.
               */
              mode: InspectMode;
              /**
               * A descriptor for the highlight appearance of hovered-over nodes. May be omitted if `enabled
        == false`.
               */
              highlightConfig?: HighlightConfig;
          };
          type setInspectModeReturnValue = {};
          /**
           * Highlights owner element of all frames detected to be ads.
           */
          type setShowAdHighlightsParameters = {
              /**
               * True for showing ad highlights
               */
              show: boolean;
          };
          type setShowAdHighlightsReturnValue = {};
          type setPausedInDebuggerMessageParameters = {
              /**
               * The message to display, also triggers resume and step over controls.
               */
              message?: string;
          };
          type setPausedInDebuggerMessageReturnValue = {};
          /**
           * Requests that backend shows debug borders on layers
           */
          type setShowDebugBordersParameters = {
              /**
               * True for showing debug borders
               */
              show: boolean;
          };
          type setShowDebugBordersReturnValue = {};
          /**
           * Requests that backend shows the FPS counter
           */
          type setShowFPSCounterParameters = {
              /**
               * True for showing the FPS counter
               */
              show: boolean;
          };
          type setShowFPSCounterReturnValue = {};
          /**
           * Requests that backend shows paint rectangles
           */
          type setShowPaintRectsParameters = {
              /**
               * True for showing paint rectangles
               */
              result: boolean;
          };
          type setShowPaintRectsReturnValue = {};
          /**
           * Requests that backend shows layout shift regions
           */
          type setShowLayoutShiftRegionsParameters = {
              /**
               * True for showing layout shift regions
               */
              result: boolean;
          };
          type setShowLayoutShiftRegionsReturnValue = {};
          /**
           * Requests that backend shows scroll bottleneck rects
           */
          type setShowScrollBottleneckRectsParameters = {
              /**
               * True for showing scroll bottleneck rects
               */
              show: boolean;
          };
          type setShowScrollBottleneckRectsReturnValue = {};
          /**
           * Requests that backend shows hit-test borders on layers
           */
          type setShowHitTestBordersParameters = {
              /**
               * True for showing hit-test borders
               */
              show: boolean;
          };
          type setShowHitTestBordersReturnValue = {};
          /**
           * Paints viewport size upon main frame resize.
           */
          type setShowViewportSizeOnResizeParameters = {
              /**
               * Whether to paint size or not.
               */
              show: boolean;
          };
          type setShowViewportSizeOnResizeReturnValue = {};
      }
      /**
       * Actions and events related to the inspected page belong to the page domain.
       */
      module Page {
          /**
           * Unique frame identifier.
           */
          type FrameId = string;
          /**
           * Information about the Frame on the page.
           */
          interface Frame {
              /**
               * Frame unique identifier.
               */
              id: FrameId;
              /**
               * Parent frame identifier.
               */
              parentId?: string;
              /**
               * Identifier of the loader associated with this frame.
               */
              loaderId: Network.LoaderId;
              /**
               * Frame's name as specified in the tag.
               */
              name?: string;
              /**
               * Frame document's URL without fragment.
               */
              url: string;
              /**
               * Frame document's URL fragment including the '#'.
               */
              urlFragment?: string;
              /**
               * Frame document's security origin.
               */
              securityOrigin: string;
              /**
               * Frame document's mimeType as determined by the browser.
               */
              mimeType: string;
              /**
               * If the frame failed to load, this contains the URL that could not be loaded. Note that unlike url above, this URL may contain a fragment.
               */
              unreachableUrl?: string;
          }
          /**
           * Information about the Resource on the page.
           */
          interface FrameResource {
              /**
               * Resource URL.
               */
              url: string;
              /**
               * Type of this resource.
               */
              type: Network.ResourceType;
              /**
               * Resource mimeType as determined by the browser.
               */
              mimeType: string;
              /**
               * last-modified timestamp as reported by server.
               */
              lastModified?: Network.TimeSinceEpoch;
              /**
               * Resource content size.
               */
              contentSize?: number;
              /**
               * True if the resource failed to load.
               */
              failed?: boolean;
              /**
               * True if the resource was canceled during loading.
               */
              canceled?: boolean;
          }
          /**
           * Information about the Frame hierarchy along with their cached resources.
           */
          interface FrameResourceTree {
              /**
               * Frame information for this tree item.
               */
              frame: Frame;
              /**
               * Child frames.
               */
              childFrames?: FrameResourceTree[];
              /**
               * Information about frame resources.
               */
              resources: FrameResource[];
          }
          /**
           * Information about the Frame hierarchy.
           */
          interface FrameTree {
              /**
               * Frame information for this tree item.
               */
              frame: Frame;
              /**
               * Child frames.
               */
              childFrames?: FrameTree[];
          }
          /**
           * Unique script identifier.
           */
          type ScriptIdentifier = string;
          /**
           * Transition type.
           */
          type TransitionType = "link" | "typed" | "address_bar" | "auto_bookmark" | "auto_subframe" | "manual_subframe" | "generated" | "auto_toplevel" | "form_submit" | "reload" | "keyword" | "keyword_generated" | "other";
          /**
           * Navigation history entry.
           */
          interface NavigationEntry {
              /**
               * Unique id of the navigation history entry.
               */
              id: number;
              /**
               * URL of the navigation history entry.
               */
              url: string;
              /**
               * URL that the user typed in the url bar.
               */
              userTypedURL: string;
              /**
               * Title of the navigation history entry.
               */
              title: string;
              /**
               * Transition type.
               */
              transitionType: TransitionType;
          }
          /**
           * Screencast frame metadata.
           */
          interface ScreencastFrameMetadata {
              /**
               * Top offset in DIP.
               */
              offsetTop: number;
              /**
               * Page scale factor.
               */
              pageScaleFactor: number;
              /**
               * Device screen width in DIP.
               */
              deviceWidth: number;
              /**
               * Device screen height in DIP.
               */
              deviceHeight: number;
              /**
               * Position of horizontal scroll in CSS pixels.
               */
              scrollOffsetX: number;
              /**
               * Position of vertical scroll in CSS pixels.
               */
              scrollOffsetY: number;
              /**
               * Frame swap timestamp.
               */
              timestamp?: Network.TimeSinceEpoch;
          }
          /**
           * Javascript dialog type.
           */
          type DialogType = "alert" | "confirm" | "prompt" | "beforeunload";
          /**
           * Error while paring app manifest.
           */
          interface AppManifestError {
              /**
               * Error message.
               */
              message: string;
              /**
               * If criticial, this is a non-recoverable parse error.
               */
              critical: number;
              /**
               * Error line.
               */
              line: number;
              /**
               * Error column.
               */
              column: number;
          }
          /**
           * Parsed app manifest properties.
           */
          interface AppManifestParsedProperties {
              /**
               * Computed scope value
               */
              scope: string;
          }
          /**
           * Layout viewport position and dimensions.
           */
          interface LayoutViewport {
              /**
               * Horizontal offset relative to the document (CSS pixels).
               */
              pageX: number;
              /**
               * Vertical offset relative to the document (CSS pixels).
               */
              pageY: number;
              /**
               * Width (CSS pixels), excludes scrollbar if present.
               */
              clientWidth: number;
              /**
               * Height (CSS pixels), excludes scrollbar if present.
               */
              clientHeight: number;
          }
          /**
           * Visual viewport position, dimensions, and scale.
           */
          interface VisualViewport {
              /**
               * Horizontal offset relative to the layout viewport (CSS pixels).
               */
              offsetX: number;
              /**
               * Vertical offset relative to the layout viewport (CSS pixels).
               */
              offsetY: number;
              /**
               * Horizontal offset relative to the document (CSS pixels).
               */
              pageX: number;
              /**
               * Vertical offset relative to the document (CSS pixels).
               */
              pageY: number;
              /**
               * Width (CSS pixels), excludes scrollbar if present.
               */
              clientWidth: number;
              /**
               * Height (CSS pixels), excludes scrollbar if present.
               */
              clientHeight: number;
              /**
               * Scale relative to the ideal viewport (size at width=device-width).
               */
              scale: number;
              /**
               * Page zoom factor (CSS to device independent pixels ratio).
               */
              zoom?: number;
          }
          /**
           * Viewport for capturing screenshot.
           */
          interface Viewport {
              /**
               * X offset in device independent pixels (dip).
               */
              x: number;
              /**
               * Y offset in device independent pixels (dip).
               */
              y: number;
              /**
               * Rectangle width in device independent pixels (dip).
               */
              width: number;
              /**
               * Rectangle height in device independent pixels (dip).
               */
              height: number;
              /**
               * Page scale factor.
               */
              scale: number;
          }
          /**
           * Generic font families collection.
           */
          interface FontFamilies {
              /**
               * The standard font-family.
               */
              standard?: string;
              /**
               * The fixed font-family.
               */
              fixed?: string;
              /**
               * The serif font-family.
               */
              serif?: string;
              /**
               * The sansSerif font-family.
               */
              sansSerif?: string;
              /**
               * The cursive font-family.
               */
              cursive?: string;
              /**
               * The fantasy font-family.
               */
              fantasy?: string;
              /**
               * The pictograph font-family.
               */
              pictograph?: string;
          }
          /**
           * Default font sizes.
           */
          interface FontSizes {
              /**
               * Default standard font size.
               */
              standard?: number;
              /**
               * Default fixed font size.
               */
              fixed?: number;
          }
          type ClientNavigationReason = "formSubmissionGet" | "formSubmissionPost" | "httpHeaderRefresh" | "scriptInitiated" | "metaTagRefresh" | "pageBlockInterstitial" | "reload" | "anchorClick";
          interface InstallabilityErrorArgument {
              /**
               * Argument name (e.g. name:'minimum-icon-size-in-pixels').
               */
              name: string;
              /**
               * Argument value (e.g. value:'64').
               */
              value: string;
          }
          /**
           * The installability error
           */
          interface InstallabilityError {
              /**
               * The error id (e.g. 'manifest-missing-suitable-icon').
               */
              errorId: string;
              /**
               * The list of error arguments (e.g. {name:'minimum-icon-size-in-pixels', value:'64'}).
               */
              errorArguments: InstallabilityErrorArgument[];
          }
          /**
           * The referring-policy used for the navigation.
           */
          type ReferrerPolicy = "noReferrer" | "noReferrerWhenDowngrade" | "origin" | "originWhenCrossOrigin" | "sameOrigin" | "strictOrigin" | "strictOriginWhenCrossOrigin" | "unsafeUrl";
          type domContentEventFiredPayload = {
              timestamp: Network.MonotonicTime;
          };
          /**
           * Emitted only when `page.interceptFileChooser` is enabled.
           */
          type fileChooserOpenedPayload = {
              /**
               * Id of the frame containing input node.
               */
              frameId: FrameId;
              /**
               * Input node id.
               */
              backendNodeId: DOM.BackendNodeId;
              /**
               * Input mode.
               */
              mode: "selectSingle" | "selectMultiple";
          };
          /**
           * Fired when frame has been attached to its parent.
           */
          type frameAttachedPayload = {
              /**
               * Id of the frame that has been attached.
               */
              frameId: FrameId;
              /**
               * Parent frame identifier.
               */
              parentFrameId: FrameId;
              /**
               * JavaScript stack trace of when frame was attached, only set if frame initiated from script.
               */
              stack?: Runtime.StackTrace;
          };
          /**
           * Fired when frame no longer has a scheduled navigation.
           */
          type frameClearedScheduledNavigationPayload = {
              /**
               * Id of the frame that has cleared its scheduled navigation.
               */
              frameId: FrameId;
          };
          /**
           * Fired when frame has been detached from its parent.
           */
          type frameDetachedPayload = {
              /**
               * Id of the frame that has been detached.
               */
              frameId: FrameId;
          };
          /**
           * Fired once navigation of the frame has completed. Frame is now associated with the new loader.
           */
          type frameNavigatedPayload = {
              /**
               * Frame object.
               */
              frame: Frame;
          };
          type frameResizedPayload = void;
          /**
           * Fired when a renderer-initiated navigation is requested.
      Navigation may still be cancelled after the event is issued.
           */
          type frameRequestedNavigationPayload = {
              /**
               * Id of the frame that is being navigated.
               */
              frameId: FrameId;
              /**
               * The reason for the navigation.
               */
              reason: ClientNavigationReason;
              /**
               * The destination URL for the requested navigation.
               */
              url: string;
          };
          /**
           * Fired when frame schedules a potential navigation.
           */
          type frameScheduledNavigationPayload = {
              /**
               * Id of the frame that has scheduled a navigation.
               */
              frameId: FrameId;
              /**
               * Delay (in seconds) until the navigation is scheduled to begin. The navigation is not
        guaranteed to start.
               */
              delay: number;
              /**
               * The reason for the navigation.
               */
              reason: ClientNavigationReason;
              /**
               * The destination URL for the scheduled navigation.
               */
              url: string;
          };
          /**
           * Fired when frame has started loading.
           */
          type frameStartedLoadingPayload = {
              /**
               * Id of the frame that has started loading.
               */
              frameId: FrameId;
          };
          /**
           * Fired when frame has stopped loading.
           */
          type frameStoppedLoadingPayload = {
              /**
               * Id of the frame that has stopped loading.
               */
              frameId: FrameId;
          };
          /**
           * Fired when page is about to start a download.
           */
          type downloadWillBeginPayload = {
              /**
               * Id of the frame that caused download to begin.
               */
              frameId: FrameId;
              /**
               * URL of the resource being downloaded.
               */
              url: string;
          };
          /**
           * Fired when interstitial page was hidden
           */
          type interstitialHiddenPayload = void;
          /**
           * Fired when interstitial page was shown
           */
          type interstitialShownPayload = void;
          /**
           * Fired when a JavaScript initiated dialog (alert, confirm, prompt, or onbeforeunload) has been
      closed.
           */
          type javascriptDialogClosedPayload = {
              /**
               * Whether dialog was confirmed.
               */
              result: boolean;
              /**
               * User input in case of prompt.
               */
              userInput: string;
          };
          /**
           * Fired when a JavaScript initiated dialog (alert, confirm, prompt, or onbeforeunload) is about to
      open.
           */
          type javascriptDialogOpeningPayload = {
              /**
               * Frame url.
               */
              url: string;
              /**
               * Message that will be displayed by the dialog.
               */
              message: string;
              /**
               * Dialog type.
               */
              type: DialogType;
              /**
               * True iff browser is capable showing or acting on the given dialog. When browser has no
        dialog handler for given target, calling alert while Page domain is engaged will stall
        the page execution. Execution can be resumed via calling Page.handleJavaScriptDialog.
               */
              hasBrowserHandler: boolean;
              /**
               * Default dialog prompt.
               */
              defaultPrompt?: string;
          };
          /**
           * Fired for top level page lifecycle events such as navigation, load, paint, etc.
           */
          type lifecycleEventPayload = {
              /**
               * Id of the frame.
               */
              frameId: FrameId;
              /**
               * Loader identifier. Empty string if the request is fetched from worker.
               */
              loaderId: Network.LoaderId;
              name: string;
              timestamp: Network.MonotonicTime;
          };
          type loadEventFiredPayload = {
              timestamp: Network.MonotonicTime;
          };
          /**
           * Fired when same-document navigation happens, e.g. due to history API usage or anchor navigation.
           */
          type navigatedWithinDocumentPayload = {
              /**
               * Id of the frame.
               */
              frameId: FrameId;
              /**
               * Frame's new url.
               */
              url: string;
          };
          /**
           * Compressed image data requested by the `startScreencast`.
           */
          type screencastFramePayload = {
              /**
               * Base64-encoded compressed image.
               */
              data: binary;
              /**
               * Screencast frame metadata.
               */
              metadata: ScreencastFrameMetadata;
              /**
               * Frame number.
               */
              sessionId: number;
          };
          /**
           * Fired when the page with currently enabled screencast was shown or hidden `.
           */
          type screencastVisibilityChangedPayload = {
              /**
               * True if the page is visible.
               */
              visible: boolean;
          };
          /**
           * Fired when a new window is going to be opened, via window.open(), link click, form submission,
      etc.
           */
          type windowOpenPayload = {
              /**
               * The URL for the new window.
               */
              url: string;
              /**
               * Window name.
               */
              windowName: string;
              /**
               * An array of enabled window features.
               */
              windowFeatures: string[];
              /**
               * Whether or not it was triggered by user gesture.
               */
              userGesture: boolean;
          };
          /**
           * Issued for every compilation cache generated. Is only available
      if Page.setGenerateCompilationCache is enabled.
           */
          type compilationCacheProducedPayload = {
              url: string;
              /**
               * Base64-encoded data
               */
              data: binary;
          };
          /**
           * Deprecated, please use addScriptToEvaluateOnNewDocument instead.
           */
          type addScriptToEvaluateOnLoadParameters = {
              scriptSource: string;
          };
          type addScriptToEvaluateOnLoadReturnValue = {
              /**
               * Identifier of the added script.
               */
              identifier: ScriptIdentifier;
          };
          /**
           * Evaluates given script in every frame upon creation (before loading frame's scripts).
           */
          type addScriptToEvaluateOnNewDocumentParameters = {
              source: string;
              /**
               * If specified, creates an isolated world with the given name and evaluates given script in it.
        This world name will be used as the ExecutionContextDescription::name when the corresponding
        event is emitted.
               */
              worldName?: string;
          };
          type addScriptToEvaluateOnNewDocumentReturnValue = {
              /**
               * Identifier of the added script.
               */
              identifier: ScriptIdentifier;
          };
          /**
           * Brings page to front (activates tab).
           */
          type bringToFrontParameters = {};
          type bringToFrontReturnValue = {};
          /**
           * Capture page screenshot.
           */
          type captureScreenshotParameters = {
              /**
               * Image compression format (defaults to png).
               */
              format?: "jpeg" | "png";
              /**
               * Compression quality from range [0..100] (jpeg only).
               */
              quality?: number;
              /**
               * Capture the screenshot of a given region only.
               */
              clip?: Viewport;
              /**
               * Capture the screenshot from the surface, rather than the view. Defaults to true.
               */
              fromSurface?: boolean;
          };
          type captureScreenshotReturnValue = {
              /**
               * Base64-encoded image data.
               */
              data: binary;
          };
          /**
           * Returns a snapshot of the page as a string. For MHTML format, the serialization includes
      iframes, shadow DOM, external resources, and element-inline styles.
           */
          type captureSnapshotParameters = {
              /**
               * Format (defaults to mhtml).
               */
              format?: "mhtml";
          };
          type captureSnapshotReturnValue = {
              /**
               * Serialized page data.
               */
              data: string;
          };
          /**
           * Clears the overriden device metrics.
           */
          type clearDeviceMetricsOverrideParameters = {};
          type clearDeviceMetricsOverrideReturnValue = {};
          /**
           * Clears the overridden Device Orientation.
           */
          type clearDeviceOrientationOverrideParameters = {};
          type clearDeviceOrientationOverrideReturnValue = {};
          /**
           * Clears the overriden Geolocation Position and Error.
           */
          type clearGeolocationOverrideParameters = {};
          type clearGeolocationOverrideReturnValue = {};
          /**
           * Creates an isolated world for the given frame.
           */
          type createIsolatedWorldParameters = {
              /**
               * Id of the frame in which the isolated world should be created.
               */
              frameId: FrameId;
              /**
               * An optional name which is reported in the Execution Context.
               */
              worldName?: string;
              /**
               * Whether or not universal access should be granted to the isolated world. This is a powerful
        option, use with caution.
               */
              grantUniveralAccess?: boolean;
          };
          type createIsolatedWorldReturnValue = {
              /**
               * Execution context of the isolated world.
               */
              executionContextId: Runtime.ExecutionContextId;
          };
          /**
           * Deletes browser cookie with given name, domain and path.
           */
          type deleteCookieParameters = {
              /**
               * Name of the cookie to remove.
               */
              cookieName: string;
              /**
               * URL to match cooke domain and path.
               */
              url: string;
          };
          type deleteCookieReturnValue = {};
          /**
           * Disables page domain notifications.
           */
          type disableParameters = {};
          type disableReturnValue = {};
          /**
           * Enables page domain notifications.
           */
          type enableParameters = {};
          type enableReturnValue = {};
          type getAppManifestParameters = {};
          type getAppManifestReturnValue = {
              /**
               * Manifest location.
               */
              url: string;
              errors: AppManifestError[];
              /**
               * Manifest content.
               */
              data?: string;
              /**
               * Parsed manifest properties
               */
              parsed?: AppManifestParsedProperties;
          };
          type getInstallabilityErrorsParameters = {};
          type getInstallabilityErrorsReturnValue = {
              installabilityErrors: InstallabilityError[];
          };
          type getManifestIconsParameters = {};
          type getManifestIconsReturnValue = {
              primaryIcon?: binary;
          };
          /**
           * Returns all browser cookies. Depending on the backend support, will return detailed cookie
      information in the `cookies` field.
           */
          type getCookiesParameters = {};
          type getCookiesReturnValue = {
              /**
               * Array of cookie objects.
               */
              cookies: Network.Cookie[];
          };
          /**
           * Returns present frame tree structure.
           */
          type getFrameTreeParameters = {};
          type getFrameTreeReturnValue = {
              /**
               * Present frame tree structure.
               */
              frameTree: FrameTree;
          };
          /**
           * Returns metrics relating to the layouting of the page, such as viewport bounds/scale.
           */
          type getLayoutMetricsParameters = {};
          type getLayoutMetricsReturnValue = {
              /**
               * Metrics relating to the layout viewport.
               */
              layoutViewport: LayoutViewport;
              /**
               * Metrics relating to the visual viewport.
               */
              visualViewport: VisualViewport;
              /**
               * Size of scrollable area.
               */
              contentSize: DOM.Rect;
          };
          /**
           * Returns navigation history for the current page.
           */
          type getNavigationHistoryParameters = {};
          type getNavigationHistoryReturnValue = {
              /**
               * Index of the current navigation history entry.
               */
              currentIndex: number;
              /**
               * Array of navigation history entries.
               */
              entries: NavigationEntry[];
          };
          /**
           * Resets navigation history for the current page.
           */
          type resetNavigationHistoryParameters = {};
          type resetNavigationHistoryReturnValue = {};
          /**
           * Returns content of the given resource.
           */
          type getResourceContentParameters = {
              /**
               * Frame id to get resource for.
               */
              frameId: FrameId;
              /**
               * URL of the resource to get content for.
               */
              url: string;
          };
          type getResourceContentReturnValue = {
              /**
               * Resource content.
               */
              content: string;
              /**
               * True, if content was served as base64.
               */
              base64Encoded: boolean;
          };
          /**
           * Returns present frame / resource tree structure.
           */
          type getResourceTreeParameters = {};
          type getResourceTreeReturnValue = {
              /**
               * Present frame / resource tree structure.
               */
              frameTree: FrameResourceTree;
          };
          /**
           * Accepts or dismisses a JavaScript initiated dialog (alert, confirm, prompt, or onbeforeunload).
           */
          type handleJavaScriptDialogParameters = {
              /**
               * Whether to accept or dismiss the dialog.
               */
              accept: boolean;
              /**
               * The text to enter into the dialog prompt before accepting. Used only if this is a prompt
        dialog.
               */
              promptText?: string;
          };
          type handleJavaScriptDialogReturnValue = {};
          /**
           * Navigates current page to the given URL.
           */
          type navigateParameters = {
              /**
               * URL to navigate the page to.
               */
              url: string;
              /**
               * Referrer URL.
               */
              referrer?: string;
              /**
               * Intended transition type.
               */
              transitionType?: TransitionType;
              /**
               * Frame id to navigate, if not specified navigates the top frame.
               */
              frameId?: FrameId;
              /**
               * Referrer-policy used for the navigation.
               */
              referrerPolicy?: ReferrerPolicy;
          };
          type navigateReturnValue = {
              /**
               * Frame id that has navigated (or failed to navigate)
               */
              frameId: FrameId;
              /**
               * Loader identifier.
               */
              loaderId?: Network.LoaderId;
              /**
               * User friendly error message, present if and only if navigation has failed.
               */
              errorText?: string;
          };
          /**
           * Navigates current page to the given history entry.
           */
          type navigateToHistoryEntryParameters = {
              /**
               * Unique id of the entry to navigate to.
               */
              entryId: number;
          };
          type navigateToHistoryEntryReturnValue = {};
          /**
           * Print page as PDF.
           */
          type printToPDFParameters = {
              /**
               * Paper orientation. Defaults to false.
               */
              landscape?: boolean;
              /**
               * Display header and footer. Defaults to false.
               */
              displayHeaderFooter?: boolean;
              /**
               * Print background graphics. Defaults to false.
               */
              printBackground?: boolean;
              /**
               * Scale of the webpage rendering. Defaults to 1.
               */
              scale?: number;
              /**
               * Paper width in inches. Defaults to 8.5 inches.
               */
              paperWidth?: number;
              /**
               * Paper height in inches. Defaults to 11 inches.
               */
              paperHeight?: number;
              /**
               * Top margin in inches. Defaults to 1cm (~0.4 inches).
               */
              marginTop?: number;
              /**
               * Bottom margin in inches. Defaults to 1cm (~0.4 inches).
               */
              marginBottom?: number;
              /**
               * Left margin in inches. Defaults to 1cm (~0.4 inches).
               */
              marginLeft?: number;
              /**
               * Right margin in inches. Defaults to 1cm (~0.4 inches).
               */
              marginRight?: number;
              /**
               * Paper ranges to print, e.g., '1-5, 8, 11-13'. Defaults to the empty string, which means
        print all pages.
               */
              pageRanges?: string;
              /**
               * Whether to silently ignore invalid but successfully parsed page ranges, such as '3-2'.
        Defaults to false.
               */
              ignoreInvalidPageRanges?: boolean;
              /**
               * HTML template for the print header. Should be valid HTML markup with following
        classes used to inject printing values into them:
        - `date`: formatted print date
        - `title`: document title
        - `url`: document location
        - `pageNumber`: current page number
        - `totalPages`: total pages in the document

        For example, `<span class=title></span>` would generate span containing the title.
               */
              headerTemplate?: string;
              /**
               * HTML template for the print footer. Should use the same format as the `headerTemplate`.
               */
              footerTemplate?: string;
              /**
               * Whether or not to prefer page size as defined by css. Defaults to false,
        in which case the content will be scaled to fit the paper size.
               */
              preferCSSPageSize?: boolean;
              /**
               * return as stream
               */
              transferMode?: "ReturnAsBase64" | "ReturnAsStream";
          };
          type printToPDFReturnValue = {
              /**
               * Base64-encoded pdf data. Empty if |returnAsStream| is specified.
               */
              data: binary;
              /**
               * A handle of the stream that holds resulting PDF data.
               */
              stream?: IO.StreamHandle;
          };
          /**
           * Reloads given page optionally ignoring the cache.
           */
          type reloadParameters = {
              /**
               * If true, browser cache is ignored (as if the user pressed Shift+refresh).
               */
              ignoreCache?: boolean;
              /**
               * If set, the script will be injected into all frames of the inspected page after reload.
        Argument will be ignored if reloading dataURL origin.
               */
              scriptToEvaluateOnLoad?: string;
          };
          type reloadReturnValue = {};
          /**
           * Deprecated, please use removeScriptToEvaluateOnNewDocument instead.
           */
          type removeScriptToEvaluateOnLoadParameters = {
              identifier: ScriptIdentifier;
          };
          type removeScriptToEvaluateOnLoadReturnValue = {};
          /**
           * Removes given script from the list.
           */
          type removeScriptToEvaluateOnNewDocumentParameters = {
              identifier: ScriptIdentifier;
          };
          type removeScriptToEvaluateOnNewDocumentReturnValue = {};
          /**
           * Acknowledges that a screencast frame has been received by the frontend.
           */
          type screencastFrameAckParameters = {
              /**
               * Frame number.
               */
              sessionId: number;
          };
          type screencastFrameAckReturnValue = {};
          /**
           * Searches for given string in resource content.
           */
          type searchInResourceParameters = {
              /**
               * Frame id for resource to search in.
               */
              frameId: FrameId;
              /**
               * URL of the resource to search in.
               */
              url: string;
              /**
               * String to search for.
               */
              query: string;
              /**
               * If true, search is case sensitive.
               */
              caseSensitive?: boolean;
              /**
               * If true, treats string parameter as regex.
               */
              isRegex?: boolean;
          };
          type searchInResourceReturnValue = {
              /**
               * List of search matches.
               */
              result: Debugger.SearchMatch[];
          };
          /**
           * Enable Chrome's experimental ad filter on all sites.
           */
          type setAdBlockingEnabledParameters = {
              /**
               * Whether to block ads.
               */
              enabled: boolean;
          };
          type setAdBlockingEnabledReturnValue = {};
          /**
           * Enable page Content Security Policy by-passing.
           */
          type setBypassCSPParameters = {
              /**
               * Whether to bypass page CSP.
               */
              enabled: boolean;
          };
          type setBypassCSPReturnValue = {};
          /**
           * Overrides the values of device screen dimensions (window.screen.width, window.screen.height,
      window.innerWidth, window.innerHeight, and "device-width"/"device-height"-related CSS media
      query results).
           */
          type setDeviceMetricsOverrideParameters = {
              /**
               * Overriding width value in pixels (minimum 0, maximum 10000000). 0 disables the override.
               */
              width: number;
              /**
               * Overriding height value in pixels (minimum 0, maximum 10000000). 0 disables the override.
               */
              height: number;
              /**
               * Overriding device scale factor value. 0 disables the override.
               */
              deviceScaleFactor: number;
              /**
               * Whether to emulate mobile device. This includes viewport meta tag, overlay scrollbars, text
        autosizing and more.
               */
              mobile: boolean;
              /**
               * Scale to apply to resulting view image.
               */
              scale?: number;
              /**
               * Overriding screen width value in pixels (minimum 0, maximum 10000000).
               */
              screenWidth?: number;
              /**
               * Overriding screen height value in pixels (minimum 0, maximum 10000000).
               */
              screenHeight?: number;
              /**
               * Overriding view X position on screen in pixels (minimum 0, maximum 10000000).
               */
              positionX?: number;
              /**
               * Overriding view Y position on screen in pixels (minimum 0, maximum 10000000).
               */
              positionY?: number;
              /**
               * Do not set visible view size, rely upon explicit setVisibleSize call.
               */
              dontSetVisibleSize?: boolean;
              /**
               * Screen orientation override.
               */
              screenOrientation?: Emulation.ScreenOrientation;
              /**
               * The viewport dimensions and scale. If not set, the override is cleared.
               */
              viewport?: Viewport;
          };
          type setDeviceMetricsOverrideReturnValue = {};
          /**
           * Overrides the Device Orientation.
           */
          type setDeviceOrientationOverrideParameters = {
              /**
               * Mock alpha
               */
              alpha: number;
              /**
               * Mock beta
               */
              beta: number;
              /**
               * Mock gamma
               */
              gamma: number;
          };
          type setDeviceOrientationOverrideReturnValue = {};
          /**
           * Set generic font families.
           */
          type setFontFamiliesParameters = {
              /**
               * Specifies font families to set. If a font family is not specified, it won't be changed.
               */
              fontFamilies: FontFamilies;
          };
          type setFontFamiliesReturnValue = {};
          /**
           * Set default font sizes.
           */
          type setFontSizesParameters = {
              /**
               * Specifies font sizes to set. If a font size is not specified, it won't be changed.
               */
              fontSizes: FontSizes;
          };
          type setFontSizesReturnValue = {};
          /**
           * Sets given markup as the document's HTML.
           */
          type setDocumentContentParameters = {
              /**
               * Frame id to set HTML for.
               */
              frameId: FrameId;
              /**
               * HTML content to set.
               */
              html: string;
          };
          type setDocumentContentReturnValue = {};
          /**
           * Set the behavior when downloading a file.
           */
          type setDownloadBehaviorParameters = {
              /**
               * Whether to allow all or deny all download requests, or use default Chrome behavior if
        available (otherwise deny).
               */
              behavior: "deny" | "allow" | "default";
              /**
               * The default path to save downloaded files to. This is requred if behavior is set to 'allow'
               */
              downloadPath?: string;
          };
          type setDownloadBehaviorReturnValue = {};
          /**
           * Overrides the Geolocation Position or Error. Omitting any of the parameters emulates position
      unavailable.
           */
          type setGeolocationOverrideParameters = {
              /**
               * Mock latitude
               */
              latitude?: number;
              /**
               * Mock longitude
               */
              longitude?: number;
              /**
               * Mock accuracy
               */
              accuracy?: number;
          };
          type setGeolocationOverrideReturnValue = {};
          /**
           * Controls whether page will emit lifecycle events.
           */
          type setLifecycleEventsEnabledParameters = {
              /**
               * If true, starts emitting lifecycle events.
               */
              enabled: boolean;
          };
          type setLifecycleEventsEnabledReturnValue = {};
          /**
           * Toggles mouse event-based touch event emulation.
           */
          type setTouchEmulationEnabledParameters = {
              /**
               * Whether the touch event emulation should be enabled.
               */
              enabled: boolean;
              /**
               * Touch/gesture events configuration. Default: current platform.
               */
              configuration?: "mobile" | "desktop";
          };
          type setTouchEmulationEnabledReturnValue = {};
          /**
           * Starts sending each frame using the `screencastFrame` event.
           */
          type startScreencastParameters = {
              /**
               * Image compression format.
               */
              format?: "jpeg" | "png";
              /**
               * Compression quality from range [0..100].
               */
              quality?: number;
              /**
               * Maximum screenshot width.
               */
              maxWidth?: number;
              /**
               * Maximum screenshot height.
               */
              maxHeight?: number;
              /**
               * Send every n-th frame.
               */
              everyNthFrame?: number;
          };
          type startScreencastReturnValue = {};
          /**
           * Force the page stop all navigations and pending resource fetches.
           */
          type stopLoadingParameters = {};
          type stopLoadingReturnValue = {};
          /**
           * Crashes renderer on the IO thread, generates minidumps.
           */
          type crashParameters = {};
          type crashReturnValue = {};
          /**
           * Tries to close page, running its beforeunload hooks, if any.
           */
          type closeParameters = {};
          type closeReturnValue = {};
          /**
           * Tries to update the web lifecycle state of the page.
      It will transition the page to the given state according to:
      https://github.com/WICG/web-lifecycle/
           */
          type setWebLifecycleStateParameters = {
              /**
               * Target lifecycle state
               */
              state: "frozen" | "active";
          };
          type setWebLifecycleStateReturnValue = {};
          /**
           * Stops sending each frame in the `screencastFrame`.
           */
          type stopScreencastParameters = {};
          type stopScreencastReturnValue = {};
          /**
           * Forces compilation cache to be generated for every subresource script.
           */
          type setProduceCompilationCacheParameters = {
              enabled: boolean;
          };
          type setProduceCompilationCacheReturnValue = {};
          /**
           * Seeds compilation cache for given url. Compilation cache does not survive
      cross-process navigation.
           */
          type addCompilationCacheParameters = {
              url: string;
              /**
               * Base64-encoded data
               */
              data: binary;
          };
          type addCompilationCacheReturnValue = {};
          /**
           * Clears seeded compilation cache.
           */
          type clearCompilationCacheParameters = {};
          type clearCompilationCacheReturnValue = {};
          /**
           * Generates a report for testing.
           */
          type generateTestReportParameters = {
              /**
               * Message to be displayed in the report.
               */
              message: string;
              /**
               * Specifies the endpoint group to deliver the report to.
               */
              group?: string;
          };
          type generateTestReportReturnValue = {};
          /**
           * Pauses page execution. Can be resumed using generic Runtime.runIfWaitingForDebugger.
           */
          type waitForDebuggerParameters = {};
          type waitForDebuggerReturnValue = {};
          /**
           * Intercept file chooser requests and transfer control to protocol clients.
      When file chooser interception is enabled, native file chooser dialog is not shown.
      Instead, a protocol event `Page.fileChooserOpened` is emitted.
           */
          type setInterceptFileChooserDialogParameters = {
              enabled: boolean;
          };
          type setInterceptFileChooserDialogReturnValue = {};
      }
      module Performance {
          /**
           * Run-time execution metric.
           */
          interface Metric {
              /**
               * Metric name.
               */
              name: string;
              /**
               * Metric value.
               */
              value: number;
          }
          /**
           * Current values of the metrics.
           */
          type metricsPayload = {
              /**
               * Current values of the metrics.
               */
              metrics: Metric[];
              /**
               * Timestamp title.
               */
              title: string;
          };
          /**
           * Disable collecting and reporting metrics.
           */
          type disableParameters = {};
          type disableReturnValue = {};
          /**
           * Enable collecting and reporting metrics.
           */
          type enableParameters = {
              /**
               * Time domain to use for collecting and reporting duration metrics.
               */
              timeDomain?: "timeTicks" | "threadTicks";
          };
          type enableReturnValue = {};
          /**
           * Sets time domain to use for collecting and reporting duration metrics.
      Note that this must be called before enabling metrics collection. Calling
      this method while metrics collection is enabled returns an error.
           */
          type setTimeDomainParameters = {
              /**
               * Time domain
               */
              timeDomain: "timeTicks" | "threadTicks";
          };
          type setTimeDomainReturnValue = {};
          /**
           * Retrieve current values of run-time metrics.
           */
          type getMetricsParameters = {};
          type getMetricsReturnValue = {
              /**
               * Current values for run-time metrics.
               */
              metrics: Metric[];
          };
      }
      /**
       * Security
       */
      module Security {
          /**
           * An internal certificate ID value.
           */
          type CertificateId = number;
          /**
           * A description of mixed content (HTTP resources on HTTPS pages), as defined by
      https://www.w3.org/TR/mixed-content/#categories
           */
          type MixedContentType = "blockable" | "optionally-blockable" | "none";
          /**
           * The security level of a page or resource.
           */
          type SecurityState = "unknown" | "neutral" | "insecure" | "secure" | "info" | "insecure-broken";
          /**
           * Details about the security state of the page certificate.
           */
          interface CertificateSecurityState {
              /**
               * Protocol name (e.g. "TLS 1.2" or "QUIC").
               */
              protocol: string;
              /**
               * Key Exchange used by the connection, or the empty string if not applicable.
               */
              keyExchange: string;
              /**
               * (EC)DH group used by the connection, if applicable.
               */
              keyExchangeGroup?: string;
              /**
               * Cipher name.
               */
              cipher: string;
              /**
               * TLS MAC. Note that AEAD ciphers do not have separate MACs.
               */
              mac?: string;
              /**
               * Page certificate.
               */
              certificate: string[];
              /**
               * Certificate subject name.
               */
              subjectName: string;
              /**
               * Name of the issuing CA.
               */
              issuer: string;
              /**
               * Certificate valid from date.
               */
              validFrom: Network.TimeSinceEpoch;
              /**
               * Certificate valid to (expiration) date
               */
              validTo: Network.TimeSinceEpoch;
              /**
               * The highest priority network error code, if the certificate has an error.
               */
              certificateNetworkError?: string;
              /**
               * True if the certificate uses a weak signature aglorithm.
               */
              certificateHasWeakSignature: boolean;
              /**
               * True if the certificate has a SHA1 signature in the chain.
               */
              certificateHasSha1Signature: boolean;
              /**
               * True if modern SSL
               */
              modernSSL: boolean;
              /**
               * True if the connection is using an obsolete SSL protocol.
               */
              obsoleteSslProtocol: boolean;
              /**
               * True if the connection is using an obsolete SSL key exchange.
               */
              obsoleteSslKeyExchange: boolean;
              /**
               * True if the connection is using an obsolete SSL cipher.
               */
              obsoleteSslCipher: boolean;
              /**
               * True if the connection is using an obsolete SSL signature.
               */
              obsoleteSslSignature: boolean;
          }
          type SafetyTipStatus = "badReputation" | "lookalike";
          interface SafetyTipInfo {
              /**
               * Describes whether the page triggers any safety tips or reputation warnings. Default is unknown.
               */
              safetyTipStatus: SafetyTipStatus;
              /**
               * The URL the safety tip suggested ("Did you mean?"). Only filled in for lookalike matches.
               */
              safeUrl?: string;
          }
          /**
           * Security state information about the page.
           */
          interface VisibleSecurityState {
              /**
               * The security level of the page.
               */
              securityState: SecurityState;
              /**
               * Security state details about the page certificate.
               */
              certificateSecurityState?: CertificateSecurityState;
              /**
               * The type of Safety Tip triggered on the page. Note that this field will be set even if the Safety Tip UI was not actually shown.
               */
              safetyTipInfo?: SafetyTipInfo;
              /**
               * Array of security state issues ids.
               */
              securityStateIssueIds: string[];
          }
          /**
           * An explanation of an factor contributing to the security state.
           */
          interface SecurityStateExplanation {
              /**
               * Security state representing the severity of the factor being explained.
               */
              securityState: SecurityState;
              /**
               * Title describing the type of factor.
               */
              title: string;
              /**
               * Short phrase describing the type of factor.
               */
              summary: string;
              /**
               * Full text explanation of the factor.
               */
              description: string;
              /**
               * The type of mixed content described by the explanation.
               */
              mixedContentType: MixedContentType;
              /**
               * Page certificate.
               */
              certificate: string[];
              /**
               * Recommendations to fix any issues.
               */
              recommendations?: string[];
          }
          /**
           * Information about insecure content on the page.
           */
          interface InsecureContentStatus {
              /**
               * Always false.
               */
              ranMixedContent: boolean;
              /**
               * Always false.
               */
              displayedMixedContent: boolean;
              /**
               * Always false.
               */
              containedMixedForm: boolean;
              /**
               * Always false.
               */
              ranContentWithCertErrors: boolean;
              /**
               * Always false.
               */
              displayedContentWithCertErrors: boolean;
              /**
               * Always set to unknown.
               */
              ranInsecureContentStyle: SecurityState;
              /**
               * Always set to unknown.
               */
              displayedInsecureContentStyle: SecurityState;
          }
          /**
           * The action to take when a certificate error occurs. continue will continue processing the
      request and cancel will cancel the request.
           */
          type CertificateErrorAction = "continue" | "cancel";
          /**
           * There is a certificate error. If overriding certificate errors is enabled, then it should be
      handled with the `handleCertificateError` command. Note: this event does not fire if the
      certificate error has been allowed internally. Only one client per target should override
      certificate errors at the same time.
           */
          type certificateErrorPayload = {
              /**
               * The ID of the event.
               */
              eventId: number;
              /**
               * The type of the error.
               */
              errorType: string;
              /**
               * The url that was requested.
               */
              requestURL: string;
          };
          /**
           * The security state of the page changed.
           */
          type visibleSecurityStateChangedPayload = {
              /**
               * Security state information about the page.
               */
              visibleSecurityState: VisibleSecurityState;
          };
          /**
           * The security state of the page changed.
           */
          type securityStateChangedPayload = {
              /**
               * Security state.
               */
              securityState: SecurityState;
              /**
               * True if the page was loaded over cryptographic transport such as HTTPS.
               */
              schemeIsCryptographic: boolean;
              /**
               * List of explanations for the security state. If the overall security state is `insecure` or
        `warning`, at least one corresponding explanation should be included.
               */
              explanations: SecurityStateExplanation[];
              /**
               * Information about insecure content on the page.
               */
              insecureContentStatus: InsecureContentStatus;
              /**
               * Overrides user-visible description of the state.
               */
              summary?: string;
          };
          /**
           * Disables tracking security state changes.
           */
          type disableParameters = {};
          type disableReturnValue = {};
          /**
           * Enables tracking security state changes.
           */
          type enableParameters = {};
          type enableReturnValue = {};
          /**
           * Enable/disable whether all certificate errors should be ignored.
           */
          type setIgnoreCertificateErrorsParameters = {
              /**
               * If true, all certificate errors will be ignored.
               */
              ignore: boolean;
          };
          type setIgnoreCertificateErrorsReturnValue = {};
          /**
           * Handles a certificate error that fired a certificateError event.
           */
          type handleCertificateErrorParameters = {
              /**
               * The ID of the event.
               */
              eventId: number;
              /**
               * The action to take on the certificate error.
               */
              action: CertificateErrorAction;
          };
          type handleCertificateErrorReturnValue = {};
          /**
           * Enable/disable overriding certificate errors. If enabled, all certificate error events need to
      be handled by the DevTools client and should be answered with `handleCertificateError` commands.
           */
          type setOverrideCertificateErrorsParameters = {
              /**
               * If true, certificate errors will be overridden.
               */
              override: boolean;
          };
          type setOverrideCertificateErrorsReturnValue = {};
      }
      module ServiceWorker {
          type RegistrationID = string;
          /**
           * ServiceWorker registration.
           */
          interface ServiceWorkerRegistration {
              registrationId: RegistrationID;
              scopeURL: string;
              isDeleted: boolean;
          }
          type ServiceWorkerVersionRunningStatus = "stopped" | "starting" | "running" | "stopping";
          type ServiceWorkerVersionStatus = "new" | "installing" | "installed" | "activating" | "activated" | "redundant";
          /**
           * ServiceWorker version.
           */
          interface ServiceWorkerVersion {
              versionId: string;
              registrationId: RegistrationID;
              scriptURL: string;
              runningStatus: ServiceWorkerVersionRunningStatus;
              status: ServiceWorkerVersionStatus;
              /**
               * The Last-Modified header value of the main script.
               */
              scriptLastModified?: number;
              /**
               * The time at which the response headers of the main script were received from the server.
        For cached script it is the last time the cache entry was validated.
               */
              scriptResponseTime?: number;
              controlledClients?: Target.TargetID[];
              targetId?: Target.TargetID;
          }
          /**
           * ServiceWorker error message.
           */
          interface ServiceWorkerErrorMessage {
              errorMessage: string;
              registrationId: RegistrationID;
              versionId: string;
              sourceURL: string;
              lineNumber: number;
              columnNumber: number;
          }
          type workerErrorReportedPayload = {
              errorMessage: ServiceWorkerErrorMessage;
          };
          type workerRegistrationUpdatedPayload = {
              registrations: ServiceWorkerRegistration[];
          };
          type workerVersionUpdatedPayload = {
              versions: ServiceWorkerVersion[];
          };
          type deliverPushMessageParameters = {
              origin: string;
              registrationId: RegistrationID;
              data: string;
          };
          type deliverPushMessageReturnValue = {};
          type disableParameters = {};
          type disableReturnValue = {};
          type dispatchSyncEventParameters = {
              origin: string;
              registrationId: RegistrationID;
              tag: string;
              lastChance: boolean;
          };
          type dispatchSyncEventReturnValue = {};
          type dispatchPeriodicSyncEventParameters = {
              origin: string;
              registrationId: RegistrationID;
              tag: string;
          };
          type dispatchPeriodicSyncEventReturnValue = {};
          type enableParameters = {};
          type enableReturnValue = {};
          type inspectWorkerParameters = {
              versionId: string;
          };
          type inspectWorkerReturnValue = {};
          type setForceUpdateOnPageLoadParameters = {
              forceUpdateOnPageLoad: boolean;
          };
          type setForceUpdateOnPageLoadReturnValue = {};
          type skipWaitingParameters = {
              scopeURL: string;
          };
          type skipWaitingReturnValue = {};
          type startWorkerParameters = {
              scopeURL: string;
          };
          type startWorkerReturnValue = {};
          type stopAllWorkersParameters = {};
          type stopAllWorkersReturnValue = {};
          type stopWorkerParameters = {
              versionId: string;
          };
          type stopWorkerReturnValue = {};
          type unregisterParameters = {
              scopeURL: string;
          };
          type unregisterReturnValue = {};
          type updateRegistrationParameters = {
              scopeURL: string;
          };
          type updateRegistrationReturnValue = {};
      }
      module Storage {
          /**
           * Enum of possible storage types.
           */
          type StorageType = "appcache" | "cookies" | "file_systems" | "indexeddb" | "local_storage" | "shader_cache" | "websql" | "service_workers" | "cache_storage" | "all" | "other";
          /**
           * Usage for a storage type.
           */
          interface UsageForType {
              /**
               * Name of storage type.
               */
              storageType: StorageType;
              /**
               * Storage usage (bytes).
               */
              usage: number;
          }
          /**
           * A cache's contents have been modified.
           */
          type cacheStorageContentUpdatedPayload = {
              /**
               * Origin to update.
               */
              origin: string;
              /**
               * Name of cache in origin.
               */
              cacheName: string;
          };
          /**
           * A cache has been added/deleted.
           */
          type cacheStorageListUpdatedPayload = {
              /**
               * Origin to update.
               */
              origin: string;
          };
          /**
           * The origin's IndexedDB object store has been modified.
           */
          type indexedDBContentUpdatedPayload = {
              /**
               * Origin to update.
               */
              origin: string;
              /**
               * Database to update.
               */
              databaseName: string;
              /**
               * ObjectStore to update.
               */
              objectStoreName: string;
          };
          /**
           * The origin's IndexedDB database list has been modified.
           */
          type indexedDBListUpdatedPayload = {
              /**
               * Origin to update.
               */
              origin: string;
          };
          /**
           * Clears storage for origin.
           */
          type clearDataForOriginParameters = {
              /**
               * Security origin.
               */
              origin: string;
              /**
               * Comma separated list of StorageType to clear.
               */
              storageTypes: string;
          };
          type clearDataForOriginReturnValue = {};
          /**
           * Returns all browser cookies.
           */
          type getCookiesParameters = {
              /**
               * Browser context to use when called on the browser endpoint.
               */
              browserContextId?: Browser.BrowserContextID;
          };
          type getCookiesReturnValue = {
              /**
               * Array of cookie objects.
               */
              cookies: Network.Cookie[];
          };
          /**
           * Sets given cookies.
           */
          type setCookiesParameters = {
              /**
               * Cookies to be set.
               */
              cookies: Network.CookieParam[];
              /**
               * Browser context to use when called on the browser endpoint.
               */
              browserContextId?: Browser.BrowserContextID;
          };
          type setCookiesReturnValue = {};
          /**
           * Clears cookies.
           */
          type clearCookiesParameters = {
              /**
               * Browser context to use when called on the browser endpoint.
               */
              browserContextId?: Browser.BrowserContextID;
          };
          type clearCookiesReturnValue = {};
          /**
           * Returns usage and quota in bytes.
           */
          type getUsageAndQuotaParameters = {
              /**
               * Security origin.
               */
              origin: string;
          };
          type getUsageAndQuotaReturnValue = {
              /**
               * Storage usage (bytes).
               */
              usage: number;
              /**
               * Storage quota (bytes).
               */
              quota: number;
              /**
               * Storage usage per type (bytes).
               */
              usageBreakdown: UsageForType[];
          };
          /**
           * Registers origin to be notified when an update occurs to its cache storage list.
           */
          type trackCacheStorageForOriginParameters = {
              /**
               * Security origin.
               */
              origin: string;
          };
          type trackCacheStorageForOriginReturnValue = {};
          /**
           * Registers origin to be notified when an update occurs to its IndexedDB.
           */
          type trackIndexedDBForOriginParameters = {
              /**
               * Security origin.
               */
              origin: string;
          };
          type trackIndexedDBForOriginReturnValue = {};
          /**
           * Unregisters origin from receiving notifications for cache storage.
           */
          type untrackCacheStorageForOriginParameters = {
              /**
               * Security origin.
               */
              origin: string;
          };
          type untrackCacheStorageForOriginReturnValue = {};
          /**
           * Unregisters origin from receiving notifications for IndexedDB.
           */
          type untrackIndexedDBForOriginParameters = {
              /**
               * Security origin.
               */
              origin: string;
          };
          type untrackIndexedDBForOriginReturnValue = {};
      }
      /**
       * The SystemInfo domain defines methods and events for querying low-level system information.
       */
      module SystemInfo {
          /**
           * Describes a single graphics processor (GPU).
           */
          interface GPUDevice {
              /**
               * PCI ID of the GPU vendor, if available; 0 otherwise.
               */
              vendorId: number;
              /**
               * PCI ID of the GPU device, if available; 0 otherwise.
               */
              deviceId: number;
              /**
               * Sub sys ID of the GPU, only available on Windows.
               */
              subSysId?: number;
              /**
               * Revision of the GPU, only available on Windows.
               */
              revision?: number;
              /**
               * String description of the GPU vendor, if the PCI ID is not available.
               */
              vendorString: string;
              /**
               * String description of the GPU device, if the PCI ID is not available.
               */
              deviceString: string;
              /**
               * String description of the GPU driver vendor.
               */
              driverVendor: string;
              /**
               * String description of the GPU driver version.
               */
              driverVersion: string;
          }
          /**
           * Describes the width and height dimensions of an entity.
           */
          interface Size {
              /**
               * Width in pixels.
               */
              width: number;
              /**
               * Height in pixels.
               */
              height: number;
          }
          /**
           * Describes a supported video decoding profile with its associated minimum and
      maximum resolutions.
           */
          interface VideoDecodeAcceleratorCapability {
              /**
               * Video codec profile that is supported, e.g. VP9 Profile 2.
               */
              profile: string;
              /**
               * Maximum video dimensions in pixels supported for this |profile|.
               */
              maxResolution: Size;
              /**
               * Minimum video dimensions in pixels supported for this |profile|.
               */
              minResolution: Size;
          }
          /**
           * Describes a supported video encoding profile with its associated maximum
      resolution and maximum framerate.
           */
          interface VideoEncodeAcceleratorCapability {
              /**
               * Video codec profile that is supported, e.g H264 Main.
               */
              profile: string;
              /**
               * Maximum video dimensions in pixels supported for this |profile|.
               */
              maxResolution: Size;
              /**
               * Maximum encoding framerate in frames per second supported for this
        |profile|, as fraction's numerator and denominator, e.g. 24/1 fps,
        24000/1001 fps, etc.
               */
              maxFramerateNumerator: number;
              maxFramerateDenominator: number;
          }
          /**
           * YUV subsampling type of the pixels of a given image.
           */
          type SubsamplingFormat = "yuv420" | "yuv422" | "yuv444";
          /**
           * Image format of a given image.
           */
          type ImageType = "jpeg" | "webp" | "unknown";
          /**
           * Describes a supported image decoding profile with its associated minimum and
      maximum resolutions and subsampling.
           */
          interface ImageDecodeAcceleratorCapability {
              /**
               * Image coded, e.g. Jpeg.
               */
              imageType: ImageType;
              /**
               * Maximum supported dimensions of the image in pixels.
               */
              maxDimensions: Size;
              /**
               * Minimum supported dimensions of the image in pixels.
               */
              minDimensions: Size;
              /**
               * Optional array of supported subsampling formats, e.g. 4:2:0, if known.
               */
              subsamplings: SubsamplingFormat[];
          }
          /**
           * Provides information about the GPU(s) on the system.
           */
          interface GPUInfo {
              /**
               * The graphics devices on the system. Element 0 is the primary GPU.
               */
              devices: GPUDevice[];
              /**
               * An optional dictionary of additional GPU related attributes.
               */
              auxAttributes?: {
                  [key: string]: string;
              };
              /**
               * An optional dictionary of graphics features and their status.
               */
              featureStatus?: {
                  [key: string]: string;
              };
              /**
               * An optional array of GPU driver bug workarounds.
               */
              driverBugWorkarounds: string[];
              /**
               * Supported accelerated video decoding capabilities.
               */
              videoDecoding: VideoDecodeAcceleratorCapability[];
              /**
               * Supported accelerated video encoding capabilities.
               */
              videoEncoding: VideoEncodeAcceleratorCapability[];
              /**
               * Supported accelerated image decoding capabilities.
               */
              imageDecoding: ImageDecodeAcceleratorCapability[];
          }
          /**
           * Represents process info.
           */
          interface ProcessInfo {
              /**
               * Specifies process type.
               */
              type: string;
              /**
               * Specifies process id.
               */
              id: number;
              /**
               * Specifies cumulative CPU usage in seconds across all threads of the
        process since the process start.
               */
              cpuTime: number;
          }
          /**
           * Returns information about the system.
           */
          type getInfoParameters = {};
          type getInfoReturnValue = {
              /**
               * Information about the GPUs on the system.
               */
              gpu: GPUInfo;
              /**
               * A platform-dependent description of the model of the machine. On Mac OS, this is, for
        example, 'MacBookPro'. Will be the empty string if not supported.
               */
              modelName: string;
              /**
               * A platform-dependent description of the version of the machine. On Mac OS, this is, for
        example, '10.1'. Will be the empty string if not supported.
               */
              modelVersion: string;
              /**
               * The command line string used to launch the browser. Will be the empty string if not
        supported.
               */
              commandLine: string;
          };
          /**
           * Returns information about all running processes.
           */
          type getProcessInfoParameters = {};
          type getProcessInfoReturnValue = {
              /**
               * An array of process info blocks.
               */
              processInfo: ProcessInfo[];
          };
      }
      /**
       * Supports additional targets discovery and allows to attach to them.
       */
      module Target {
          type TargetID = string;
          /**
           * Unique identifier of attached debugging session.
           */
          type SessionID = string;
          interface TargetInfo {
              targetId: TargetID;
              type: string;
              title: string;
              url: string;
              /**
               * Whether the target has an attached client.
               */
              attached: boolean;
              /**
               * Opener target Id
               */
              openerId?: TargetID;
              browserContextId?: Browser.BrowserContextID;
          }
          interface RemoteLocation {
              host: string;
              port: number;
          }
          /**
           * Issued when attached to target because of auto-attach or `attachToTarget` command.
           */
          type attachedToTargetPayload = {
              /**
               * Identifier assigned to the session used to send/receive messages.
               */
              sessionId: SessionID;
              targetInfo: TargetInfo;
              waitingForDebugger: boolean;
          };
          /**
           * Issued when detached from target for any reason (including `detachFromTarget` command). Can be
      issued multiple times per target if multiple sessions have been attached to it.
           */
          type detachedFromTargetPayload = {
              /**
               * Detached session identifier.
               */
              sessionId: SessionID;
              /**
               * Deprecated.
               */
              targetId?: TargetID;
          };
          /**
           * Notifies about a new protocol message received from the session (as reported in
      `attachedToTarget` event).
           */
          type receivedMessageFromTargetPayload = {
              /**
               * Identifier of a session which sends a message.
               */
              sessionId: SessionID;
              message: string;
              /**
               * Deprecated.
               */
              targetId?: TargetID;
          };
          /**
           * Issued when a possible inspection target is created.
           */
          type targetCreatedPayload = {
              targetInfo: TargetInfo;
          };
          /**
           * Issued when a target is destroyed.
           */
          type targetDestroyedPayload = {
              targetId: TargetID;
          };
          /**
           * Issued when a target has crashed.
           */
          type targetCrashedPayload = {
              targetId: TargetID;
              /**
               * Termination status type.
               */
              status: string;
              /**
               * Termination error code.
               */
              errorCode: number;
          };
          /**
           * Issued when some information about a target has changed. This only happens between
      `targetCreated` and `targetDestroyed`.
           */
          type targetInfoChangedPayload = {
              targetInfo: TargetInfo;
          };
          /**
           * Activates (focuses) the target.
           */
          type activateTargetParameters = {
              targetId: TargetID;
          };
          type activateTargetReturnValue = {};
          /**
           * Attaches to the target with given id.
           */
          type attachToTargetParameters = {
              targetId: TargetID;
              /**
               * Enables "flat" access to the session via specifying sessionId attribute in the commands.
        We plan to make this the default, deprecate non-flattened mode,
        and eventually retire it. See crbug.com/991325.
               */
              flatten?: boolean;
          };
          type attachToTargetReturnValue = {
              /**
               * Id assigned to the session.
               */
              sessionId: SessionID;
          };
          /**
           * Attaches to the browser target, only uses flat sessionId mode.
           */
          type attachToBrowserTargetParameters = {};
          type attachToBrowserTargetReturnValue = {
              /**
               * Id assigned to the session.
               */
              sessionId: SessionID;
          };
          /**
           * Closes the target. If the target is a page that gets closed too.
           */
          type closeTargetParameters = {
              targetId: TargetID;
          };
          type closeTargetReturnValue = {
              success: boolean;
          };
          /**
           * Inject object to the target's main frame that provides a communication
      channel with browser target.

      Injected object will be available as `window[bindingName]`.

      The object has the follwing API:
      - `binding.send(json)` - a method to send messages over the remote debugging protocol
      - `binding.onmessage = json => handleMessage(json)` - a callback that will be called for the protocol notifications and command responses.
           */
          type exposeDevToolsProtocolParameters = {
              targetId: TargetID;
              /**
               * Binding name, 'cdp' if not specified.
               */
              bindingName?: string;
          };
          type exposeDevToolsProtocolReturnValue = {};
          /**
           * Creates a new empty BrowserContext. Similar to an incognito profile but you can have more than
      one.
           */
          type createBrowserContextParameters = {
              /**
               * If specified, disposes this context when debugging session disconnects.
               */
              disposeOnDetach?: boolean;
          };
          type createBrowserContextReturnValue = {
              /**
               * The id of the context created.
               */
              browserContextId: Browser.BrowserContextID;
          };
          /**
           * Returns all browser contexts created with `Target.createBrowserContext` method.
           */
          type getBrowserContextsParameters = {};
          type getBrowserContextsReturnValue = {
              /**
               * An array of browser context ids.
               */
              browserContextIds: Browser.BrowserContextID[];
          };
          /**
           * Creates a new page.
           */
          type createTargetParameters = {
              /**
               * The initial URL the page will be navigated to.
               */
              url: string;
              /**
               * Frame width in DIP (headless chrome only).
               */
              width?: number;
              /**
               * Frame height in DIP (headless chrome only).
               */
              height?: number;
              /**
               * The browser context to create the page in.
               */
              browserContextId?: Browser.BrowserContextID;
              /**
               * Whether BeginFrames for this target will be controlled via DevTools (headless chrome only,
        not supported on MacOS yet, false by default).
               */
              enableBeginFrameControl?: boolean;
              /**
               * Whether to create a new Window or Tab (chrome-only, false by default).
               */
              newWindow?: boolean;
              /**
               * Whether to create the target in background or foreground (chrome-only,
        false by default).
               */
              background?: boolean;
          };
          type createTargetReturnValue = {
              /**
               * The id of the page opened.
               */
              targetId: TargetID;
          };
          /**
           * Detaches session with given id.
           */
          type detachFromTargetParameters = {
              /**
               * Session to detach.
               */
              sessionId?: SessionID;
              /**
               * Deprecated.
               */
              targetId?: TargetID;
          };
          type detachFromTargetReturnValue = {};
          /**
           * Deletes a BrowserContext. All the belonging pages will be closed without calling their
      beforeunload hooks.
           */
          type disposeBrowserContextParameters = {
              browserContextId: Browser.BrowserContextID;
          };
          type disposeBrowserContextReturnValue = {};
          /**
           * Returns information about a target.
           */
          type getTargetInfoParameters = {
              targetId?: TargetID;
          };
          type getTargetInfoReturnValue = {
              targetInfo: TargetInfo;
          };
          /**
           * Retrieves a list of available targets.
           */
          type getTargetsParameters = {};
          type getTargetsReturnValue = {
              /**
               * The list of targets.
               */
              targetInfos: TargetInfo[];
          };
          /**
           * Sends protocol message over session with given id.
      Consider using flat mode instead; see commands attachToTarget, setAutoAttach,
      and crbug.com/991325.
           */
          type sendMessageToTargetParameters = {
              message: string;
              /**
               * Identifier of the session.
               */
              sessionId?: SessionID;
              /**
               * Deprecated.
               */
              targetId?: TargetID;
          };
          type sendMessageToTargetReturnValue = {};
          /**
           * Controls whether to automatically attach to new targets which are considered to be related to
      this one. When turned on, attaches to all existing related targets as well. When turned off,
      automatically detaches from all currently attached targets.
           */
          type setAutoAttachParameters = {
              /**
               * Whether to auto-attach to related targets.
               */
              autoAttach: boolean;
              /**
               * Whether to pause new targets when attaching to them. Use `Runtime.runIfWaitingForDebugger`
        to run paused targets.
               */
              waitForDebuggerOnStart: boolean;
              /**
               * Enables "flat" access to the session via specifying sessionId attribute in the commands.
        We plan to make this the default, deprecate non-flattened mode,
        and eventually retire it. See crbug.com/991325.
               */
              flatten?: boolean;
          };
          type setAutoAttachReturnValue = {};
          /**
           * Controls whether to discover available targets and notify via
      `targetCreated/targetInfoChanged/targetDestroyed` events.
           */
          type setDiscoverTargetsParameters = {
              /**
               * Whether to discover available targets.
               */
              discover: boolean;
          };
          type setDiscoverTargetsReturnValue = {};
          /**
           * Enables target discovery for the specified locations, when `setDiscoverTargets` was set to
      `true`.
           */
          type setRemoteLocationsParameters = {
              /**
               * List of remote locations.
               */
              locations: RemoteLocation[];
          };
          type setRemoteLocationsReturnValue = {};
      }
      /**
       * The Tethering domain defines methods and events for browser port binding.
       */
      module Tethering {
          /**
           * Informs that port was successfully bound and got a specified connection id.
           */
          type acceptedPayload = {
              /**
               * Port number that was successfully bound.
               */
              port: number;
              /**
               * Connection id to be used.
               */
              connectionId: string;
          };
          /**
           * Request browser port binding.
           */
          type bindParameters = {
              /**
               * Port number to bind.
               */
              port: number;
          };
          type bindReturnValue = {};
          /**
           * Request browser port unbinding.
           */
          type unbindParameters = {
              /**
               * Port number to unbind.
               */
              port: number;
          };
          type unbindReturnValue = {};
      }
      module Tracing {
          /**
           * Configuration for memory dump. Used only when "memory-infra" category is enabled.
           */
          type MemoryDumpConfig = {
              [key: string]: string;
          };
          interface TraceConfig {
              /**
               * Controls how the trace buffer stores data.
               */
              recordMode?: "recordUntilFull" | "recordContinuously" | "recordAsMuchAsPossible" | "echoToConsole";
              /**
               * Turns on JavaScript stack sampling.
               */
              enableSampling?: boolean;
              /**
               * Turns on system tracing.
               */
              enableSystrace?: boolean;
              /**
               * Turns on argument filter.
               */
              enableArgumentFilter?: boolean;
              /**
               * Included category filters.
               */
              includedCategories?: string[];
              /**
               * Excluded category filters.
               */
              excludedCategories?: string[];
              /**
               * Configuration to synthesize the delays in tracing.
               */
              syntheticDelays?: string[];
              /**
               * Configuration for memory dump triggers. Used only when "memory-infra" category is enabled.
               */
              memoryDumpConfig?: MemoryDumpConfig;
          }
          /**
           * Data format of a trace. Can be either the legacy JSON format or the
      protocol buffer format. Note that the JSON format will be deprecated soon.
           */
          type StreamFormat = "json" | "proto";
          /**
           * Compression type to use for traces returned via streams.
           */
          type StreamCompression = "none" | "gzip";
          type bufferUsagePayload = {
              /**
               * A number in range [0..1] that indicates the used size of event buffer as a fraction of its
        total size.
               */
              percentFull?: number;
              /**
               * An approximate number of events in the trace log.
               */
              eventCount?: number;
              /**
               * A number in range [0..1] that indicates the used size of event buffer as a fraction of its
        total size.
               */
              value?: number;
          };
          /**
           * Contains an bucket of collected trace events. When tracing is stopped collected events will be
      send as a sequence of dataCollected events followed by tracingComplete event.
           */
          type dataCollectedPayload = {
              value: {
                  [key: string]: string;
              }[];
          };
          /**
           * Signals that tracing is stopped and there is no trace buffers pending flush, all data were
      delivered via dataCollected events.
           */
          type tracingCompletePayload = {
              /**
               * Indicates whether some trace data is known to have been lost, e.g. because the trace ring
        buffer wrapped around.
               */
              dataLossOccurred: boolean;
              /**
               * A handle of the stream that holds resulting trace data.
               */
              stream?: IO.StreamHandle;
              /**
               * Trace data format of returned stream.
               */
              traceFormat?: StreamFormat;
              /**
               * Compression format of returned stream.
               */
              streamCompression?: StreamCompression;
          };
          /**
           * Stop trace events collection.
           */
          type endParameters = {};
          type endReturnValue = {};
          /**
           * Gets supported tracing categories.
           */
          type getCategoriesParameters = {};
          type getCategoriesReturnValue = {
              /**
               * A list of supported tracing categories.
               */
              categories: string[];
          };
          /**
           * Record a clock sync marker in the trace.
           */
          type recordClockSyncMarkerParameters = {
              /**
               * The ID of this clock sync marker
               */
              syncId: string;
          };
          type recordClockSyncMarkerReturnValue = {};
          /**
           * Request a global memory dump.
           */
          type requestMemoryDumpParameters = {
              /**
               * Enables more deterministic results by forcing garbage collection
               */
              deterministic?: boolean;
          };
          type requestMemoryDumpReturnValue = {
              /**
               * GUID of the resulting global memory dump.
               */
              dumpGuid: string;
              /**
               * True iff the global memory dump succeeded.
               */
              success: boolean;
          };
          /**
           * Start trace events collection.
           */
          type startParameters = {
              /**
               * Category/tag filter
               */
              categories?: string;
              /**
               * Tracing options
               */
              options?: string;
              /**
               * If set, the agent will issue bufferUsage events at this interval, specified in milliseconds
               */
              bufferUsageReportingInterval?: number;
              /**
               * Whether to report trace events as series of dataCollected events or to save trace to a
        stream (defaults to `ReportEvents`).
               */
              transferMode?: "ReportEvents" | "ReturnAsStream";
              /**
               * Trace data format to use. This only applies when using `ReturnAsStream`
        transfer mode (defaults to `json`).
               */
              streamFormat?: StreamFormat;
              /**
               * Compression format to use. This only applies when using `ReturnAsStream`
        transfer mode (defaults to `none`)
               */
              streamCompression?: StreamCompression;
              traceConfig?: TraceConfig;
          };
          type startReturnValue = {};
      }
      /**
       * A domain for letting clients substitute browser's network layer with client code.
       */
      module Fetch {
          /**
           * Unique request identifier.
           */
          type RequestId = string;
          /**
           * Stages of the request to handle. Request will intercept before the request is
      sent. Response will intercept after the response is received (but before response
      body is received.
           */
          type RequestStage = "Request" | "Response";
          interface RequestPattern {
              /**
               * Wildcards ('*' -> zero or more, '?' -> exactly one) are allowed. Escape character is
        backslash. Omitting is equivalent to "*".
               */
              urlPattern?: string;
              /**
               * If set, only requests for matching resource types will be intercepted.
               */
              resourceType?: Network.ResourceType;
              /**
               * Stage at wich to begin intercepting requests. Default is Request.
               */
              requestStage?: RequestStage;
          }
          /**
           * Response HTTP header entry
           */
          interface HeaderEntry {
              name: string;
              value: string;
          }
          /**
           * Authorization challenge for HTTP status code 401 or 407.
           */
          interface AuthChallenge {
              /**
               * Source of the authentication challenge.
               */
              source?: "Server" | "Proxy";
              /**
               * Origin of the challenger.
               */
              origin: string;
              /**
               * The authentication scheme used, such as basic or digest
               */
              scheme: string;
              /**
               * The realm of the challenge. May be empty.
               */
              realm: string;
          }
          /**
           * Response to an AuthChallenge.
           */
          interface AuthChallengeResponse {
              /**
               * The decision on what to do in response to the authorization challenge.  Default means
        deferring to the default behavior of the net stack, which will likely either the Cancel
        authentication or display a popup dialog box.
               */
              response: "Default" | "CancelAuth" | "ProvideCredentials";
              /**
               * The username to provide, possibly empty. Should only be set if response is
        ProvideCredentials.
               */
              username?: string;
              /**
               * The password to provide, possibly empty. Should only be set if response is
        ProvideCredentials.
               */
              password?: string;
          }
          /**
           * Issued when the domain is enabled and the request URL matches the
      specified filter. The request is paused until the client responds
      with one of continueRequest, failRequest or fulfillRequest.
      The stage of the request can be determined by presence of responseErrorReason
      and responseStatusCode -- the request is at the response stage if either
      of these fields is present and in the request stage otherwise.
           */
          type requestPausedPayload = {
              /**
               * Each request the page makes will have a unique id.
               */
              requestId: RequestId;
              /**
               * The details of the request.
               */
              request: Network.Request;
              /**
               * The id of the frame that initiated the request.
               */
              frameId: Page.FrameId;
              /**
               * How the requested resource will be used.
               */
              resourceType: Network.ResourceType;
              /**
               * Response error if intercepted at response stage.
               */
              responseErrorReason?: Network.ErrorReason;
              /**
               * Response code if intercepted at response stage.
               */
              responseStatusCode?: number;
              /**
               * Response headers if intercepted at the response stage.
               */
              responseHeaders?: HeaderEntry[];
              /**
               * If the intercepted request had a corresponding Network.requestWillBeSent event fired for it,
        then this networkId will be the same as the requestId present in the requestWillBeSent event.
               */
              networkId?: RequestId;
          };
          /**
           * Issued when the domain is enabled with handleAuthRequests set to true.
      The request is paused until client responds with continueWithAuth.
           */
          type authRequiredPayload = {
              /**
               * Each request the page makes will have a unique id.
               */
              requestId: RequestId;
              /**
               * The details of the request.
               */
              request: Network.Request;
              /**
               * The id of the frame that initiated the request.
               */
              frameId: Page.FrameId;
              /**
               * How the requested resource will be used.
               */
              resourceType: Network.ResourceType;
              /**
               * Details of the Authorization Challenge encountered.
        If this is set, client should respond with continueRequest that
        contains AuthChallengeResponse.
               */
              authChallenge: AuthChallenge;
          };
          /**
           * Disables the fetch domain.
           */
          type disableParameters = {};
          type disableReturnValue = {};
          /**
           * Enables issuing of requestPaused events. A request will be paused until client
      calls one of failRequest, fulfillRequest or continueRequest/continueWithAuth.
           */
          type enableParameters = {
              /**
               * If specified, only requests matching any of these patterns will produce
        fetchRequested event and will be paused until clients response. If not set,
        all requests will be affected.
               */
              patterns?: RequestPattern[];
              /**
               * If true, authRequired events will be issued and requests will be paused
        expecting a call to continueWithAuth.
               */
              handleAuthRequests?: boolean;
          };
          type enableReturnValue = {};
          /**
           * Causes the request to fail with specified reason.
           */
          type failRequestParameters = {
              /**
               * An id the client received in requestPaused event.
               */
              requestId: RequestId;
              /**
               * Causes the request to fail with the given reason.
               */
              errorReason: Network.ErrorReason;
          };
          type failRequestReturnValue = {};
          /**
           * Provides response to the request.
           */
          type fulfillRequestParameters = {
              /**
               * An id the client received in requestPaused event.
               */
              requestId: RequestId;
              /**
               * An HTTP response code.
               */
              responseCode: number;
              /**
               * Response headers.
               */
              responseHeaders?: HeaderEntry[];
              /**
               * Alternative way of specifying response headers as a \0-separated
        series of name: value pairs. Prefer the above method unless you
        need to represent some non-UTF8 values that can't be transmitted
        over the protocol as text.
               */
              binaryResponseHeaders?: binary;
              /**
               * A response body.
               */
              body?: binary;
              /**
               * A textual representation of responseCode.
        If absent, a standard phrase matching responseCode is used.
               */
              responsePhrase?: string;
          };
          type fulfillRequestReturnValue = {};
          /**
           * Continues the request, optionally modifying some of its parameters.
           */
          type continueRequestParameters = {
              /**
               * An id the client received in requestPaused event.
               */
              requestId: RequestId;
              /**
               * If set, the request url will be modified in a way that's not observable by page.
               */
              url?: string;
              /**
               * If set, the request method is overridden.
               */
              method?: string;
              /**
               * If set, overrides the post data in the request.
               */
              postData?: string;
              /**
               * If set, overrides the request headrts.
               */
              headers?: HeaderEntry[];
          };
          type continueRequestReturnValue = {};
          /**
           * Continues a request supplying authChallengeResponse following authRequired event.
           */
          type continueWithAuthParameters = {
              /**
               * An id the client received in authRequired event.
               */
              requestId: RequestId;
              /**
               * Response to  with an authChallenge.
               */
              authChallengeResponse: AuthChallengeResponse;
          };
          type continueWithAuthReturnValue = {};
          /**
           * Causes the body of the response to be received from the server and
      returned as a single string. May only be issued for a request that
      is paused in the Response stage and is mutually exclusive with
      takeResponseBodyForInterceptionAsStream. Calling other methods that
      affect the request or disabling fetch domain before body is received
      results in an undefined behavior.
           */
          type getResponseBodyParameters = {
              /**
               * Identifier for the intercepted request to get body for.
               */
              requestId: RequestId;
          };
          type getResponseBodyReturnValue = {
              /**
               * Response body.
               */
              body: string;
              /**
               * True, if content was sent as base64.
               */
              base64Encoded: boolean;
          };
          /**
           * Returns a handle to the stream representing the response body.
      The request must be paused in the HeadersReceived stage.
      Note that after this command the request can't be continued
      as is -- client either needs to cancel it or to provide the
      response body.
      The stream only supports sequential read, IO.read will fail if the position
      is specified.
      This method is mutually exclusive with getResponseBody.
      Calling other methods that affect the request or disabling fetch
      domain before body is received results in an undefined behavior.
           */
          type takeResponseBodyAsStreamParameters = {
              requestId: RequestId;
          };
          type takeResponseBodyAsStreamReturnValue = {
              stream: IO.StreamHandle;
          };
      }
      /**
       * This domain allows inspection of Web Audio API.
    https://webaudio.github.io/web-audio-api/
       */
      module WebAudio {
          /**
           * An unique ID for a graph object (AudioContext, AudioNode, AudioParam) in Web Audio API
           */
          type GraphObjectId = string;
          /**
           * Enum of BaseAudioContext types
           */
          type ContextType = "realtime" | "offline";
          /**
           * Enum of AudioContextState from the spec
           */
          type ContextState = "suspended" | "running" | "closed";
          /**
           * Enum of AudioNode types
           */
          type NodeType = string;
          /**
           * Enum of AudioNode::ChannelCountMode from the spec
           */
          type ChannelCountMode = "clamped-max" | "explicit" | "max";
          /**
           * Enum of AudioNode::ChannelInterpretation from the spec
           */
          type ChannelInterpretation = "discrete" | "speakers";
          /**
           * Enum of AudioParam types
           */
          type ParamType = string;
          /**
           * Enum of AudioParam::AutomationRate from the spec
           */
          type AutomationRate = "a-rate" | "k-rate";
          /**
           * Fields in AudioContext that change in real-time.
           */
          interface ContextRealtimeData {
              /**
               * The current context time in second in BaseAudioContext.
               */
              currentTime: number;
              /**
               * The time spent on rendering graph divided by render qunatum duration,
        and multiplied by 100. 100 means the audio renderer reached the full
        capacity and glitch may occur.
               */
              renderCapacity: number;
              /**
               * A running mean of callback interval.
               */
              callbackIntervalMean: number;
              /**
               * A running variance of callback interval.
               */
              callbackIntervalVariance: number;
          }
          /**
           * Protocol object for BaseAudioContext
           */
          interface BaseAudioContext {
              contextId: GraphObjectId;
              contextType: ContextType;
              contextState: ContextState;
              realtimeData?: ContextRealtimeData;
              /**
               * Platform-dependent callback buffer size.
               */
              callbackBufferSize: number;
              /**
               * Number of output channels supported by audio hardware in use.
               */
              maxOutputChannelCount: number;
              /**
               * Context sample rate.
               */
              sampleRate: number;
          }
          /**
           * Protocol object for AudioListner
           */
          interface AudioListener {
              listenerId: GraphObjectId;
              contextId: GraphObjectId;
          }
          /**
           * Protocol object for AudioNode
           */
          interface AudioNode {
              nodeId: GraphObjectId;
              contextId: GraphObjectId;
              nodeType: NodeType;
              numberOfInputs: number;
              numberOfOutputs: number;
              channelCount: number;
              channelCountMode: ChannelCountMode;
              channelInterpretation: ChannelInterpretation;
          }
          /**
           * Protocol object for AudioParam
           */
          interface AudioParam {
              paramId: GraphObjectId;
              nodeId: GraphObjectId;
              contextId: GraphObjectId;
              paramType: ParamType;
              rate: AutomationRate;
              defaultValue: number;
              minValue: number;
              maxValue: number;
          }
          /**
           * Notifies that a new BaseAudioContext has been created.
           */
          type contextCreatedPayload = {
              context: BaseAudioContext;
          };
          /**
           * Notifies that an existing BaseAudioContext will be destroyed.
           */
          type contextWillBeDestroyedPayload = {
              contextId: GraphObjectId;
          };
          /**
           * Notifies that existing BaseAudioContext has changed some properties (id stays the same)..
           */
          type contextChangedPayload = {
              context: BaseAudioContext;
          };
          /**
           * Notifies that the construction of an AudioListener has finished.
           */
          type audioListenerCreatedPayload = {
              listener: AudioListener;
          };
          /**
           * Notifies that a new AudioListener has been created.
           */
          type audioListenerWillBeDestroyedPayload = {
              contextId: GraphObjectId;
              listenerId: GraphObjectId;
          };
          /**
           * Notifies that a new AudioNode has been created.
           */
          type audioNodeCreatedPayload = {
              node: AudioNode;
          };
          /**
           * Notifies that an existing AudioNode has been destroyed.
           */
          type audioNodeWillBeDestroyedPayload = {
              contextId: GraphObjectId;
              nodeId: GraphObjectId;
          };
          /**
           * Notifies that a new AudioParam has been created.
           */
          type audioParamCreatedPayload = {
              param: AudioParam;
          };
          /**
           * Notifies that an existing AudioParam has been destroyed.
           */
          type audioParamWillBeDestroyedPayload = {
              contextId: GraphObjectId;
              nodeId: GraphObjectId;
              paramId: GraphObjectId;
          };
          /**
           * Notifies that two AudioNodes are connected.
           */
          type nodesConnectedPayload = {
              contextId: GraphObjectId;
              sourceId: GraphObjectId;
              destinationId: GraphObjectId;
              sourceOutputIndex?: number;
              destinationInputIndex?: number;
          };
          /**
           * Notifies that AudioNodes are disconnected. The destination can be null, and it means all the outgoing connections from the source are disconnected.
           */
          type nodesDisconnectedPayload = {
              contextId: GraphObjectId;
              sourceId: GraphObjectId;
              destinationId: GraphObjectId;
              sourceOutputIndex?: number;
              destinationInputIndex?: number;
          };
          /**
           * Notifies that an AudioNode is connected to an AudioParam.
           */
          type nodeParamConnectedPayload = {
              contextId: GraphObjectId;
              sourceId: GraphObjectId;
              destinationId: GraphObjectId;
              sourceOutputIndex?: number;
          };
          /**
           * Notifies that an AudioNode is disconnected to an AudioParam.
           */
          type nodeParamDisconnectedPayload = {
              contextId: GraphObjectId;
              sourceId: GraphObjectId;
              destinationId: GraphObjectId;
              sourceOutputIndex?: number;
          };
          /**
           * Enables the WebAudio domain and starts sending context lifetime events.
           */
          type enableParameters = {};
          type enableReturnValue = {};
          /**
           * Disables the WebAudio domain.
           */
          type disableParameters = {};
          type disableReturnValue = {};
          /**
           * Fetch the realtime data from the registered contexts.
           */
          type getRealtimeDataParameters = {
              contextId: GraphObjectId;
          };
          type getRealtimeDataReturnValue = {
              realtimeData: ContextRealtimeData;
          };
      }
      /**
       * This domain allows configuring virtual authenticators to test the WebAuthn
    API.
       */
      module WebAuthn {
          type AuthenticatorId = string;
          type AuthenticatorProtocol = "u2f" | "ctap2";
          type AuthenticatorTransport = "usb" | "nfc" | "ble" | "cable" | "internal";
          interface VirtualAuthenticatorOptions {
              protocol: AuthenticatorProtocol;
              transport: AuthenticatorTransport;
              /**
               * Defaults to false.
               */
              hasResidentKey?: boolean;
              /**
               * Defaults to false.
               */
              hasUserVerification?: boolean;
              /**
               * If set to true, tests of user presence will succeed immediately.
        Otherwise, they will not be resolved. Defaults to true.
               */
              automaticPresenceSimulation?: boolean;
              /**
               * Sets whether User Verification succeeds or fails for an authenticator.
        Defaults to false.
               */
              isUserVerified?: boolean;
          }
          interface Credential {
              credentialId: binary;
              isResidentCredential: boolean;
              /**
               * Relying Party ID the credential is scoped to. Must be set when adding a
        credential.
               */
              rpId?: string;
              /**
               * The ECDSA P-256 private key in PKCS#8 format.
               */
              privateKey: binary;
              /**
               * An opaque byte sequence with a maximum size of 64 bytes mapping the
        credential to a specific user.
               */
              userHandle?: binary;
              /**
               * Signature counter. This is incremented by one for each successful
        assertion.
        See https://w3c.github.io/webauthn/#signature-counter
               */
              signCount: number;
          }
          /**
           * Enable the WebAuthn domain and start intercepting credential storage and
      retrieval with a virtual authenticator.
           */
          type enableParameters = {};
          type enableReturnValue = {};
          /**
           * Disable the WebAuthn domain.
           */
          type disableParameters = {};
          type disableReturnValue = {};
          /**
           * Creates and adds a virtual authenticator.
           */
          type addVirtualAuthenticatorParameters = {
              options: VirtualAuthenticatorOptions;
          };
          type addVirtualAuthenticatorReturnValue = {
              authenticatorId: AuthenticatorId;
          };
          /**
           * Removes the given authenticator.
           */
          type removeVirtualAuthenticatorParameters = {
              authenticatorId: AuthenticatorId;
          };
          type removeVirtualAuthenticatorReturnValue = {};
          /**
           * Adds the credential to the specified authenticator.
           */
          type addCredentialParameters = {
              authenticatorId: AuthenticatorId;
              credential: Credential;
          };
          type addCredentialReturnValue = {};
          /**
           * Returns a single credential stored in the given virtual authenticator that
      matches the credential ID.
           */
          type getCredentialParameters = {
              authenticatorId: AuthenticatorId;
              credentialId: binary;
          };
          type getCredentialReturnValue = {
              credential: Credential;
          };
          /**
           * Returns all the credentials stored in the given virtual authenticator.
           */
          type getCredentialsParameters = {
              authenticatorId: AuthenticatorId;
          };
          type getCredentialsReturnValue = {
              credentials: Credential[];
          };
          /**
           * Removes a credential from the authenticator.
           */
          type removeCredentialParameters = {
              authenticatorId: AuthenticatorId;
              credentialId: binary;
          };
          type removeCredentialReturnValue = {};
          /**
           * Clears all the credentials from the specified device.
           */
          type clearCredentialsParameters = {
              authenticatorId: AuthenticatorId;
          };
          type clearCredentialsReturnValue = {};
          /**
           * Sets whether User Verification succeeds or fails for an authenticator.
      The default is true.
           */
          type setUserVerifiedParameters = {
              authenticatorId: AuthenticatorId;
              isUserVerified: boolean;
          };
          type setUserVerifiedReturnValue = {};
      }
      /**
       * This domain allows detailed inspection of media elements
       */
      module Media {
          /**
           * Players will get an ID that is unique within the agent context.
           */
          type PlayerId = string;
          type Timestamp = number;
          /**
           * Player Property type
           */
          interface PlayerProperty {
              name: string;
              value?: string;
          }
          /**
           * Break out events into different types
           */
          type PlayerEventType = "errorEvent" | "triggeredEvent" | "messageEvent";
          interface PlayerEvent {
              type: PlayerEventType;
              /**
               * Events are timestamped relative to the start of the player creation
        not relative to the start of playback.
               */
              timestamp: Timestamp;
              name: string;
              value: string;
          }
          /**
           * This can be called multiple times, and can be used to set / override /
      remove player properties. A null propValue indicates removal.
           */
          type playerPropertiesChangedPayload = {
              playerId: PlayerId;
              properties: PlayerProperty[];
          };
          /**
           * Send events as a list, allowing them to be batched on the browser for less
      congestion. If batched, events must ALWAYS be in chronological order.
           */
          type playerEventsAddedPayload = {
              playerId: PlayerId;
              events: PlayerEvent[];
          };
          /**
           * Called whenever a player is created, or when a new agent joins and recieves
      a list of active players. If an agent is restored, it will recieve the full
      list of player ids and all events again.
           */
          type playersCreatedPayload = {
              players: PlayerId[];
          };
          /**
           * Enables the Media domain
           */
          type enableParameters = {};
          type enableReturnValue = {};
          /**
           * Disables the Media domain.
           */
          type disableParameters = {};
          type disableReturnValue = {};
      }
      /**
       * This domain is deprecated - use Runtime or Log instead.
       */
      module Console {
          /**
           * Console message.
           */
          interface ConsoleMessage {
              /**
               * Message source.
               */
              source: "xml" | "javascript" | "network" | "console-api" | "storage" | "appcache" | "rendering" | "security" | "other" | "deprecation" | "worker";
              /**
               * Message severity.
               */
              level: "log" | "warning" | "error" | "debug" | "info";
              /**
               * Message text.
               */
              text: string;
              /**
               * URL of the message origin.
               */
              url?: string;
              /**
               * Line number in the resource that generated this message (1-based).
               */
              line?: number;
              /**
               * Column number in the resource that generated this message (1-based).
               */
              column?: number;
          }
          /**
           * Issued when new console message is added.
           */
          type messageAddedPayload = {
              /**
               * Console message that has been added.
               */
              message: ConsoleMessage;
          };
          /**
           * Does nothing.
           */
          type clearMessagesParameters = {};
          type clearMessagesReturnValue = {};
          /**
           * Disables console domain, prevents further console messages from being reported to the client.
           */
          type disableParameters = {};
          type disableReturnValue = {};
          /**
           * Enables console domain, sends the messages collected so far to the client by means of the
      `messageAdded` notification.
           */
          type enableParameters = {};
          type enableReturnValue = {};
      }
      /**
       * Debugger domain exposes JavaScript debugging capabilities. It allows setting and removing
    breakpoints, stepping through execution, exploring stack traces, etc.
       */
      module Debugger {
          /**
           * Breakpoint identifier.
           */
          type BreakpointId = string;
          /**
           * Call frame identifier.
           */
          type CallFrameId = string;
          /**
           * Location in the source code.
           */
          interface Location {
              /**
               * Script identifier as reported in the `Debugger.scriptParsed`.
               */
              scriptId: Runtime.ScriptId;
              /**
               * Line number in the script (0-based).
               */
              lineNumber: number;
              /**
               * Column number in the script (0-based).
               */
              columnNumber?: number;
          }
          /**
           * Location in the source code.
           */
          interface ScriptPosition {
              lineNumber: number;
              columnNumber: number;
          }
          /**
           * JavaScript call frame. Array of call frames form the call stack.
           */
          interface CallFrame {
              /**
               * Call frame identifier. This identifier is only valid while the virtual machine is paused.
               */
              callFrameId: CallFrameId;
              /**
               * Name of the JavaScript function called on this call frame.
               */
              functionName: string;
              /**
               * Location in the source code.
               */
              functionLocation?: Location;
              /**
               * Location in the source code.
               */
              location: Location;
              /**
               * JavaScript script name or url.
               */
              url: string;
              /**
               * Scope chain for this call frame.
               */
              scopeChain: Scope[];
              /**
               * `this` object for this call frame.
               */
              this: Runtime.RemoteObject;
              /**
               * The value being returned, if the function is at return point.
               */
              returnValue?: Runtime.RemoteObject;
          }
          /**
           * Scope description.
           */
          interface Scope {
              /**
               * Scope type.
               */
              type: "global" | "local" | "with" | "closure" | "catch" | "block" | "script" | "eval" | "module";
              /**
               * Object representing the scope. For `global` and `with` scopes it represents the actual
        object; for the rest of the scopes, it is artificial transient object enumerating scope
        variables as its properties.
               */
              object: Runtime.RemoteObject;
              name?: string;
              /**
               * Location in the source code where scope starts
               */
              startLocation?: Location;
              /**
               * Location in the source code where scope ends
               */
              endLocation?: Location;
          }
          /**
           * Search match for resource.
           */
          interface SearchMatch {
              /**
               * Line number in resource content.
               */
              lineNumber: number;
              /**
               * Line with match content.
               */
              lineContent: string;
          }
          interface BreakLocation {
              /**
               * Script identifier as reported in the `Debugger.scriptParsed`.
               */
              scriptId: Runtime.ScriptId;
              /**
               * Line number in the script (0-based).
               */
              lineNumber: number;
              /**
               * Column number in the script (0-based).
               */
              columnNumber?: number;
              type?: "debuggerStatement" | "call" | "return";
          }
          /**
           * Enum of possible script languages.
           */
          type ScriptLanguage = "JavaScript" | "WebAssembly";
          /**
           * Fired when breakpoint is resolved to an actual script and location.
           */
          type breakpointResolvedPayload = {
              /**
               * Breakpoint unique identifier.
               */
              breakpointId: BreakpointId;
              /**
               * Actual breakpoint location.
               */
              location: Location;
          };
          /**
           * Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria.
           */
          type pausedPayload = {
              /**
               * Call stack the virtual machine stopped on.
               */
              callFrames: CallFrame[];
              /**
               * Pause reason.
               */
              reason: "ambiguous" | "assert" | "debugCommand" | "DOM" | "EventListener" | "exception" | "instrumentation" | "OOM" | "other" | "promiseRejection" | "XHR";
              /**
               * Object containing break-specific auxiliary properties.
               */
              data?: {
                  [key: string]: string;
              };
              /**
               * Hit breakpoints IDs
               */
              hitBreakpoints?: string[];
              /**
               * Async stack trace, if any.
               */
              asyncStackTrace?: Runtime.StackTrace;
              /**
               * Async stack trace, if any.
               */
              asyncStackTraceId?: Runtime.StackTraceId;
              /**
               * Never present, will be removed.
               */
              asyncCallStackTraceId?: Runtime.StackTraceId;
          };
          /**
           * Fired when the virtual machine resumed execution.
           */
          type resumedPayload = void;
          /**
           * Fired when virtual machine fails to parse the script.
           */
          type scriptFailedToParsePayload = {
              /**
               * Identifier of the script parsed.
               */
              scriptId: Runtime.ScriptId;
              /**
               * URL or name of the script parsed (if any).
               */
              url: string;
              /**
               * Line offset of the script within the resource with given URL (for script tags).
               */
              startLine: number;
              /**
               * Column offset of the script within the resource with given URL.
               */
              startColumn: number;
              /**
               * Last line of the script.
               */
              endLine: number;
              /**
               * Length of the last line of the script.
               */
              endColumn: number;
              /**
               * Specifies script creation context.
               */
              executionContextId: Runtime.ExecutionContextId;
              /**
               * Content hash of the script.
               */
              hash: string;
              /**
               * Embedder-specific auxiliary data.
               */
              executionContextAuxData?: {
                  [key: string]: string;
              };
              /**
               * URL of source map associated with script (if any).
               */
              sourceMapURL?: string;
              /**
               * True, if this script has sourceURL.
               */
              hasSourceURL?: boolean;
              /**
               * True, if this script is ES6 module.
               */
              isModule?: boolean;
              /**
               * This script length.
               */
              length?: number;
              /**
               * JavaScript top stack frame of where the script parsed event was triggered if available.
               */
              stackTrace?: Runtime.StackTrace;
              /**
               * If the scriptLanguage is WebAssembly, the code section offset in the module.
               */
              codeOffset?: number;
              /**
               * The language of the script.
               */
              scriptLanguage?: Debugger.ScriptLanguage;
          };
          /**
           * Fired when virtual machine parses script. This event is also fired for all known and uncollected
      scripts upon enabling debugger.
           */
          type scriptParsedPayload = {
              /**
               * Identifier of the script parsed.
               */
              scriptId: Runtime.ScriptId;
              /**
               * URL or name of the script parsed (if any).
               */
              url: string;
              /**
               * Line offset of the script within the resource with given URL (for script tags).
               */
              startLine: number;
              /**
               * Column offset of the script within the resource with given URL.
               */
              startColumn: number;
              /**
               * Last line of the script.
               */
              endLine: number;
              /**
               * Length of the last line of the script.
               */
              endColumn: number;
              /**
               * Specifies script creation context.
               */
              executionContextId: Runtime.ExecutionContextId;
              /**
               * Content hash of the script.
               */
              hash: string;
              /**
               * Embedder-specific auxiliary data.
               */
              executionContextAuxData?: {
                  [key: string]: string;
              };
              /**
               * True, if this script is generated as a result of the live edit operation.
               */
              isLiveEdit?: boolean;
              /**
               * URL of source map associated with script (if any).
               */
              sourceMapURL?: string;
              /**
               * True, if this script has sourceURL.
               */
              hasSourceURL?: boolean;
              /**
               * True, if this script is ES6 module.
               */
              isModule?: boolean;
              /**
               * This script length.
               */
              length?: number;
              /**
               * JavaScript top stack frame of where the script parsed event was triggered if available.
               */
              stackTrace?: Runtime.StackTrace;
              /**
               * If the scriptLanguage is WebAssembly, the code section offset in the module.
               */
              codeOffset?: number;
              /**
               * The language of the script.
               */
              scriptLanguage?: Debugger.ScriptLanguage;
          };
          /**
           * Continues execution until specific location is reached.
           */
          type continueToLocationParameters = {
              /**
               * Location to continue to.
               */
              location: Location;
              targetCallFrames?: "any" | "current";
          };
          type continueToLocationReturnValue = {};
          /**
           * Disables debugger for given page.
           */
          type disableParameters = {};
          type disableReturnValue = {};
          /**
           * Enables debugger for the given page. Clients should not assume that the debugging has been
      enabled until the result for this command is received.
           */
          type enableParameters = {
              /**
               * The maximum size in bytes of collected scripts (not referenced by other heap objects)
        the debugger can hold. Puts no limit if paramter is omitted.
               */
              maxScriptsCacheSize?: number;
          };
          type enableReturnValue = {
              /**
               * Unique identifier of the debugger.
               */
              debuggerId: Runtime.UniqueDebuggerId;
          };
          /**
           * Evaluates expression on a given call frame.
           */
          type evaluateOnCallFrameParameters = {
              /**
               * Call frame identifier to evaluate on.
               */
              callFrameId: CallFrameId;
              /**
               * Expression to evaluate.
               */
              expression: string;
              /**
               * String object group name to put result into (allows rapid releasing resulting object handles
        using `releaseObjectGroup`).
               */
              objectGroup?: string;
              /**
               * Specifies whether command line API should be available to the evaluated expression, defaults
        to false.
               */
              includeCommandLineAPI?: boolean;
              /**
               * In silent mode exceptions thrown during evaluation are not reported and do not pause
        execution. Overrides `setPauseOnException` state.
               */
              silent?: boolean;
              /**
               * Whether the result is expected to be a JSON object that should be sent by value.
               */
              returnByValue?: boolean;
              /**
               * Whether preview should be generated for the result.
               */
              generatePreview?: boolean;
              /**
               * Whether to throw an exception if side effect cannot be ruled out during evaluation.
               */
              throwOnSideEffect?: boolean;
              /**
               * Terminate execution after timing out (number of milliseconds).
               */
              timeout?: Runtime.TimeDelta;
          };
          type evaluateOnCallFrameReturnValue = {
              /**
               * Object wrapper for the evaluation result.
               */
              result: Runtime.RemoteObject;
              /**
               * Exception details.
               */
              exceptionDetails?: Runtime.ExceptionDetails;
          };
          /**
           * Returns possible locations for breakpoint. scriptId in start and end range locations should be
      the same.
           */
          type getPossibleBreakpointsParameters = {
              /**
               * Start of range to search possible breakpoint locations in.
               */
              start: Location;
              /**
               * End of range to search possible breakpoint locations in (excluding). When not specified, end
        of scripts is used as end of range.
               */
              end?: Location;
              /**
               * Only consider locations which are in the same (non-nested) function as start.
               */
              restrictToFunction?: boolean;
          };
          type getPossibleBreakpointsReturnValue = {
              /**
               * List of the possible breakpoint locations.
               */
              locations: BreakLocation[];
          };
          /**
           * Returns source for the script with given id.
           */
          type getScriptSourceParameters = {
              /**
               * Id of the script to get source for.
               */
              scriptId: Runtime.ScriptId;
          };
          type getScriptSourceReturnValue = {
              /**
               * Script source (empty in case of Wasm bytecode).
               */
              scriptSource: string;
              /**
               * Wasm bytecode.
               */
              bytecode?: binary;
          };
          /**
           * This command is deprecated. Use getScriptSource instead.
           */
          type getWasmBytecodeParameters = {
              /**
               * Id of the Wasm script to get source for.
               */
              scriptId: Runtime.ScriptId;
          };
          type getWasmBytecodeReturnValue = {
              /**
               * Script source.
               */
              bytecode: binary;
          };
          /**
           * Returns stack trace with given `stackTraceId`.
           */
          type getStackTraceParameters = {
              stackTraceId: Runtime.StackTraceId;
          };
          type getStackTraceReturnValue = {
              stackTrace: Runtime.StackTrace;
          };
          /**
           * Stops on the next JavaScript statement.
           */
          type pauseParameters = {};
          type pauseReturnValue = {};
          type pauseOnAsyncCallParameters = {
              /**
               * Debugger will pause when async call with given stack trace is started.
               */
              parentStackTraceId: Runtime.StackTraceId;
          };
          type pauseOnAsyncCallReturnValue = {};
          /**
           * Removes JavaScript breakpoint.
           */
          type removeBreakpointParameters = {
              breakpointId: BreakpointId;
          };
          type removeBreakpointReturnValue = {};
          /**
           * Restarts particular call frame from the beginning.
           */
          type restartFrameParameters = {
              /**
               * Call frame identifier to evaluate on.
               */
              callFrameId: CallFrameId;
          };
          type restartFrameReturnValue = {
              /**
               * New stack trace.
               */
              callFrames: CallFrame[];
              /**
               * Async stack trace, if any.
               */
              asyncStackTrace?: Runtime.StackTrace;
              /**
               * Async stack trace, if any.
               */
              asyncStackTraceId?: Runtime.StackTraceId;
          };
          /**
           * Resumes JavaScript execution.
           */
          type resumeParameters = {
              /**
               * Set to true to terminate execution upon resuming execution. In contrast
        to Runtime.terminateExecution, this will allows to execute further
        JavaScript (i.e. via evaluation) until execution of the paused code
        is actually resumed, at which point termination is triggered.
        If execution is currently not paused, this parameter has no effect.
               */
              terminateOnResume?: boolean;
          };
          type resumeReturnValue = {};
          /**
           * Searches for given string in script content.
           */
          type searchInContentParameters = {
              /**
               * Id of the script to search in.
               */
              scriptId: Runtime.ScriptId;
              /**
               * String to search for.
               */
              query: string;
              /**
               * If true, search is case sensitive.
               */
              caseSensitive?: boolean;
              /**
               * If true, treats string parameter as regex.
               */
              isRegex?: boolean;
          };
          type searchInContentReturnValue = {
              /**
               * List of search matches.
               */
              result: SearchMatch[];
          };
          /**
           * Enables or disables async call stacks tracking.
           */
          type setAsyncCallStackDepthParameters = {
              /**
               * Maximum depth of async call stacks. Setting to `0` will effectively disable collecting async
        call stacks (default).
               */
              maxDepth: number;
          };
          type setAsyncCallStackDepthReturnValue = {};
          /**
           * Replace previous blackbox patterns with passed ones. Forces backend to skip stepping/pausing in
      scripts with url matching one of the patterns. VM will try to leave blackboxed script by
      performing 'step in' several times, finally resorting to 'step out' if unsuccessful.
           */
          type setBlackboxPatternsParameters = {
              /**
               * Array of regexps that will be used to check script url for blackbox state.
               */
              patterns: string[];
          };
          type setBlackboxPatternsReturnValue = {};
          /**
           * Makes backend skip steps in the script in blackboxed ranges. VM will try leave blacklisted
      scripts by performing 'step in' several times, finally resorting to 'step out' if unsuccessful.
      Positions array contains positions where blackbox state is changed. First interval isn't
      blackboxed. Array should be sorted.
           */
          type setBlackboxedRangesParameters = {
              /**
               * Id of the script.
               */
              scriptId: Runtime.ScriptId;
              positions: ScriptPosition[];
          };
          type setBlackboxedRangesReturnValue = {};
          /**
           * Sets JavaScript breakpoint at a given location.
           */
          type setBreakpointParameters = {
              /**
               * Location to set breakpoint in.
               */
              location: Location;
              /**
               * Expression to use as a breakpoint condition. When specified, debugger will only stop on the
        breakpoint if this expression evaluates to true.
               */
              condition?: string;
          };
          type setBreakpointReturnValue = {
              /**
               * Id of the created breakpoint for further reference.
               */
              breakpointId: BreakpointId;
              /**
               * Location this breakpoint resolved into.
               */
              actualLocation: Location;
          };
          /**
           * Sets instrumentation breakpoint.
           */
          type setInstrumentationBreakpointParameters = {
              /**
               * Instrumentation name.
               */
              instrumentation: "beforeScriptExecution" | "beforeScriptWithSourceMapExecution";
          };
          type setInstrumentationBreakpointReturnValue = {
              /**
               * Id of the created breakpoint for further reference.
               */
              breakpointId: BreakpointId;
          };
          /**
           * Sets JavaScript breakpoint at given location specified either by URL or URL regex. Once this
      command is issued, all existing parsed scripts will have breakpoints resolved and returned in
      `locations` property. Further matching script parsing will result in subsequent
      `breakpointResolved` events issued. This logical breakpoint will survive page reloads.
           */
          type setBreakpointByUrlParameters = {
              /**
               * Line number to set breakpoint at.
               */
              lineNumber: number;
              /**
               * URL of the resources to set breakpoint on.
               */
              url?: string;
              /**
               * Regex pattern for the URLs of the resources to set breakpoints on. Either `url` or
        `urlRegex` must be specified.
               */
              urlRegex?: string;
              /**
               * Script hash of the resources to set breakpoint on.
               */
              scriptHash?: string;
              /**
               * Offset in the line to set breakpoint at.
               */
              columnNumber?: number;
              /**
               * Expression to use as a breakpoint condition. When specified, debugger will only stop on the
        breakpoint if this expression evaluates to true.
               */
              condition?: string;
          };
          type setBreakpointByUrlReturnValue = {
              /**
               * Id of the created breakpoint for further reference.
               */
              breakpointId: BreakpointId;
              /**
               * List of the locations this breakpoint resolved into upon addition.
               */
              locations: Location[];
          };
          /**
           * Sets JavaScript breakpoint before each call to the given function.
      If another function was created from the same source as a given one,
      calling it will also trigger the breakpoint.
           */
          type setBreakpointOnFunctionCallParameters = {
              /**
               * Function object id.
               */
              objectId: Runtime.RemoteObjectId;
              /**
               * Expression to use as a breakpoint condition. When specified, debugger will
        stop on the breakpoint if this expression evaluates to true.
               */
              condition?: string;
          };
          type setBreakpointOnFunctionCallReturnValue = {
              /**
               * Id of the created breakpoint for further reference.
               */
              breakpointId: BreakpointId;
          };
          /**
           * Activates / deactivates all breakpoints on the page.
           */
          type setBreakpointsActiveParameters = {
              /**
               * New value for breakpoints active state.
               */
              active: boolean;
          };
          type setBreakpointsActiveReturnValue = {};
          /**
           * Defines pause on exceptions state. Can be set to stop on all exceptions, uncaught exceptions or
      no exceptions. Initial pause on exceptions state is `none`.
           */
          type setPauseOnExceptionsParameters = {
              /**
               * Pause on exceptions mode.
               */
              state: "none" | "uncaught" | "all";
          };
          type setPauseOnExceptionsReturnValue = {};
          /**
           * Changes return value in top frame. Available only at return break position.
           */
          type setReturnValueParameters = {
              /**
               * New return value.
               */
              newValue: Runtime.CallArgument;
          };
          type setReturnValueReturnValue = {};
          /**
           * Edits JavaScript source live.
           */
          type setScriptSourceParameters = {
              /**
               * Id of the script to edit.
               */
              scriptId: Runtime.ScriptId;
              /**
               * New content of the script.
               */
              scriptSource: string;
              /**
               * If true the change will not actually be applied. Dry run may be used to get result
        description without actually modifying the code.
               */
              dryRun?: boolean;
          };
          type setScriptSourceReturnValue = {
              /**
               * New stack trace in case editing has happened while VM was stopped.
               */
              callFrames?: CallFrame[];
              /**
               * Whether current call stack  was modified after applying the changes.
               */
              stackChanged?: boolean;
              /**
               * Async stack trace, if any.
               */
              asyncStackTrace?: Runtime.StackTrace;
              /**
               * Async stack trace, if any.
               */
              asyncStackTraceId?: Runtime.StackTraceId;
              /**
               * Exception details if any.
               */
              exceptionDetails?: Runtime.ExceptionDetails;
          };
          /**
           * Makes page not interrupt on any pauses (breakpoint, exception, dom exception etc).
           */
          type setSkipAllPausesParameters = {
              /**
               * New value for skip pauses state.
               */
              skip: boolean;
          };
          type setSkipAllPausesReturnValue = {};
          /**
           * Changes value of variable in a callframe. Object-based scopes are not supported and must be
      mutated manually.
           */
          type setVariableValueParameters = {
              /**
               * 0-based number of scope as was listed in scope chain. Only 'local', 'closure' and 'catch'
        scope types are allowed. Other scopes could be manipulated manually.
               */
              scopeNumber: number;
              /**
               * Variable name.
               */
              variableName: string;
              /**
               * New variable value.
               */
              newValue: Runtime.CallArgument;
              /**
               * Id of callframe that holds variable.
               */
              callFrameId: CallFrameId;
          };
          type setVariableValueReturnValue = {};
          /**
           * Steps into the function call.
           */
          type stepIntoParameters = {
              /**
               * Debugger will pause on the execution of the first async task which was scheduled
        before next pause.
               */
              breakOnAsyncCall?: boolean;
          };
          type stepIntoReturnValue = {};
          /**
           * Steps out of the function call.
           */
          type stepOutParameters = {};
          type stepOutReturnValue = {};
          /**
           * Steps over the statement.
           */
          type stepOverParameters = {};
          type stepOverReturnValue = {};
      }
      module HeapProfiler {
          /**
           * Heap snapshot object id.
           */
          type HeapSnapshotObjectId = string;
          /**
           * Sampling Heap Profile node. Holds callsite information, allocation statistics and child nodes.
           */
          interface SamplingHeapProfileNode {
              /**
               * Function location.
               */
              callFrame: Runtime.CallFrame;
              /**
               * Allocations size in bytes for the node excluding children.
               */
              selfSize: number;
              /**
               * Node id. Ids are unique across all profiles collected between startSampling and stopSampling.
               */
              id: number;
              /**
               * Child nodes.
               */
              children: SamplingHeapProfileNode[];
          }
          /**
           * A single sample from a sampling profile.
           */
          interface SamplingHeapProfileSample {
              /**
               * Allocation size in bytes attributed to the sample.
               */
              size: number;
              /**
               * Id of the corresponding profile tree node.
               */
              nodeId: number;
              /**
               * Time-ordered sample ordinal number. It is unique across all profiles retrieved
        between startSampling and stopSampling.
               */
              ordinal: number;
          }
          /**
           * Sampling profile.
           */
          interface SamplingHeapProfile {
              head: SamplingHeapProfileNode;
              samples: SamplingHeapProfileSample[];
          }
          type addHeapSnapshotChunkPayload = {
              chunk: string;
          };
          /**
           * If heap objects tracking has been started then backend may send update for one or more fragments
           */
          type heapStatsUpdatePayload = {
              /**
               * An array of triplets. Each triplet describes a fragment. The first integer is the fragment
        index, the second integer is a total count of objects for the fragment, the third integer is
        a total size of the objects for the fragment.
               */
              statsUpdate: number[];
          };
          /**
           * If heap objects tracking has been started then backend regularly sends a current value for last
      seen object id and corresponding timestamp. If the were changes in the heap since last event
      then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event.
           */
          type lastSeenObjectIdPayload = {
              lastSeenObjectId: number;
              timestamp: number;
          };
          type reportHeapSnapshotProgressPayload = {
              done: number;
              total: number;
              finished?: boolean;
          };
          type resetProfilesPayload = void;
          /**
           * Enables console to refer to the node with given id via $x (see Command Line API for more details
      $x functions).
           */
          type addInspectedHeapObjectParameters = {
              /**
               * Heap snapshot object id to be accessible by means of $x command line API.
               */
              heapObjectId: HeapSnapshotObjectId;
          };
          type addInspectedHeapObjectReturnValue = {};
          type collectGarbageParameters = {};
          type collectGarbageReturnValue = {};
          type disableParameters = {};
          type disableReturnValue = {};
          type enableParameters = {};
          type enableReturnValue = {};
          type getHeapObjectIdParameters = {
              /**
               * Identifier of the object to get heap object id for.
               */
              objectId: Runtime.RemoteObjectId;
          };
          type getHeapObjectIdReturnValue = {
              /**
               * Id of the heap snapshot object corresponding to the passed remote object id.
               */
              heapSnapshotObjectId: HeapSnapshotObjectId;
          };
          type getObjectByHeapObjectIdParameters = {
              objectId: HeapSnapshotObjectId;
              /**
               * Symbolic group name that can be used to release multiple objects.
               */
              objectGroup?: string;
          };
          type getObjectByHeapObjectIdReturnValue = {
              /**
               * Evaluation result.
               */
              result: Runtime.RemoteObject;
          };
          type getSamplingProfileParameters = {};
          type getSamplingProfileReturnValue = {
              /**
               * Return the sampling profile being collected.
               */
              profile: SamplingHeapProfile;
          };
          type startSamplingParameters = {
              /**
               * Average sample interval in bytes. Poisson distribution is used for the intervals. The
        default value is 32768 bytes.
               */
              samplingInterval?: number;
          };
          type startSamplingReturnValue = {};
          type startTrackingHeapObjectsParameters = {
              trackAllocations?: boolean;
          };
          type startTrackingHeapObjectsReturnValue = {};
          type stopSamplingParameters = {};
          type stopSamplingReturnValue = {
              /**
               * Recorded sampling heap profile.
               */
              profile: SamplingHeapProfile;
          };
          type stopTrackingHeapObjectsParameters = {
              /**
               * If true 'reportHeapSnapshotProgress' events will be generated while snapshot is being taken
        when the tracking is stopped.
               */
              reportProgress?: boolean;
              treatGlobalObjectsAsRoots?: boolean;
          };
          type stopTrackingHeapObjectsReturnValue = {};
          type takeHeapSnapshotParameters = {
              /**
               * If true 'reportHeapSnapshotProgress' events will be generated while snapshot is being taken.
               */
              reportProgress?: boolean;
              /**
               * If true, a raw snapshot without artifical roots will be generated
               */
              treatGlobalObjectsAsRoots?: boolean;
          };
          type takeHeapSnapshotReturnValue = {};
      }
      module Profiler {
          /**
           * Profile node. Holds callsite information, execution statistics and child nodes.
           */
          interface ProfileNode {
              /**
               * Unique id of the node.
               */
              id: number;
              /**
               * Function location.
               */
              callFrame: Runtime.CallFrame;
              /**
               * Number of samples where this node was on top of the call stack.
               */
              hitCount?: number;
              /**
               * Child node ids.
               */
              children?: number[];
              /**
               * The reason of being not optimized. The function may be deoptimized or marked as don't
        optimize.
               */
              deoptReason?: string;
              /**
               * An array of source position ticks.
               */
              positionTicks?: PositionTickInfo[];
          }
          /**
           * Profile.
           */
          interface Profile {
              /**
               * The list of profile nodes. First item is the root node.
               */
              nodes: ProfileNode[];
              /**
               * Profiling start timestamp in microseconds.
               */
              startTime: number;
              /**
               * Profiling end timestamp in microseconds.
               */
              endTime: number;
              /**
               * Ids of samples top nodes.
               */
              samples?: number[];
              /**
               * Time intervals between adjacent samples in microseconds. The first delta is relative to the
        profile startTime.
               */
              timeDeltas?: number[];
          }
          /**
           * Specifies a number of samples attributed to a certain source position.
           */
          interface PositionTickInfo {
              /**
               * Source line number (1-based).
               */
              line: number;
              /**
               * Number of samples attributed to the source line.
               */
              ticks: number;
          }
          /**
           * Coverage data for a source range.
           */
          interface CoverageRange {
              /**
               * JavaScript script source offset for the range start.
               */
              startOffset: number;
              /**
               * JavaScript script source offset for the range end.
               */
              endOffset: number;
              /**
               * Collected execution count of the source range.
               */
              count: number;
          }
          /**
           * Coverage data for a JavaScript function.
           */
          interface FunctionCoverage {
              /**
               * JavaScript function name.
               */
              functionName: string;
              /**
               * Source ranges inside the function with coverage data.
               */
              ranges: CoverageRange[];
              /**
               * Whether coverage data for this function has block granularity.
               */
              isBlockCoverage: boolean;
          }
          /**
           * Coverage data for a JavaScript script.
           */
          interface ScriptCoverage {
              /**
               * JavaScript script id.
               */
              scriptId: Runtime.ScriptId;
              /**
               * JavaScript script name or url.
               */
              url: string;
              /**
               * Functions contained in the script that has coverage data.
               */
              functions: FunctionCoverage[];
          }
          /**
           * Describes a type collected during runtime.
           */
          interface TypeObject {
              /**
               * Name of a type collected with type profiling.
               */
              name: string;
          }
          /**
           * Source offset and types for a parameter or return value.
           */
          interface TypeProfileEntry {
              /**
               * Source offset of the parameter or end of function for return values.
               */
              offset: number;
              /**
               * The types for this parameter or return value.
               */
              types: TypeObject[];
          }
          /**
           * Type profile data collected during runtime for a JavaScript script.
           */
          interface ScriptTypeProfile {
              /**
               * JavaScript script id.
               */
              scriptId: Runtime.ScriptId;
              /**
               * JavaScript script name or url.
               */
              url: string;
              /**
               * Type profile entries for parameters and return values of the functions in the script.
               */
              entries: TypeProfileEntry[];
          }
          /**
           * Collected counter information.
           */
          interface CounterInfo {
              /**
               * Counter name.
               */
              name: string;
              /**
               * Counter value.
               */
              value: number;
          }
          type consoleProfileFinishedPayload = {
              id: string;
              /**
               * Location of console.profileEnd().
               */
              location: Debugger.Location;
              profile: Profile;
              /**
               * Profile title passed as an argument to console.profile().
               */
              title?: string;
          };
          /**
           * Sent when new profile recording is started using console.profile() call.
           */
          type consoleProfileStartedPayload = {
              id: string;
              /**
               * Location of console.profile().
               */
              location: Debugger.Location;
              /**
               * Profile title passed as an argument to console.profile().
               */
              title?: string;
          };
          /**
           * Reports coverage delta since the last poll (either from an event like this, or from
      `takePreciseCoverage` for the current isolate. May only be sent if precise code
      coverage has been started. This event can be trigged by the embedder to, for example,
      trigger collection of coverage data immediatelly at a certain point in time.
           */
          type preciseCoverageDeltaUpdatePayload = {
              /**
               * Monotonically increasing time (in seconds) when the coverage update was taken in the backend.
               */
              timestamp: number;
              /**
               * Identifier for distinguishing coverage events.
               */
              occassion: string;
              /**
               * Coverage data for the current isolate.
               */
              result: ScriptCoverage[];
          };
          type disableParameters = {};
          type disableReturnValue = {};
          type enableParameters = {};
          type enableReturnValue = {};
          /**
           * Collect coverage data for the current isolate. The coverage data may be incomplete due to
      garbage collection.
           */
          type getBestEffortCoverageParameters = {};
          type getBestEffortCoverageReturnValue = {
              /**
               * Coverage data for the current isolate.
               */
              result: ScriptCoverage[];
          };
          /**
           * Changes CPU profiler sampling interval. Must be called before CPU profiles recording started.
           */
          type setSamplingIntervalParameters = {
              /**
               * New sampling interval in microseconds.
               */
              interval: number;
          };
          type setSamplingIntervalReturnValue = {};
          type startParameters = {};
          type startReturnValue = {};
          /**
           * Enable precise code coverage. Coverage data for JavaScript executed before enabling precise code
      coverage may be incomplete. Enabling prevents running optimized code and resets execution
      counters.
           */
          type startPreciseCoverageParameters = {
              /**
               * Collect accurate call counts beyond simple 'covered' or 'not covered'.
               */
              callCount?: boolean;
              /**
               * Collect block-based coverage.
               */
              detailed?: boolean;
              /**
               * Allow the backend to send updates on its own initiative
               */
              allowTriggeredUpdates?: boolean;
          };
          type startPreciseCoverageReturnValue = {
              /**
               * Monotonically increasing time (in seconds) when the coverage update was taken in the backend.
               */
              timestamp: number;
          };
          /**
           * Enable type profile.
           */
          type startTypeProfileParameters = {};
          type startTypeProfileReturnValue = {};
          type stopParameters = {};
          type stopReturnValue = {
              /**
               * Recorded profile.
               */
              profile: Profile;
          };
          /**
           * Disable precise code coverage. Disabling releases unnecessary execution count records and allows
      executing optimized code.
           */
          type stopPreciseCoverageParameters = {};
          type stopPreciseCoverageReturnValue = {};
          /**
           * Disable type profile. Disabling releases type profile data collected so far.
           */
          type stopTypeProfileParameters = {};
          type stopTypeProfileReturnValue = {};
          /**
           * Collect coverage data for the current isolate, and resets execution counters. Precise code
      coverage needs to have started.
           */
          type takePreciseCoverageParameters = {};
          type takePreciseCoverageReturnValue = {
              /**
               * Coverage data for the current isolate.
               */
              result: ScriptCoverage[];
              /**
               * Monotonically increasing time (in seconds) when the coverage update was taken in the backend.
               */
              timestamp: number;
          };
          /**
           * Collect type profile.
           */
          type takeTypeProfileParameters = {};
          type takeTypeProfileReturnValue = {
              /**
               * Type profile for all scripts since startTypeProfile() was turned on.
               */
              result: ScriptTypeProfile[];
          };
          /**
           * Enable run time call stats collection.
           */
          type enableRuntimeCallStatsParameters = {};
          type enableRuntimeCallStatsReturnValue = {};
          /**
           * Disable run time call stats collection.
           */
          type disableRuntimeCallStatsParameters = {};
          type disableRuntimeCallStatsReturnValue = {};
          /**
           * Retrieve run time call stats.
           */
          type getRuntimeCallStatsParameters = {};
          type getRuntimeCallStatsReturnValue = {
              /**
               * Collected counter information.
               */
              result: CounterInfo[];
          };
      }
      /**
       * Runtime domain exposes JavaScript runtime by means of remote evaluation and mirror objects.
    Evaluation results are returned as mirror object that expose object type, string representation
    and unique identifier that can be used for further object reference. Original objects are
    maintained in memory unless they are either explicitly released or are released along with the
    other objects in their object group.
       */
      module Runtime {
          /**
           * Unique script identifier.
           */
          type ScriptId = string;
          /**
           * Unique object identifier.
           */
          type RemoteObjectId = string;
          /**
           * Primitive value which cannot be JSON-stringified. Includes values `-0`, `NaN`, `Infinity`,
      `-Infinity`, and bigint literals.
           */
          type UnserializableValue = string;
          /**
           * Mirror object referencing original JavaScript object.
           */
          interface RemoteObject {
              /**
               * Object type.
               */
              type: "object" | "function" | "undefined" | "string" | "number" | "boolean" | "symbol" | "bigint";
              /**
               * Object subtype hint. Specified for `object` type values only.
               */
              subtype?: "array" | "null" | "node" | "regexp" | "date" | "map" | "set" | "weakmap" | "weakset" | "iterator" | "generator" | "error" | "proxy" | "promise" | "typedarray" | "arraybuffer" | "dataview";
              /**
               * Object class (constructor) name. Specified for `object` type values only.
               */
              className?: string;
              /**
               * Remote object value in case of primitive values or JSON values (if it was requested).
               */
              value?: any;
              /**
               * Primitive value which can not be JSON-stringified does not have `value`, but gets this
        property.
               */
              unserializableValue?: UnserializableValue;
              /**
               * String representation of the object.
               */
              description?: string;
              /**
               * Unique object identifier (for non-primitive values).
               */
              objectId?: RemoteObjectId;
              /**
               * Preview containing abbreviated property values. Specified for `object` type values only.
               */
              preview?: ObjectPreview;
              customPreview?: CustomPreview;
          }
          interface CustomPreview {
              /**
               * The JSON-stringified result of formatter.header(object, config) call.
        It contains json ML array that represents RemoteObject.
               */
              header: string;
              /**
               * If formatter returns true as a result of formatter.hasBody call then bodyGetterId will
        contain RemoteObjectId for the function that returns result of formatter.body(object, config) call.
        The result value is json ML array.
               */
              bodyGetterId?: RemoteObjectId;
          }
          /**
           * Object containing abbreviated remote object value.
           */
          interface ObjectPreview {
              /**
               * Object type.
               */
              type: "object" | "function" | "undefined" | "string" | "number" | "boolean" | "symbol" | "bigint";
              /**
               * Object subtype hint. Specified for `object` type values only.
               */
              subtype?: "array" | "null" | "node" | "regexp" | "date" | "map" | "set" | "weakmap" | "weakset" | "iterator" | "generator" | "error";
              /**
               * String representation of the object.
               */
              description?: string;
              /**
               * True iff some of the properties or entries of the original object did not fit.
               */
              overflow: boolean;
              /**
               * List of the properties.
               */
              properties: PropertyPreview[];
              /**
               * List of the entries. Specified for `map` and `set` subtype values only.
               */
              entries?: EntryPreview[];
          }
          interface PropertyPreview {
              /**
               * Property name.
               */
              name: string;
              /**
               * Object type. Accessor means that the property itself is an accessor property.
               */
              type: "object" | "function" | "undefined" | "string" | "number" | "boolean" | "symbol" | "accessor" | "bigint";
              /**
               * User-friendly property value string.
               */
              value?: string;
              /**
               * Nested value preview.
               */
              valuePreview?: ObjectPreview;
              /**
               * Object subtype hint. Specified for `object` type values only.
               */
              subtype?: "array" | "null" | "node" | "regexp" | "date" | "map" | "set" | "weakmap" | "weakset" | "iterator" | "generator" | "error";
          }
          interface EntryPreview {
              /**
               * Preview of the key. Specified for map-like collection entries.
               */
              key?: ObjectPreview;
              /**
               * Preview of the value.
               */
              value: ObjectPreview;
          }
          /**
           * Object property descriptor.
           */
          interface PropertyDescriptor {
              /**
               * Property name or symbol description.
               */
              name: string;
              /**
               * The value associated with the property.
               */
              value?: RemoteObject;
              /**
               * True if the value associated with the property may be changed (data descriptors only).
               */
              writable?: boolean;
              /**
               * A function which serves as a getter for the property, or `undefined` if there is no getter
        (accessor descriptors only).
               */
              get?: RemoteObject;
              /**
               * A function which serves as a setter for the property, or `undefined` if there is no setter
        (accessor descriptors only).
               */
              set?: RemoteObject;
              /**
               * True if the type of this property descriptor may be changed and if the property may be
        deleted from the corresponding object.
               */
              configurable: boolean;
              /**
               * True if this property shows up during enumeration of the properties on the corresponding
        object.
               */
              enumerable: boolean;
              /**
               * True if the result was thrown during the evaluation.
               */
              wasThrown?: boolean;
              /**
               * True if the property is owned for the object.
               */
              isOwn?: boolean;
              /**
               * Property symbol object, if the property is of the `symbol` type.
               */
              symbol?: RemoteObject;
          }
          /**
           * Object internal property descriptor. This property isn't normally visible in JavaScript code.
           */
          interface InternalPropertyDescriptor {
              /**
               * Conventional property name.
               */
              name: string;
              /**
               * The value associated with the property.
               */
              value?: RemoteObject;
          }
          /**
           * Object private field descriptor.
           */
          interface PrivatePropertyDescriptor {
              /**
               * Private property name.
               */
              name: string;
              /**
               * The value associated with the private property.
               */
              value?: RemoteObject;
              /**
               * A function which serves as a getter for the private property,
        or `undefined` if there is no getter (accessor descriptors only).
               */
              get?: RemoteObject;
              /**
               * A function which serves as a setter for the private property,
        or `undefined` if there is no setter (accessor descriptors only).
               */
              set?: RemoteObject;
          }
          /**
           * Represents function call argument. Either remote object id `objectId`, primitive `value`,
      unserializable primitive value or neither of (for undefined) them should be specified.
           */
          interface CallArgument {
              /**
               * Primitive value or serializable javascript object.
               */
              value?: any;
              /**
               * Primitive value which can not be JSON-stringified.
               */
              unserializableValue?: UnserializableValue;
              /**
               * Remote object handle.
               */
              objectId?: RemoteObjectId;
          }
          /**
           * Id of an execution context.
           */
          type ExecutionContextId = number;
          /**
           * Description of an isolated world.
           */
          interface ExecutionContextDescription {
              /**
               * Unique id of the execution context. It can be used to specify in which execution context
        script evaluation should be performed.
               */
              id: ExecutionContextId;
              /**
               * Execution context origin.
               */
              origin: string;
              /**
               * Human readable name describing given context.
               */
              name: string;
              /**
               * Embedder-specific auxiliary data.
               */
              auxData?: {
                  [key: string]: string;
              };
          }
          /**
           * Detailed information about exception (or error) that was thrown during script compilation or
      execution.
           */
          interface ExceptionDetails {
              /**
               * Exception id.
               */
              exceptionId: number;
              /**
               * Exception text, which should be used together with exception object when available.
               */
              text: string;
              /**
               * Line number of the exception location (0-based).
               */
              lineNumber: number;
              /**
               * Column number of the exception location (0-based).
               */
              columnNumber: number;
              /**
               * Script ID of the exception location.
               */
              scriptId?: ScriptId;
              /**
               * URL of the exception location, to be used when the script was not reported.
               */
              url?: string;
              /**
               * JavaScript stack trace if available.
               */
              stackTrace?: StackTrace;
              /**
               * Exception object if available.
               */
              exception?: RemoteObject;
              /**
               * Identifier of the context where exception happened.
               */
              executionContextId?: ExecutionContextId;
          }
          /**
           * Number of milliseconds since epoch.
           */
          type Timestamp = number;
          /**
           * Number of milliseconds.
           */
          type TimeDelta = number;
          /**
           * Stack entry for runtime errors and assertions.
           */
          interface CallFrame {
              /**
               * JavaScript function name.
               */
              functionName: string;
              /**
               * JavaScript script id.
               */
              scriptId: ScriptId;
              /**
               * JavaScript script name or url.
               */
              url: string;
              /**
               * JavaScript script line number (0-based).
               */
              lineNumber: number;
              /**
               * JavaScript script column number (0-based).
               */
              columnNumber: number;
          }
          /**
           * Call frames for assertions or error messages.
           */
          interface StackTrace {
              /**
               * String label of this stack trace. For async traces this may be a name of the function that
        initiated the async call.
               */
              description?: string;
              /**
               * JavaScript function name.
               */
              callFrames: CallFrame[];
              /**
               * Asynchronous JavaScript stack trace that preceded this stack, if available.
               */
              parent?: StackTrace;
              /**
               * Asynchronous JavaScript stack trace that preceded this stack, if available.
               */
              parentId?: StackTraceId;
          }
          /**
           * Unique identifier of current debugger.
           */
          type UniqueDebuggerId = string;
          /**
           * If `debuggerId` is set stack trace comes from another debugger and can be resolved there. This
      allows to track cross-debugger calls. See `Runtime.StackTrace` and `Debugger.paused` for usages.
           */
          interface StackTraceId {
              id: string;
              debuggerId?: UniqueDebuggerId;
          }
          /**
           * Notification is issued every time when binding is called.
           */
          type bindingCalledPayload = {
              name: string;
              payload: string;
              /**
               * Identifier of the context where the call was made.
               */
              executionContextId: ExecutionContextId;
          };
          /**
           * Issued when console API was called.
           */
          type consoleAPICalledPayload = {
              /**
               * Type of the call.
               */
              type: "log" | "debug" | "info" | "error" | "warning" | "dir" | "dirxml" | "table" | "trace" | "clear" | "startGroup" | "startGroupCollapsed" | "endGroup" | "assert" | "profile" | "profileEnd" | "count" | "timeEnd";
              /**
               * Call arguments.
               */
              args: RemoteObject[];
              /**
               * Identifier of the context where the call was made.
               */
              executionContextId: ExecutionContextId;
              /**
               * Call timestamp.
               */
              timestamp: Timestamp;
              /**
               * Stack trace captured when the call was made. The async stack chain is automatically reported for
        the following call types: `assert`, `error`, `trace`, `warning`. For other types the async call
        chain can be retrieved using `Debugger.getStackTrace` and `stackTrace.parentId` field.
               */
              stackTrace?: StackTrace;
              /**
               * Console context descriptor for calls on non-default console context (not console.*):
        'anonymous#unique-logger-id' for call on unnamed context, 'name#unique-logger-id' for call
        on named context.
               */
              context?: string;
          };
          /**
           * Issued when unhandled exception was revoked.
           */
          type exceptionRevokedPayload = {
              /**
               * Reason describing why exception was revoked.
               */
              reason: string;
              /**
               * The id of revoked exception, as reported in `exceptionThrown`.
               */
              exceptionId: number;
          };
          /**
           * Issued when exception was thrown and unhandled.
           */
          type exceptionThrownPayload = {
              /**
               * Timestamp of the exception.
               */
              timestamp: Timestamp;
              exceptionDetails: ExceptionDetails;
          };
          /**
           * Issued when new execution context is created.
           */
          type executionContextCreatedPayload = {
              /**
               * A newly created execution context.
               */
              context: ExecutionContextDescription;
          };
          /**
           * Issued when execution context is destroyed.
           */
          type executionContextDestroyedPayload = {
              /**
               * Id of the destroyed context
               */
              executionContextId: ExecutionContextId;
          };
          /**
           * Issued when all executionContexts were cleared in browser
           */
          type executionContextsClearedPayload = void;
          /**
           * Issued when object should be inspected (for example, as a result of inspect() command line API
      call).
           */
          type inspectRequestedPayload = {
              object: RemoteObject;
              hints: {
                  [key: string]: string;
              };
          };
          /**
           * Add handler to promise with given promise object id.
           */
          type awaitPromiseParameters = {
              /**
               * Identifier of the promise.
               */
              promiseObjectId: RemoteObjectId;
              /**
               * Whether the result is expected to be a JSON object that should be sent by value.
               */
              returnByValue?: boolean;
              /**
               * Whether preview should be generated for the result.
               */
              generatePreview?: boolean;
          };
          type awaitPromiseReturnValue = {
              /**
               * Promise result. Will contain rejected value if promise was rejected.
               */
              result: RemoteObject;
              /**
               * Exception details if stack strace is available.
               */
              exceptionDetails?: ExceptionDetails;
          };
          /**
           * Calls function with given declaration on the given object. Object group of the result is
      inherited from the target object.
           */
          type callFunctionOnParameters = {
              /**
               * Declaration of the function to call.
               */
              functionDeclaration: string;
              /**
               * Identifier of the object to call function on. Either objectId or executionContextId should
        be specified.
               */
              objectId?: RemoteObjectId;
              /**
               * Call arguments. All call arguments must belong to the same JavaScript world as the target
        object.
               */
              arguments?: CallArgument[];
              /**
               * In silent mode exceptions thrown during evaluation are not reported and do not pause
        execution. Overrides `setPauseOnException` state.
               */
              silent?: boolean;
              /**
               * Whether the result is expected to be a JSON object which should be sent by value.
               */
              returnByValue?: boolean;
              /**
               * Whether preview should be generated for the result.
               */
              generatePreview?: boolean;
              /**
               * Whether execution should be treated as initiated by user in the UI.
               */
              userGesture?: boolean;
              /**
               * Whether execution should `await` for resulting value and return once awaited promise is
        resolved.
               */
              awaitPromise?: boolean;
              /**
               * Specifies execution context which global object will be used to call function on. Either
        executionContextId or objectId should be specified.
               */
              executionContextId?: ExecutionContextId;
              /**
               * Symbolic group name that can be used to release multiple objects. If objectGroup is not
        specified and objectId is, objectGroup will be inherited from object.
               */
              objectGroup?: string;
          };
          type callFunctionOnReturnValue = {
              /**
               * Call result.
               */
              result: RemoteObject;
              /**
               * Exception details.
               */
              exceptionDetails?: ExceptionDetails;
          };
          /**
           * Compiles expression.
           */
          type compileScriptParameters = {
              /**
               * Expression to compile.
               */
              expression: string;
              /**
               * Source url to be set for the script.
               */
              sourceURL: string;
              /**
               * Specifies whether the compiled script should be persisted.
               */
              persistScript: boolean;
              /**
               * Specifies in which execution context to perform script run. If the parameter is omitted the
        evaluation will be performed in the context of the inspected page.
               */
              executionContextId?: ExecutionContextId;
          };
          type compileScriptReturnValue = {
              /**
               * Id of the script.
               */
              scriptId?: ScriptId;
              /**
               * Exception details.
               */
              exceptionDetails?: ExceptionDetails;
          };
          /**
           * Disables reporting of execution contexts creation.
           */
          type disableParameters = {};
          type disableReturnValue = {};
          /**
           * Discards collected exceptions and console API calls.
           */
          type discardConsoleEntriesParameters = {};
          type discardConsoleEntriesReturnValue = {};
          /**
           * Enables reporting of execution contexts creation by means of `executionContextCreated` event.
      When the reporting gets enabled the event will be sent immediately for each existing execution
      context.
           */
          type enableParameters = {};
          type enableReturnValue = {};
          /**
           * Evaluates expression on global object.
           */
          type evaluateParameters = {
              /**
               * Expression to evaluate.
               */
              expression: string;
              /**
               * Symbolic group name that can be used to release multiple objects.
               */
              objectGroup?: string;
              /**
               * Determines whether Command Line API should be available during the evaluation.
               */
              includeCommandLineAPI?: boolean;
              /**
               * In silent mode exceptions thrown during evaluation are not reported and do not pause
        execution. Overrides `setPauseOnException` state.
               */
              silent?: boolean;
              /**
               * Specifies in which execution context to perform evaluation. If the parameter is omitted the
        evaluation will be performed in the context of the inspected page.
               */
              contextId?: ExecutionContextId;
              /**
               * Whether the result is expected to be a JSON object that should be sent by value.
               */
              returnByValue?: boolean;
              /**
               * Whether preview should be generated for the result.
               */
              generatePreview?: boolean;
              /**
               * Whether execution should be treated as initiated by user in the UI.
               */
              userGesture?: boolean;
              /**
               * Whether execution should `await` for resulting value and return once awaited promise is
        resolved.
               */
              awaitPromise?: boolean;
              /**
               * Whether to throw an exception if side effect cannot be ruled out during evaluation.
        This implies `disableBreaks` below.
               */
              throwOnSideEffect?: boolean;
              /**
               * Terminate execution after timing out (number of milliseconds).
               */
              timeout?: TimeDelta;
              /**
               * Disable breakpoints during execution.
               */
              disableBreaks?: boolean;
              /**
               * Setting this flag to true enables `let` re-declaration and top-level `await`.
        Note that `let` variables can only be re-declared if they originate from
        `replMode` themselves.
               */
              replMode?: boolean;
          };
          type evaluateReturnValue = {
              /**
               * Evaluation result.
               */
              result: RemoteObject;
              /**
               * Exception details.
               */
              exceptionDetails?: ExceptionDetails;
          };
          /**
           * Returns the isolate id.
           */
          type getIsolateIdParameters = {};
          type getIsolateIdReturnValue = {
              /**
               * The isolate id.
               */
              id: string;
          };
          /**
           * Returns the JavaScript heap usage.
      It is the total usage of the corresponding isolate not scoped to a particular Runtime.
           */
          type getHeapUsageParameters = {};
          type getHeapUsageReturnValue = {
              /**
               * Used heap size in bytes.
               */
              usedSize: number;
              /**
               * Allocated heap size in bytes.
               */
              totalSize: number;
          };
          /**
           * Returns properties of a given object. Object group of the result is inherited from the target
      object.
           */
          type getPropertiesParameters = {
              /**
               * Identifier of the object to return properties for.
               */
              objectId: RemoteObjectId;
              /**
               * If true, returns properties belonging only to the element itself, not to its prototype
        chain.
               */
              ownProperties?: boolean;
              /**
               * If true, returns accessor properties (with getter/setter) only; internal properties are not
        returned either.
               */
              accessorPropertiesOnly?: boolean;
              /**
               * Whether preview should be generated for the results.
               */
              generatePreview?: boolean;
          };
          type getPropertiesReturnValue = {
              /**
               * Object properties.
               */
              result: PropertyDescriptor[];
              /**
               * Internal object properties (only of the element itself).
               */
              internalProperties?: InternalPropertyDescriptor[];
              /**
               * Object private properties.
               */
              privateProperties?: PrivatePropertyDescriptor[];
              /**
               * Exception details.
               */
              exceptionDetails?: ExceptionDetails;
          };
          /**
           * Returns all let, const and class variables from global scope.
           */
          type globalLexicalScopeNamesParameters = {
              /**
               * Specifies in which execution context to lookup global scope variables.
               */
              executionContextId?: ExecutionContextId;
          };
          type globalLexicalScopeNamesReturnValue = {
              names: string[];
          };
          type queryObjectsParameters = {
              /**
               * Identifier of the prototype to return objects for.
               */
              prototypeObjectId: RemoteObjectId;
              /**
               * Symbolic group name that can be used to release the results.
               */
              objectGroup?: string;
          };
          type queryObjectsReturnValue = {
              /**
               * Array with objects.
               */
              objects: RemoteObject;
          };
          /**
           * Releases remote object with given id.
           */
          type releaseObjectParameters = {
              /**
               * Identifier of the object to release.
               */
              objectId: RemoteObjectId;
          };
          type releaseObjectReturnValue = {};
          /**
           * Releases all remote objects that belong to a given group.
           */
          type releaseObjectGroupParameters = {
              /**
               * Symbolic object group name.
               */
              objectGroup: string;
          };
          type releaseObjectGroupReturnValue = {};
          /**
           * Tells inspected instance to run if it was waiting for debugger to attach.
           */
          type runIfWaitingForDebuggerParameters = {};
          type runIfWaitingForDebuggerReturnValue = {};
          /**
           * Runs script with given id in a given context.
           */
          type runScriptParameters = {
              /**
               * Id of the script to run.
               */
              scriptId: ScriptId;
              /**
               * Specifies in which execution context to perform script run. If the parameter is omitted the
        evaluation will be performed in the context of the inspected page.
               */
              executionContextId?: ExecutionContextId;
              /**
               * Symbolic group name that can be used to release multiple objects.
               */
              objectGroup?: string;
              /**
               * In silent mode exceptions thrown during evaluation are not reported and do not pause
        execution. Overrides `setPauseOnException` state.
               */
              silent?: boolean;
              /**
               * Determines whether Command Line API should be available during the evaluation.
               */
              includeCommandLineAPI?: boolean;
              /**
               * Whether the result is expected to be a JSON object which should be sent by value.
               */
              returnByValue?: boolean;
              /**
               * Whether preview should be generated for the result.
               */
              generatePreview?: boolean;
              /**
               * Whether execution should `await` for resulting value and return once awaited promise is
        resolved.
               */
              awaitPromise?: boolean;
          };
          type runScriptReturnValue = {
              /**
               * Run result.
               */
              result: RemoteObject;
              /**
               * Exception details.
               */
              exceptionDetails?: ExceptionDetails;
          };
          /**
           * Enables or disables async call stacks tracking.
           */
          type setAsyncCallStackDepthParameters = {
              /**
               * Maximum depth of async call stacks. Setting to `0` will effectively disable collecting async
        call stacks (default).
               */
              maxDepth: number;
          };
          type setAsyncCallStackDepthReturnValue = {};
          type setCustomObjectFormatterEnabledParameters = {
              enabled: boolean;
          };
          type setCustomObjectFormatterEnabledReturnValue = {};
          type setMaxCallStackSizeToCaptureParameters = {
              size: number;
          };
          type setMaxCallStackSizeToCaptureReturnValue = {};
          /**
           * Terminate current or next JavaScript execution.
      Will cancel the termination when the outer-most script execution ends.
           */
          type terminateExecutionParameters = {};
          type terminateExecutionReturnValue = {};
          /**
           * If executionContextId is empty, adds binding with the given name on the
      global objects of all inspected contexts, including those created later,
      bindings survive reloads.
      If executionContextId is specified, adds binding only on global object of
      given execution context.
      Binding function takes exactly one argument, this argument should be string,
      in case of any other input, function throws an exception.
      Each binding function call produces Runtime.bindingCalled notification.
           */
          type addBindingParameters = {
              name: string;
              executionContextId?: ExecutionContextId;
          };
          type addBindingReturnValue = {};
          /**
           * This method does not remove binding function from global object but
      unsubscribes current runtime agent from Runtime.bindingCalled notifications.
           */
          type removeBindingParameters = {
              name: string;
          };
          type removeBindingReturnValue = {};
      }
      /**
       * This domain is deprecated.
       */
      module Schema {
          /**
           * Description of the protocol domain.
           */
          interface Domain {
              /**
               * Domain name.
               */
              name: string;
              /**
               * Domain version.
               */
              version: string;
          }
          /**
           * Returns supported domains.
           */
          type getDomainsParameters = {};
          type getDomainsReturnValue = {
              /**
               * List of supported domains.
               */
              domains: Domain[];
          };
      }
      interface Events {
          "Animation.animationCanceled": Animation.animationCanceledPayload;
          "Animation.animationCreated": Animation.animationCreatedPayload;
          "Animation.animationStarted": Animation.animationStartedPayload;
          "ApplicationCache.applicationCacheStatusUpdated": ApplicationCache.applicationCacheStatusUpdatedPayload;
          "ApplicationCache.networkStateUpdated": ApplicationCache.networkStateUpdatedPayload;
          "Audits.issueAdded": Audits.issueAddedPayload;
          "BackgroundService.recordingStateChanged": BackgroundService.recordingStateChangedPayload;
          "BackgroundService.backgroundServiceEventReceived": BackgroundService.backgroundServiceEventReceivedPayload;
          "CSS.fontsUpdated": CSS.fontsUpdatedPayload;
          "CSS.mediaQueryResultChanged": CSS.mediaQueryResultChangedPayload;
          "CSS.styleSheetAdded": CSS.styleSheetAddedPayload;
          "CSS.styleSheetChanged": CSS.styleSheetChangedPayload;
          "CSS.styleSheetRemoved": CSS.styleSheetRemovedPayload;
          "Cast.sinksUpdated": Cast.sinksUpdatedPayload;
          "Cast.issueUpdated": Cast.issueUpdatedPayload;
          "DOM.attributeModified": DOM.attributeModifiedPayload;
          "DOM.attributeRemoved": DOM.attributeRemovedPayload;
          "DOM.characterDataModified": DOM.characterDataModifiedPayload;
          "DOM.childNodeCountUpdated": DOM.childNodeCountUpdatedPayload;
          "DOM.childNodeInserted": DOM.childNodeInsertedPayload;
          "DOM.childNodeRemoved": DOM.childNodeRemovedPayload;
          "DOM.distributedNodesUpdated": DOM.distributedNodesUpdatedPayload;
          "DOM.documentUpdated": DOM.documentUpdatedPayload;
          "DOM.inlineStyleInvalidated": DOM.inlineStyleInvalidatedPayload;
          "DOM.pseudoElementAdded": DOM.pseudoElementAddedPayload;
          "DOM.pseudoElementRemoved": DOM.pseudoElementRemovedPayload;
          "DOM.setChildNodes": DOM.setChildNodesPayload;
          "DOM.shadowRootPopped": DOM.shadowRootPoppedPayload;
          "DOM.shadowRootPushed": DOM.shadowRootPushedPayload;
          "DOMStorage.domStorageItemAdded": DOMStorage.domStorageItemAddedPayload;
          "DOMStorage.domStorageItemRemoved": DOMStorage.domStorageItemRemovedPayload;
          "DOMStorage.domStorageItemUpdated": DOMStorage.domStorageItemUpdatedPayload;
          "DOMStorage.domStorageItemsCleared": DOMStorage.domStorageItemsClearedPayload;
          "Database.addDatabase": Database.addDatabasePayload;
          "Emulation.virtualTimeBudgetExpired": Emulation.virtualTimeBudgetExpiredPayload;
          "HeadlessExperimental.needsBeginFramesChanged": HeadlessExperimental.needsBeginFramesChangedPayload;
          "Inspector.detached": Inspector.detachedPayload;
          "Inspector.targetCrashed": Inspector.targetCrashedPayload;
          "Inspector.targetReloadedAfterCrash": Inspector.targetReloadedAfterCrashPayload;
          "LayerTree.layerPainted": LayerTree.layerPaintedPayload;
          "LayerTree.layerTreeDidChange": LayerTree.layerTreeDidChangePayload;
          "Log.entryAdded": Log.entryAddedPayload;
          "Network.dataReceived": Network.dataReceivedPayload;
          "Network.eventSourceMessageReceived": Network.eventSourceMessageReceivedPayload;
          "Network.loadingFailed": Network.loadingFailedPayload;
          "Network.loadingFinished": Network.loadingFinishedPayload;
          "Network.requestIntercepted": Network.requestInterceptedPayload;
          "Network.requestServedFromCache": Network.requestServedFromCachePayload;
          "Network.requestWillBeSent": Network.requestWillBeSentPayload;
          "Network.resourceChangedPriority": Network.resourceChangedPriorityPayload;
          "Network.signedExchangeReceived": Network.signedExchangeReceivedPayload;
          "Network.responseReceived": Network.responseReceivedPayload;
          "Network.webSocketClosed": Network.webSocketClosedPayload;
          "Network.webSocketCreated": Network.webSocketCreatedPayload;
          "Network.webSocketFrameError": Network.webSocketFrameErrorPayload;
          "Network.webSocketFrameReceived": Network.webSocketFrameReceivedPayload;
          "Network.webSocketFrameSent": Network.webSocketFrameSentPayload;
          "Network.webSocketHandshakeResponseReceived": Network.webSocketHandshakeResponseReceivedPayload;
          "Network.webSocketWillSendHandshakeRequest": Network.webSocketWillSendHandshakeRequestPayload;
          "Network.requestWillBeSentExtraInfo": Network.requestWillBeSentExtraInfoPayload;
          "Network.responseReceivedExtraInfo": Network.responseReceivedExtraInfoPayload;
          "Overlay.inspectNodeRequested": Overlay.inspectNodeRequestedPayload;
          "Overlay.nodeHighlightRequested": Overlay.nodeHighlightRequestedPayload;
          "Overlay.screenshotRequested": Overlay.screenshotRequestedPayload;
          "Overlay.inspectModeCanceled": Overlay.inspectModeCanceledPayload;
          "Page.domContentEventFired": Page.domContentEventFiredPayload;
          "Page.fileChooserOpened": Page.fileChooserOpenedPayload;
          "Page.frameAttached": Page.frameAttachedPayload;
          "Page.frameClearedScheduledNavigation": Page.frameClearedScheduledNavigationPayload;
          "Page.frameDetached": Page.frameDetachedPayload;
          "Page.frameNavigated": Page.frameNavigatedPayload;
          "Page.frameResized": Page.frameResizedPayload;
          "Page.frameRequestedNavigation": Page.frameRequestedNavigationPayload;
          "Page.frameScheduledNavigation": Page.frameScheduledNavigationPayload;
          "Page.frameStartedLoading": Page.frameStartedLoadingPayload;
          "Page.frameStoppedLoading": Page.frameStoppedLoadingPayload;
          "Page.downloadWillBegin": Page.downloadWillBeginPayload;
          "Page.interstitialHidden": Page.interstitialHiddenPayload;
          "Page.interstitialShown": Page.interstitialShownPayload;
          "Page.javascriptDialogClosed": Page.javascriptDialogClosedPayload;
          "Page.javascriptDialogOpening": Page.javascriptDialogOpeningPayload;
          "Page.lifecycleEvent": Page.lifecycleEventPayload;
          "Page.loadEventFired": Page.loadEventFiredPayload;
          "Page.navigatedWithinDocument": Page.navigatedWithinDocumentPayload;
          "Page.screencastFrame": Page.screencastFramePayload;
          "Page.screencastVisibilityChanged": Page.screencastVisibilityChangedPayload;
          "Page.windowOpen": Page.windowOpenPayload;
          "Page.compilationCacheProduced": Page.compilationCacheProducedPayload;
          "Performance.metrics": Performance.metricsPayload;
          "Security.certificateError": Security.certificateErrorPayload;
          "Security.visibleSecurityStateChanged": Security.visibleSecurityStateChangedPayload;
          "Security.securityStateChanged": Security.securityStateChangedPayload;
          "ServiceWorker.workerErrorReported": ServiceWorker.workerErrorReportedPayload;
          "ServiceWorker.workerRegistrationUpdated": ServiceWorker.workerRegistrationUpdatedPayload;
          "ServiceWorker.workerVersionUpdated": ServiceWorker.workerVersionUpdatedPayload;
          "Storage.cacheStorageContentUpdated": Storage.cacheStorageContentUpdatedPayload;
          "Storage.cacheStorageListUpdated": Storage.cacheStorageListUpdatedPayload;
          "Storage.indexedDBContentUpdated": Storage.indexedDBContentUpdatedPayload;
          "Storage.indexedDBListUpdated": Storage.indexedDBListUpdatedPayload;
          "Target.attachedToTarget": Target.attachedToTargetPayload;
          "Target.detachedFromTarget": Target.detachedFromTargetPayload;
          "Target.receivedMessageFromTarget": Target.receivedMessageFromTargetPayload;
          "Target.targetCreated": Target.targetCreatedPayload;
          "Target.targetDestroyed": Target.targetDestroyedPayload;
          "Target.targetCrashed": Target.targetCrashedPayload;
          "Target.targetInfoChanged": Target.targetInfoChangedPayload;
          "Tethering.accepted": Tethering.acceptedPayload;
          "Tracing.bufferUsage": Tracing.bufferUsagePayload;
          "Tracing.dataCollected": Tracing.dataCollectedPayload;
          "Tracing.tracingComplete": Tracing.tracingCompletePayload;
          "Fetch.requestPaused": Fetch.requestPausedPayload;
          "Fetch.authRequired": Fetch.authRequiredPayload;
          "WebAudio.contextCreated": WebAudio.contextCreatedPayload;
          "WebAudio.contextWillBeDestroyed": WebAudio.contextWillBeDestroyedPayload;
          "WebAudio.contextChanged": WebAudio.contextChangedPayload;
          "WebAudio.audioListenerCreated": WebAudio.audioListenerCreatedPayload;
          "WebAudio.audioListenerWillBeDestroyed": WebAudio.audioListenerWillBeDestroyedPayload;
          "WebAudio.audioNodeCreated": WebAudio.audioNodeCreatedPayload;
          "WebAudio.audioNodeWillBeDestroyed": WebAudio.audioNodeWillBeDestroyedPayload;
          "WebAudio.audioParamCreated": WebAudio.audioParamCreatedPayload;
          "WebAudio.audioParamWillBeDestroyed": WebAudio.audioParamWillBeDestroyedPayload;
          "WebAudio.nodesConnected": WebAudio.nodesConnectedPayload;
          "WebAudio.nodesDisconnected": WebAudio.nodesDisconnectedPayload;
          "WebAudio.nodeParamConnected": WebAudio.nodeParamConnectedPayload;
          "WebAudio.nodeParamDisconnected": WebAudio.nodeParamDisconnectedPayload;
          "Media.playerPropertiesChanged": Media.playerPropertiesChangedPayload;
          "Media.playerEventsAdded": Media.playerEventsAddedPayload;
          "Media.playersCreated": Media.playersCreatedPayload;
          "Console.messageAdded": Console.messageAddedPayload;
          "Debugger.breakpointResolved": Debugger.breakpointResolvedPayload;
          "Debugger.paused": Debugger.pausedPayload;
          "Debugger.resumed": Debugger.resumedPayload;
          "Debugger.scriptFailedToParse": Debugger.scriptFailedToParsePayload;
          "Debugger.scriptParsed": Debugger.scriptParsedPayload;
          "HeapProfiler.addHeapSnapshotChunk": HeapProfiler.addHeapSnapshotChunkPayload;
          "HeapProfiler.heapStatsUpdate": HeapProfiler.heapStatsUpdatePayload;
          "HeapProfiler.lastSeenObjectId": HeapProfiler.lastSeenObjectIdPayload;
          "HeapProfiler.reportHeapSnapshotProgress": HeapProfiler.reportHeapSnapshotProgressPayload;
          "HeapProfiler.resetProfiles": HeapProfiler.resetProfilesPayload;
          "Profiler.consoleProfileFinished": Profiler.consoleProfileFinishedPayload;
          "Profiler.consoleProfileStarted": Profiler.consoleProfileStartedPayload;
          "Profiler.preciseCoverageDeltaUpdate": Profiler.preciseCoverageDeltaUpdatePayload;
          "Runtime.bindingCalled": Runtime.bindingCalledPayload;
          "Runtime.consoleAPICalled": Runtime.consoleAPICalledPayload;
          "Runtime.exceptionRevoked": Runtime.exceptionRevokedPayload;
          "Runtime.exceptionThrown": Runtime.exceptionThrownPayload;
          "Runtime.executionContextCreated": Runtime.executionContextCreatedPayload;
          "Runtime.executionContextDestroyed": Runtime.executionContextDestroyedPayload;
          "Runtime.executionContextsCleared": Runtime.executionContextsClearedPayload;
          "Runtime.inspectRequested": Runtime.inspectRequestedPayload;
      }
      interface CommandParameters {
          "Accessibility.disable": Accessibility.disableParameters;
          "Accessibility.enable": Accessibility.enableParameters;
          "Accessibility.getPartialAXTree": Accessibility.getPartialAXTreeParameters;
          "Accessibility.getFullAXTree": Accessibility.getFullAXTreeParameters;
          "Animation.disable": Animation.disableParameters;
          "Animation.enable": Animation.enableParameters;
          "Animation.getCurrentTime": Animation.getCurrentTimeParameters;
          "Animation.getPlaybackRate": Animation.getPlaybackRateParameters;
          "Animation.releaseAnimations": Animation.releaseAnimationsParameters;
          "Animation.resolveAnimation": Animation.resolveAnimationParameters;
          "Animation.seekAnimations": Animation.seekAnimationsParameters;
          "Animation.setPaused": Animation.setPausedParameters;
          "Animation.setPlaybackRate": Animation.setPlaybackRateParameters;
          "Animation.setTiming": Animation.setTimingParameters;
          "ApplicationCache.enable": ApplicationCache.enableParameters;
          "ApplicationCache.getApplicationCacheForFrame": ApplicationCache.getApplicationCacheForFrameParameters;
          "ApplicationCache.getFramesWithManifests": ApplicationCache.getFramesWithManifestsParameters;
          "ApplicationCache.getManifestForFrame": ApplicationCache.getManifestForFrameParameters;
          "Audits.getEncodedResponse": Audits.getEncodedResponseParameters;
          "Audits.disable": Audits.disableParameters;
          "Audits.enable": Audits.enableParameters;
          "BackgroundService.startObserving": BackgroundService.startObservingParameters;
          "BackgroundService.stopObserving": BackgroundService.stopObservingParameters;
          "BackgroundService.setRecording": BackgroundService.setRecordingParameters;
          "BackgroundService.clearEvents": BackgroundService.clearEventsParameters;
          "Browser.setPermission": Browser.setPermissionParameters;
          "Browser.grantPermissions": Browser.grantPermissionsParameters;
          "Browser.resetPermissions": Browser.resetPermissionsParameters;
          "Browser.close": Browser.closeParameters;
          "Browser.crash": Browser.crashParameters;
          "Browser.crashGpuProcess": Browser.crashGpuProcessParameters;
          "Browser.getVersion": Browser.getVersionParameters;
          "Browser.getBrowserCommandLine": Browser.getBrowserCommandLineParameters;
          "Browser.getHistograms": Browser.getHistogramsParameters;
          "Browser.getHistogram": Browser.getHistogramParameters;
          "Browser.getWindowBounds": Browser.getWindowBoundsParameters;
          "Browser.getWindowForTarget": Browser.getWindowForTargetParameters;
          "Browser.setWindowBounds": Browser.setWindowBoundsParameters;
          "Browser.setDockTile": Browser.setDockTileParameters;
          "CSS.addRule": CSS.addRuleParameters;
          "CSS.collectClassNames": CSS.collectClassNamesParameters;
          "CSS.createStyleSheet": CSS.createStyleSheetParameters;
          "CSS.disable": CSS.disableParameters;
          "CSS.enable": CSS.enableParameters;
          "CSS.forcePseudoState": CSS.forcePseudoStateParameters;
          "CSS.getBackgroundColors": CSS.getBackgroundColorsParameters;
          "CSS.getComputedStyleForNode": CSS.getComputedStyleForNodeParameters;
          "CSS.getInlineStylesForNode": CSS.getInlineStylesForNodeParameters;
          "CSS.getMatchedStylesForNode": CSS.getMatchedStylesForNodeParameters;
          "CSS.getMediaQueries": CSS.getMediaQueriesParameters;
          "CSS.getPlatformFontsForNode": CSS.getPlatformFontsForNodeParameters;
          "CSS.getStyleSheetText": CSS.getStyleSheetTextParameters;
          "CSS.setEffectivePropertyValueForNode": CSS.setEffectivePropertyValueForNodeParameters;
          "CSS.setKeyframeKey": CSS.setKeyframeKeyParameters;
          "CSS.setMediaText": CSS.setMediaTextParameters;
          "CSS.setRuleSelector": CSS.setRuleSelectorParameters;
          "CSS.setStyleSheetText": CSS.setStyleSheetTextParameters;
          "CSS.setStyleTexts": CSS.setStyleTextsParameters;
          "CSS.startRuleUsageTracking": CSS.startRuleUsageTrackingParameters;
          "CSS.stopRuleUsageTracking": CSS.stopRuleUsageTrackingParameters;
          "CSS.takeCoverageDelta": CSS.takeCoverageDeltaParameters;
          "CacheStorage.deleteCache": CacheStorage.deleteCacheParameters;
          "CacheStorage.deleteEntry": CacheStorage.deleteEntryParameters;
          "CacheStorage.requestCacheNames": CacheStorage.requestCacheNamesParameters;
          "CacheStorage.requestCachedResponse": CacheStorage.requestCachedResponseParameters;
          "CacheStorage.requestEntries": CacheStorage.requestEntriesParameters;
          "Cast.enable": Cast.enableParameters;
          "Cast.disable": Cast.disableParameters;
          "Cast.setSinkToUse": Cast.setSinkToUseParameters;
          "Cast.startTabMirroring": Cast.startTabMirroringParameters;
          "Cast.stopCasting": Cast.stopCastingParameters;
          "DOM.collectClassNamesFromSubtree": DOM.collectClassNamesFromSubtreeParameters;
          "DOM.copyTo": DOM.copyToParameters;
          "DOM.describeNode": DOM.describeNodeParameters;
          "DOM.scrollIntoViewIfNeeded": DOM.scrollIntoViewIfNeededParameters;
          "DOM.disable": DOM.disableParameters;
          "DOM.discardSearchResults": DOM.discardSearchResultsParameters;
          "DOM.enable": DOM.enableParameters;
          "DOM.focus": DOM.focusParameters;
          "DOM.getAttributes": DOM.getAttributesParameters;
          "DOM.getBoxModel": DOM.getBoxModelParameters;
          "DOM.getContentQuads": DOM.getContentQuadsParameters;
          "DOM.getDocument": DOM.getDocumentParameters;
          "DOM.getFlattenedDocument": DOM.getFlattenedDocumentParameters;
          "DOM.getNodeForLocation": DOM.getNodeForLocationParameters;
          "DOM.getOuterHTML": DOM.getOuterHTMLParameters;
          "DOM.getRelayoutBoundary": DOM.getRelayoutBoundaryParameters;
          "DOM.getSearchResults": DOM.getSearchResultsParameters;
          "DOM.hideHighlight": DOM.hideHighlightParameters;
          "DOM.highlightNode": DOM.highlightNodeParameters;
          "DOM.highlightRect": DOM.highlightRectParameters;
          "DOM.markUndoableState": DOM.markUndoableStateParameters;
          "DOM.moveTo": DOM.moveToParameters;
          "DOM.performSearch": DOM.performSearchParameters;
          "DOM.pushNodeByPathToFrontend": DOM.pushNodeByPathToFrontendParameters;
          "DOM.pushNodesByBackendIdsToFrontend": DOM.pushNodesByBackendIdsToFrontendParameters;
          "DOM.querySelector": DOM.querySelectorParameters;
          "DOM.querySelectorAll": DOM.querySelectorAllParameters;
          "DOM.redo": DOM.redoParameters;
          "DOM.removeAttribute": DOM.removeAttributeParameters;
          "DOM.removeNode": DOM.removeNodeParameters;
          "DOM.requestChildNodes": DOM.requestChildNodesParameters;
          "DOM.requestNode": DOM.requestNodeParameters;
          "DOM.resolveNode": DOM.resolveNodeParameters;
          "DOM.setAttributeValue": DOM.setAttributeValueParameters;
          "DOM.setAttributesAsText": DOM.setAttributesAsTextParameters;
          "DOM.setFileInputFiles": DOM.setFileInputFilesParameters;
          "DOM.setNodeStackTracesEnabled": DOM.setNodeStackTracesEnabledParameters;
          "DOM.getNodeStackTraces": DOM.getNodeStackTracesParameters;
          "DOM.getFileInfo": DOM.getFileInfoParameters;
          "DOM.setInspectedNode": DOM.setInspectedNodeParameters;
          "DOM.setNodeName": DOM.setNodeNameParameters;
          "DOM.setNodeValue": DOM.setNodeValueParameters;
          "DOM.setOuterHTML": DOM.setOuterHTMLParameters;
          "DOM.undo": DOM.undoParameters;
          "DOM.getFrameOwner": DOM.getFrameOwnerParameters;
          "DOMDebugger.getEventListeners": DOMDebugger.getEventListenersParameters;
          "DOMDebugger.removeDOMBreakpoint": DOMDebugger.removeDOMBreakpointParameters;
          "DOMDebugger.removeEventListenerBreakpoint": DOMDebugger.removeEventListenerBreakpointParameters;
          "DOMDebugger.removeInstrumentationBreakpoint": DOMDebugger.removeInstrumentationBreakpointParameters;
          "DOMDebugger.removeXHRBreakpoint": DOMDebugger.removeXHRBreakpointParameters;
          "DOMDebugger.setDOMBreakpoint": DOMDebugger.setDOMBreakpointParameters;
          "DOMDebugger.setEventListenerBreakpoint": DOMDebugger.setEventListenerBreakpointParameters;
          "DOMDebugger.setInstrumentationBreakpoint": DOMDebugger.setInstrumentationBreakpointParameters;
          "DOMDebugger.setXHRBreakpoint": DOMDebugger.setXHRBreakpointParameters;
          "DOMSnapshot.disable": DOMSnapshot.disableParameters;
          "DOMSnapshot.enable": DOMSnapshot.enableParameters;
          "DOMSnapshot.getSnapshot": DOMSnapshot.getSnapshotParameters;
          "DOMSnapshot.captureSnapshot": DOMSnapshot.captureSnapshotParameters;
          "DOMStorage.clear": DOMStorage.clearParameters;
          "DOMStorage.disable": DOMStorage.disableParameters;
          "DOMStorage.enable": DOMStorage.enableParameters;
          "DOMStorage.getDOMStorageItems": DOMStorage.getDOMStorageItemsParameters;
          "DOMStorage.removeDOMStorageItem": DOMStorage.removeDOMStorageItemParameters;
          "DOMStorage.setDOMStorageItem": DOMStorage.setDOMStorageItemParameters;
          "Database.disable": Database.disableParameters;
          "Database.enable": Database.enableParameters;
          "Database.executeSQL": Database.executeSQLParameters;
          "Database.getDatabaseTableNames": Database.getDatabaseTableNamesParameters;
          "DeviceOrientation.clearDeviceOrientationOverride": DeviceOrientation.clearDeviceOrientationOverrideParameters;
          "DeviceOrientation.setDeviceOrientationOverride": DeviceOrientation.setDeviceOrientationOverrideParameters;
          "Emulation.canEmulate": Emulation.canEmulateParameters;
          "Emulation.clearDeviceMetricsOverride": Emulation.clearDeviceMetricsOverrideParameters;
          "Emulation.clearGeolocationOverride": Emulation.clearGeolocationOverrideParameters;
          "Emulation.resetPageScaleFactor": Emulation.resetPageScaleFactorParameters;
          "Emulation.setFocusEmulationEnabled": Emulation.setFocusEmulationEnabledParameters;
          "Emulation.setCPUThrottlingRate": Emulation.setCPUThrottlingRateParameters;
          "Emulation.setDefaultBackgroundColorOverride": Emulation.setDefaultBackgroundColorOverrideParameters;
          "Emulation.setDeviceMetricsOverride": Emulation.setDeviceMetricsOverrideParameters;
          "Emulation.setScrollbarsHidden": Emulation.setScrollbarsHiddenParameters;
          "Emulation.setDocumentCookieDisabled": Emulation.setDocumentCookieDisabledParameters;
          "Emulation.setEmitTouchEventsForMouse": Emulation.setEmitTouchEventsForMouseParameters;
          "Emulation.setEmulatedMedia": Emulation.setEmulatedMediaParameters;
          "Emulation.setEmulatedVisionDeficiency": Emulation.setEmulatedVisionDeficiencyParameters;
          "Emulation.setGeolocationOverride": Emulation.setGeolocationOverrideParameters;
          "Emulation.setNavigatorOverrides": Emulation.setNavigatorOverridesParameters;
          "Emulation.setPageScaleFactor": Emulation.setPageScaleFactorParameters;
          "Emulation.setScriptExecutionDisabled": Emulation.setScriptExecutionDisabledParameters;
          "Emulation.setTouchEmulationEnabled": Emulation.setTouchEmulationEnabledParameters;
          "Emulation.setVirtualTimePolicy": Emulation.setVirtualTimePolicyParameters;
          "Emulation.setLocaleOverride": Emulation.setLocaleOverrideParameters;
          "Emulation.setTimezoneOverride": Emulation.setTimezoneOverrideParameters;
          "Emulation.setVisibleSize": Emulation.setVisibleSizeParameters;
          "Emulation.setUserAgentOverride": Emulation.setUserAgentOverrideParameters;
          "HeadlessExperimental.beginFrame": HeadlessExperimental.beginFrameParameters;
          "HeadlessExperimental.disable": HeadlessExperimental.disableParameters;
          "HeadlessExperimental.enable": HeadlessExperimental.enableParameters;
          "IO.close": IO.closeParameters;
          "IO.read": IO.readParameters;
          "IO.resolveBlob": IO.resolveBlobParameters;
          "IndexedDB.clearObjectStore": IndexedDB.clearObjectStoreParameters;
          "IndexedDB.deleteDatabase": IndexedDB.deleteDatabaseParameters;
          "IndexedDB.deleteObjectStoreEntries": IndexedDB.deleteObjectStoreEntriesParameters;
          "IndexedDB.disable": IndexedDB.disableParameters;
          "IndexedDB.enable": IndexedDB.enableParameters;
          "IndexedDB.requestData": IndexedDB.requestDataParameters;
          "IndexedDB.getMetadata": IndexedDB.getMetadataParameters;
          "IndexedDB.requestDatabase": IndexedDB.requestDatabaseParameters;
          "IndexedDB.requestDatabaseNames": IndexedDB.requestDatabaseNamesParameters;
          "Input.dispatchKeyEvent": Input.dispatchKeyEventParameters;
          "Input.insertText": Input.insertTextParameters;
          "Input.dispatchMouseEvent": Input.dispatchMouseEventParameters;
          "Input.dispatchTouchEvent": Input.dispatchTouchEventParameters;
          "Input.emulateTouchFromMouseEvent": Input.emulateTouchFromMouseEventParameters;
          "Input.setIgnoreInputEvents": Input.setIgnoreInputEventsParameters;
          "Input.synthesizePinchGesture": Input.synthesizePinchGestureParameters;
          "Input.synthesizeScrollGesture": Input.synthesizeScrollGestureParameters;
          "Input.synthesizeTapGesture": Input.synthesizeTapGestureParameters;
          "Inspector.disable": Inspector.disableParameters;
          "Inspector.enable": Inspector.enableParameters;
          "LayerTree.compositingReasons": LayerTree.compositingReasonsParameters;
          "LayerTree.disable": LayerTree.disableParameters;
          "LayerTree.enable": LayerTree.enableParameters;
          "LayerTree.loadSnapshot": LayerTree.loadSnapshotParameters;
          "LayerTree.makeSnapshot": LayerTree.makeSnapshotParameters;
          "LayerTree.profileSnapshot": LayerTree.profileSnapshotParameters;
          "LayerTree.releaseSnapshot": LayerTree.releaseSnapshotParameters;
          "LayerTree.replaySnapshot": LayerTree.replaySnapshotParameters;
          "LayerTree.snapshotCommandLog": LayerTree.snapshotCommandLogParameters;
          "Log.clear": Log.clearParameters;
          "Log.disable": Log.disableParameters;
          "Log.enable": Log.enableParameters;
          "Log.startViolationsReport": Log.startViolationsReportParameters;
          "Log.stopViolationsReport": Log.stopViolationsReportParameters;
          "Memory.getDOMCounters": Memory.getDOMCountersParameters;
          "Memory.prepareForLeakDetection": Memory.prepareForLeakDetectionParameters;
          "Memory.forciblyPurgeJavaScriptMemory": Memory.forciblyPurgeJavaScriptMemoryParameters;
          "Memory.setPressureNotificationsSuppressed": Memory.setPressureNotificationsSuppressedParameters;
          "Memory.simulatePressureNotification": Memory.simulatePressureNotificationParameters;
          "Memory.startSampling": Memory.startSamplingParameters;
          "Memory.stopSampling": Memory.stopSamplingParameters;
          "Memory.getAllTimeSamplingProfile": Memory.getAllTimeSamplingProfileParameters;
          "Memory.getBrowserSamplingProfile": Memory.getBrowserSamplingProfileParameters;
          "Memory.getSamplingProfile": Memory.getSamplingProfileParameters;
          "Network.canClearBrowserCache": Network.canClearBrowserCacheParameters;
          "Network.canClearBrowserCookies": Network.canClearBrowserCookiesParameters;
          "Network.canEmulateNetworkConditions": Network.canEmulateNetworkConditionsParameters;
          "Network.clearBrowserCache": Network.clearBrowserCacheParameters;
          "Network.clearBrowserCookies": Network.clearBrowserCookiesParameters;
          "Network.continueInterceptedRequest": Network.continueInterceptedRequestParameters;
          "Network.deleteCookies": Network.deleteCookiesParameters;
          "Network.disable": Network.disableParameters;
          "Network.emulateNetworkConditions": Network.emulateNetworkConditionsParameters;
          "Network.enable": Network.enableParameters;
          "Network.getAllCookies": Network.getAllCookiesParameters;
          "Network.getCertificate": Network.getCertificateParameters;
          "Network.getCookies": Network.getCookiesParameters;
          "Network.getResponseBody": Network.getResponseBodyParameters;
          "Network.getRequestPostData": Network.getRequestPostDataParameters;
          "Network.getResponseBodyForInterception": Network.getResponseBodyForInterceptionParameters;
          "Network.takeResponseBodyForInterceptionAsStream": Network.takeResponseBodyForInterceptionAsStreamParameters;
          "Network.replayXHR": Network.replayXHRParameters;
          "Network.searchInResponseBody": Network.searchInResponseBodyParameters;
          "Network.setBlockedURLs": Network.setBlockedURLsParameters;
          "Network.setBypassServiceWorker": Network.setBypassServiceWorkerParameters;
          "Network.setCacheDisabled": Network.setCacheDisabledParameters;
          "Network.setCookie": Network.setCookieParameters;
          "Network.setCookies": Network.setCookiesParameters;
          "Network.setDataSizeLimitsForTest": Network.setDataSizeLimitsForTestParameters;
          "Network.setExtraHTTPHeaders": Network.setExtraHTTPHeadersParameters;
          "Network.setRequestInterception": Network.setRequestInterceptionParameters;
          "Network.setUserAgentOverride": Network.setUserAgentOverrideParameters;
          "Overlay.disable": Overlay.disableParameters;
          "Overlay.enable": Overlay.enableParameters;
          "Overlay.getHighlightObjectForTest": Overlay.getHighlightObjectForTestParameters;
          "Overlay.hideHighlight": Overlay.hideHighlightParameters;
          "Overlay.highlightFrame": Overlay.highlightFrameParameters;
          "Overlay.highlightNode": Overlay.highlightNodeParameters;
          "Overlay.highlightQuad": Overlay.highlightQuadParameters;
          "Overlay.highlightRect": Overlay.highlightRectParameters;
          "Overlay.setInspectMode": Overlay.setInspectModeParameters;
          "Overlay.setShowAdHighlights": Overlay.setShowAdHighlightsParameters;
          "Overlay.setPausedInDebuggerMessage": Overlay.setPausedInDebuggerMessageParameters;
          "Overlay.setShowDebugBorders": Overlay.setShowDebugBordersParameters;
          "Overlay.setShowFPSCounter": Overlay.setShowFPSCounterParameters;
          "Overlay.setShowPaintRects": Overlay.setShowPaintRectsParameters;
          "Overlay.setShowLayoutShiftRegions": Overlay.setShowLayoutShiftRegionsParameters;
          "Overlay.setShowScrollBottleneckRects": Overlay.setShowScrollBottleneckRectsParameters;
          "Overlay.setShowHitTestBorders": Overlay.setShowHitTestBordersParameters;
          "Overlay.setShowViewportSizeOnResize": Overlay.setShowViewportSizeOnResizeParameters;
          "Page.addScriptToEvaluateOnLoad": Page.addScriptToEvaluateOnLoadParameters;
          "Page.addScriptToEvaluateOnNewDocument": Page.addScriptToEvaluateOnNewDocumentParameters;
          "Page.bringToFront": Page.bringToFrontParameters;
          "Page.captureScreenshot": Page.captureScreenshotParameters;
          "Page.captureSnapshot": Page.captureSnapshotParameters;
          "Page.clearDeviceMetricsOverride": Page.clearDeviceMetricsOverrideParameters;
          "Page.clearDeviceOrientationOverride": Page.clearDeviceOrientationOverrideParameters;
          "Page.clearGeolocationOverride": Page.clearGeolocationOverrideParameters;
          "Page.createIsolatedWorld": Page.createIsolatedWorldParameters;
          "Page.deleteCookie": Page.deleteCookieParameters;
          "Page.disable": Page.disableParameters;
          "Page.enable": Page.enableParameters;
          "Page.getAppManifest": Page.getAppManifestParameters;
          "Page.getInstallabilityErrors": Page.getInstallabilityErrorsParameters;
          "Page.getManifestIcons": Page.getManifestIconsParameters;
          "Page.getCookies": Page.getCookiesParameters;
          "Page.getFrameTree": Page.getFrameTreeParameters;
          "Page.getLayoutMetrics": Page.getLayoutMetricsParameters;
          "Page.getNavigationHistory": Page.getNavigationHistoryParameters;
          "Page.resetNavigationHistory": Page.resetNavigationHistoryParameters;
          "Page.getResourceContent": Page.getResourceContentParameters;
          "Page.getResourceTree": Page.getResourceTreeParameters;
          "Page.handleJavaScriptDialog": Page.handleJavaScriptDialogParameters;
          "Page.navigate": Page.navigateParameters;
          "Page.navigateToHistoryEntry": Page.navigateToHistoryEntryParameters;
          "Page.printToPDF": Page.printToPDFParameters;
          "Page.reload": Page.reloadParameters;
          "Page.removeScriptToEvaluateOnLoad": Page.removeScriptToEvaluateOnLoadParameters;
          "Page.removeScriptToEvaluateOnNewDocument": Page.removeScriptToEvaluateOnNewDocumentParameters;
          "Page.screencastFrameAck": Page.screencastFrameAckParameters;
          "Page.searchInResource": Page.searchInResourceParameters;
          "Page.setAdBlockingEnabled": Page.setAdBlockingEnabledParameters;
          "Page.setBypassCSP": Page.setBypassCSPParameters;
          "Page.setDeviceMetricsOverride": Page.setDeviceMetricsOverrideParameters;
          "Page.setDeviceOrientationOverride": Page.setDeviceOrientationOverrideParameters;
          "Page.setFontFamilies": Page.setFontFamiliesParameters;
          "Page.setFontSizes": Page.setFontSizesParameters;
          "Page.setDocumentContent": Page.setDocumentContentParameters;
          "Page.setDownloadBehavior": Page.setDownloadBehaviorParameters;
          "Page.setGeolocationOverride": Page.setGeolocationOverrideParameters;
          "Page.setLifecycleEventsEnabled": Page.setLifecycleEventsEnabledParameters;
          "Page.setTouchEmulationEnabled": Page.setTouchEmulationEnabledParameters;
          "Page.startScreencast": Page.startScreencastParameters;
          "Page.stopLoading": Page.stopLoadingParameters;
          "Page.crash": Page.crashParameters;
          "Page.close": Page.closeParameters;
          "Page.setWebLifecycleState": Page.setWebLifecycleStateParameters;
          "Page.stopScreencast": Page.stopScreencastParameters;
          "Page.setProduceCompilationCache": Page.setProduceCompilationCacheParameters;
          "Page.addCompilationCache": Page.addCompilationCacheParameters;
          "Page.clearCompilationCache": Page.clearCompilationCacheParameters;
          "Page.generateTestReport": Page.generateTestReportParameters;
          "Page.waitForDebugger": Page.waitForDebuggerParameters;
          "Page.setInterceptFileChooserDialog": Page.setInterceptFileChooserDialogParameters;
          "Performance.disable": Performance.disableParameters;
          "Performance.enable": Performance.enableParameters;
          "Performance.setTimeDomain": Performance.setTimeDomainParameters;
          "Performance.getMetrics": Performance.getMetricsParameters;
          "Security.disable": Security.disableParameters;
          "Security.enable": Security.enableParameters;
          "Security.setIgnoreCertificateErrors": Security.setIgnoreCertificateErrorsParameters;
          "Security.handleCertificateError": Security.handleCertificateErrorParameters;
          "Security.setOverrideCertificateErrors": Security.setOverrideCertificateErrorsParameters;
          "ServiceWorker.deliverPushMessage": ServiceWorker.deliverPushMessageParameters;
          "ServiceWorker.disable": ServiceWorker.disableParameters;
          "ServiceWorker.dispatchSyncEvent": ServiceWorker.dispatchSyncEventParameters;
          "ServiceWorker.dispatchPeriodicSyncEvent": ServiceWorker.dispatchPeriodicSyncEventParameters;
          "ServiceWorker.enable": ServiceWorker.enableParameters;
          "ServiceWorker.inspectWorker": ServiceWorker.inspectWorkerParameters;
          "ServiceWorker.setForceUpdateOnPageLoad": ServiceWorker.setForceUpdateOnPageLoadParameters;
          "ServiceWorker.skipWaiting": ServiceWorker.skipWaitingParameters;
          "ServiceWorker.startWorker": ServiceWorker.startWorkerParameters;
          "ServiceWorker.stopAllWorkers": ServiceWorker.stopAllWorkersParameters;
          "ServiceWorker.stopWorker": ServiceWorker.stopWorkerParameters;
          "ServiceWorker.unregister": ServiceWorker.unregisterParameters;
          "ServiceWorker.updateRegistration": ServiceWorker.updateRegistrationParameters;
          "Storage.clearDataForOrigin": Storage.clearDataForOriginParameters;
          "Storage.getCookies": Storage.getCookiesParameters;
          "Storage.setCookies": Storage.setCookiesParameters;
          "Storage.clearCookies": Storage.clearCookiesParameters;
          "Storage.getUsageAndQuota": Storage.getUsageAndQuotaParameters;
          "Storage.trackCacheStorageForOrigin": Storage.trackCacheStorageForOriginParameters;
          "Storage.trackIndexedDBForOrigin": Storage.trackIndexedDBForOriginParameters;
          "Storage.untrackCacheStorageForOrigin": Storage.untrackCacheStorageForOriginParameters;
          "Storage.untrackIndexedDBForOrigin": Storage.untrackIndexedDBForOriginParameters;
          "SystemInfo.getInfo": SystemInfo.getInfoParameters;
          "SystemInfo.getProcessInfo": SystemInfo.getProcessInfoParameters;
          "Target.activateTarget": Target.activateTargetParameters;
          "Target.attachToTarget": Target.attachToTargetParameters;
          "Target.attachToBrowserTarget": Target.attachToBrowserTargetParameters;
          "Target.closeTarget": Target.closeTargetParameters;
          "Target.exposeDevToolsProtocol": Target.exposeDevToolsProtocolParameters;
          "Target.createBrowserContext": Target.createBrowserContextParameters;
          "Target.getBrowserContexts": Target.getBrowserContextsParameters;
          "Target.createTarget": Target.createTargetParameters;
          "Target.detachFromTarget": Target.detachFromTargetParameters;
          "Target.disposeBrowserContext": Target.disposeBrowserContextParameters;
          "Target.getTargetInfo": Target.getTargetInfoParameters;
          "Target.getTargets": Target.getTargetsParameters;
          "Target.sendMessageToTarget": Target.sendMessageToTargetParameters;
          "Target.setAutoAttach": Target.setAutoAttachParameters;
          "Target.setDiscoverTargets": Target.setDiscoverTargetsParameters;
          "Target.setRemoteLocations": Target.setRemoteLocationsParameters;
          "Tethering.bind": Tethering.bindParameters;
          "Tethering.unbind": Tethering.unbindParameters;
          "Tracing.end": Tracing.endParameters;
          "Tracing.getCategories": Tracing.getCategoriesParameters;
          "Tracing.recordClockSyncMarker": Tracing.recordClockSyncMarkerParameters;
          "Tracing.requestMemoryDump": Tracing.requestMemoryDumpParameters;
          "Tracing.start": Tracing.startParameters;
          "Fetch.disable": Fetch.disableParameters;
          "Fetch.enable": Fetch.enableParameters;
          "Fetch.failRequest": Fetch.failRequestParameters;
          "Fetch.fulfillRequest": Fetch.fulfillRequestParameters;
          "Fetch.continueRequest": Fetch.continueRequestParameters;
          "Fetch.continueWithAuth": Fetch.continueWithAuthParameters;
          "Fetch.getResponseBody": Fetch.getResponseBodyParameters;
          "Fetch.takeResponseBodyAsStream": Fetch.takeResponseBodyAsStreamParameters;
          "WebAudio.enable": WebAudio.enableParameters;
          "WebAudio.disable": WebAudio.disableParameters;
          "WebAudio.getRealtimeData": WebAudio.getRealtimeDataParameters;
          "WebAuthn.enable": WebAuthn.enableParameters;
          "WebAuthn.disable": WebAuthn.disableParameters;
          "WebAuthn.addVirtualAuthenticator": WebAuthn.addVirtualAuthenticatorParameters;
          "WebAuthn.removeVirtualAuthenticator": WebAuthn.removeVirtualAuthenticatorParameters;
          "WebAuthn.addCredential": WebAuthn.addCredentialParameters;
          "WebAuthn.getCredential": WebAuthn.getCredentialParameters;
          "WebAuthn.getCredentials": WebAuthn.getCredentialsParameters;
          "WebAuthn.removeCredential": WebAuthn.removeCredentialParameters;
          "WebAuthn.clearCredentials": WebAuthn.clearCredentialsParameters;
          "WebAuthn.setUserVerified": WebAuthn.setUserVerifiedParameters;
          "Media.enable": Media.enableParameters;
          "Media.disable": Media.disableParameters;
          "Console.clearMessages": Console.clearMessagesParameters;
          "Console.disable": Console.disableParameters;
          "Console.enable": Console.enableParameters;
          "Debugger.continueToLocation": Debugger.continueToLocationParameters;
          "Debugger.disable": Debugger.disableParameters;
          "Debugger.enable": Debugger.enableParameters;
          "Debugger.evaluateOnCallFrame": Debugger.evaluateOnCallFrameParameters;
          "Debugger.getPossibleBreakpoints": Debugger.getPossibleBreakpointsParameters;
          "Debugger.getScriptSource": Debugger.getScriptSourceParameters;
          "Debugger.getWasmBytecode": Debugger.getWasmBytecodeParameters;
          "Debugger.getStackTrace": Debugger.getStackTraceParameters;
          "Debugger.pause": Debugger.pauseParameters;
          "Debugger.pauseOnAsyncCall": Debugger.pauseOnAsyncCallParameters;
          "Debugger.removeBreakpoint": Debugger.removeBreakpointParameters;
          "Debugger.restartFrame": Debugger.restartFrameParameters;
          "Debugger.resume": Debugger.resumeParameters;
          "Debugger.searchInContent": Debugger.searchInContentParameters;
          "Debugger.setAsyncCallStackDepth": Debugger.setAsyncCallStackDepthParameters;
          "Debugger.setBlackboxPatterns": Debugger.setBlackboxPatternsParameters;
          "Debugger.setBlackboxedRanges": Debugger.setBlackboxedRangesParameters;
          "Debugger.setBreakpoint": Debugger.setBreakpointParameters;
          "Debugger.setInstrumentationBreakpoint": Debugger.setInstrumentationBreakpointParameters;
          "Debugger.setBreakpointByUrl": Debugger.setBreakpointByUrlParameters;
          "Debugger.setBreakpointOnFunctionCall": Debugger.setBreakpointOnFunctionCallParameters;
          "Debugger.setBreakpointsActive": Debugger.setBreakpointsActiveParameters;
          "Debugger.setPauseOnExceptions": Debugger.setPauseOnExceptionsParameters;
          "Debugger.setReturnValue": Debugger.setReturnValueParameters;
          "Debugger.setScriptSource": Debugger.setScriptSourceParameters;
          "Debugger.setSkipAllPauses": Debugger.setSkipAllPausesParameters;
          "Debugger.setVariableValue": Debugger.setVariableValueParameters;
          "Debugger.stepInto": Debugger.stepIntoParameters;
          "Debugger.stepOut": Debugger.stepOutParameters;
          "Debugger.stepOver": Debugger.stepOverParameters;
          "HeapProfiler.addInspectedHeapObject": HeapProfiler.addInspectedHeapObjectParameters;
          "HeapProfiler.collectGarbage": HeapProfiler.collectGarbageParameters;
          "HeapProfiler.disable": HeapProfiler.disableParameters;
          "HeapProfiler.enable": HeapProfiler.enableParameters;
          "HeapProfiler.getHeapObjectId": HeapProfiler.getHeapObjectIdParameters;
          "HeapProfiler.getObjectByHeapObjectId": HeapProfiler.getObjectByHeapObjectIdParameters;
          "HeapProfiler.getSamplingProfile": HeapProfiler.getSamplingProfileParameters;
          "HeapProfiler.startSampling": HeapProfiler.startSamplingParameters;
          "HeapProfiler.startTrackingHeapObjects": HeapProfiler.startTrackingHeapObjectsParameters;
          "HeapProfiler.stopSampling": HeapProfiler.stopSamplingParameters;
          "HeapProfiler.stopTrackingHeapObjects": HeapProfiler.stopTrackingHeapObjectsParameters;
          "HeapProfiler.takeHeapSnapshot": HeapProfiler.takeHeapSnapshotParameters;
          "Profiler.disable": Profiler.disableParameters;
          "Profiler.enable": Profiler.enableParameters;
          "Profiler.getBestEffortCoverage": Profiler.getBestEffortCoverageParameters;
          "Profiler.setSamplingInterval": Profiler.setSamplingIntervalParameters;
          "Profiler.start": Profiler.startParameters;
          "Profiler.startPreciseCoverage": Profiler.startPreciseCoverageParameters;
          "Profiler.startTypeProfile": Profiler.startTypeProfileParameters;
          "Profiler.stop": Profiler.stopParameters;
          "Profiler.stopPreciseCoverage": Profiler.stopPreciseCoverageParameters;
          "Profiler.stopTypeProfile": Profiler.stopTypeProfileParameters;
          "Profiler.takePreciseCoverage": Profiler.takePreciseCoverageParameters;
          "Profiler.takeTypeProfile": Profiler.takeTypeProfileParameters;
          "Profiler.enableRuntimeCallStats": Profiler.enableRuntimeCallStatsParameters;
          "Profiler.disableRuntimeCallStats": Profiler.disableRuntimeCallStatsParameters;
          "Profiler.getRuntimeCallStats": Profiler.getRuntimeCallStatsParameters;
          "Runtime.awaitPromise": Runtime.awaitPromiseParameters;
          "Runtime.callFunctionOn": Runtime.callFunctionOnParameters;
          "Runtime.compileScript": Runtime.compileScriptParameters;
          "Runtime.disable": Runtime.disableParameters;
          "Runtime.discardConsoleEntries": Runtime.discardConsoleEntriesParameters;
          "Runtime.enable": Runtime.enableParameters;
          "Runtime.evaluate": Runtime.evaluateParameters;
          "Runtime.getIsolateId": Runtime.getIsolateIdParameters;
          "Runtime.getHeapUsage": Runtime.getHeapUsageParameters;
          "Runtime.getProperties": Runtime.getPropertiesParameters;
          "Runtime.globalLexicalScopeNames": Runtime.globalLexicalScopeNamesParameters;
          "Runtime.queryObjects": Runtime.queryObjectsParameters;
          "Runtime.releaseObject": Runtime.releaseObjectParameters;
          "Runtime.releaseObjectGroup": Runtime.releaseObjectGroupParameters;
          "Runtime.runIfWaitingForDebugger": Runtime.runIfWaitingForDebuggerParameters;
          "Runtime.runScript": Runtime.runScriptParameters;
          "Runtime.setAsyncCallStackDepth": Runtime.setAsyncCallStackDepthParameters;
          "Runtime.setCustomObjectFormatterEnabled": Runtime.setCustomObjectFormatterEnabledParameters;
          "Runtime.setMaxCallStackSizeToCapture": Runtime.setMaxCallStackSizeToCaptureParameters;
          "Runtime.terminateExecution": Runtime.terminateExecutionParameters;
          "Runtime.addBinding": Runtime.addBindingParameters;
          "Runtime.removeBinding": Runtime.removeBindingParameters;
          "Schema.getDomains": Schema.getDomainsParameters;
      }
      interface CommandReturnValues {
          "Accessibility.disable": Accessibility.disableReturnValue;
          "Accessibility.enable": Accessibility.enableReturnValue;
          "Accessibility.getPartialAXTree": Accessibility.getPartialAXTreeReturnValue;
          "Accessibility.getFullAXTree": Accessibility.getFullAXTreeReturnValue;
          "Animation.disable": Animation.disableReturnValue;
          "Animation.enable": Animation.enableReturnValue;
          "Animation.getCurrentTime": Animation.getCurrentTimeReturnValue;
          "Animation.getPlaybackRate": Animation.getPlaybackRateReturnValue;
          "Animation.releaseAnimations": Animation.releaseAnimationsReturnValue;
          "Animation.resolveAnimation": Animation.resolveAnimationReturnValue;
          "Animation.seekAnimations": Animation.seekAnimationsReturnValue;
          "Animation.setPaused": Animation.setPausedReturnValue;
          "Animation.setPlaybackRate": Animation.setPlaybackRateReturnValue;
          "Animation.setTiming": Animation.setTimingReturnValue;
          "ApplicationCache.enable": ApplicationCache.enableReturnValue;
          "ApplicationCache.getApplicationCacheForFrame": ApplicationCache.getApplicationCacheForFrameReturnValue;
          "ApplicationCache.getFramesWithManifests": ApplicationCache.getFramesWithManifestsReturnValue;
          "ApplicationCache.getManifestForFrame": ApplicationCache.getManifestForFrameReturnValue;
          "Audits.getEncodedResponse": Audits.getEncodedResponseReturnValue;
          "Audits.disable": Audits.disableReturnValue;
          "Audits.enable": Audits.enableReturnValue;
          "BackgroundService.startObserving": BackgroundService.startObservingReturnValue;
          "BackgroundService.stopObserving": BackgroundService.stopObservingReturnValue;
          "BackgroundService.setRecording": BackgroundService.setRecordingReturnValue;
          "BackgroundService.clearEvents": BackgroundService.clearEventsReturnValue;
          "Browser.setPermission": Browser.setPermissionReturnValue;
          "Browser.grantPermissions": Browser.grantPermissionsReturnValue;
          "Browser.resetPermissions": Browser.resetPermissionsReturnValue;
          "Browser.close": Browser.closeReturnValue;
          "Browser.crash": Browser.crashReturnValue;
          "Browser.crashGpuProcess": Browser.crashGpuProcessReturnValue;
          "Browser.getVersion": Browser.getVersionReturnValue;
          "Browser.getBrowserCommandLine": Browser.getBrowserCommandLineReturnValue;
          "Browser.getHistograms": Browser.getHistogramsReturnValue;
          "Browser.getHistogram": Browser.getHistogramReturnValue;
          "Browser.getWindowBounds": Browser.getWindowBoundsReturnValue;
          "Browser.getWindowForTarget": Browser.getWindowForTargetReturnValue;
          "Browser.setWindowBounds": Browser.setWindowBoundsReturnValue;
          "Browser.setDockTile": Browser.setDockTileReturnValue;
          "CSS.addRule": CSS.addRuleReturnValue;
          "CSS.collectClassNames": CSS.collectClassNamesReturnValue;
          "CSS.createStyleSheet": CSS.createStyleSheetReturnValue;
          "CSS.disable": CSS.disableReturnValue;
          "CSS.enable": CSS.enableReturnValue;
          "CSS.forcePseudoState": CSS.forcePseudoStateReturnValue;
          "CSS.getBackgroundColors": CSS.getBackgroundColorsReturnValue;
          "CSS.getComputedStyleForNode": CSS.getComputedStyleForNodeReturnValue;
          "CSS.getInlineStylesForNode": CSS.getInlineStylesForNodeReturnValue;
          "CSS.getMatchedStylesForNode": CSS.getMatchedStylesForNodeReturnValue;
          "CSS.getMediaQueries": CSS.getMediaQueriesReturnValue;
          "CSS.getPlatformFontsForNode": CSS.getPlatformFontsForNodeReturnValue;
          "CSS.getStyleSheetText": CSS.getStyleSheetTextReturnValue;
          "CSS.setEffectivePropertyValueForNode": CSS.setEffectivePropertyValueForNodeReturnValue;
          "CSS.setKeyframeKey": CSS.setKeyframeKeyReturnValue;
          "CSS.setMediaText": CSS.setMediaTextReturnValue;
          "CSS.setRuleSelector": CSS.setRuleSelectorReturnValue;
          "CSS.setStyleSheetText": CSS.setStyleSheetTextReturnValue;
          "CSS.setStyleTexts": CSS.setStyleTextsReturnValue;
          "CSS.startRuleUsageTracking": CSS.startRuleUsageTrackingReturnValue;
          "CSS.stopRuleUsageTracking": CSS.stopRuleUsageTrackingReturnValue;
          "CSS.takeCoverageDelta": CSS.takeCoverageDeltaReturnValue;
          "CacheStorage.deleteCache": CacheStorage.deleteCacheReturnValue;
          "CacheStorage.deleteEntry": CacheStorage.deleteEntryReturnValue;
          "CacheStorage.requestCacheNames": CacheStorage.requestCacheNamesReturnValue;
          "CacheStorage.requestCachedResponse": CacheStorage.requestCachedResponseReturnValue;
          "CacheStorage.requestEntries": CacheStorage.requestEntriesReturnValue;
          "Cast.enable": Cast.enableReturnValue;
          "Cast.disable": Cast.disableReturnValue;
          "Cast.setSinkToUse": Cast.setSinkToUseReturnValue;
          "Cast.startTabMirroring": Cast.startTabMirroringReturnValue;
          "Cast.stopCasting": Cast.stopCastingReturnValue;
          "DOM.collectClassNamesFromSubtree": DOM.collectClassNamesFromSubtreeReturnValue;
          "DOM.copyTo": DOM.copyToReturnValue;
          "DOM.describeNode": DOM.describeNodeReturnValue;
          "DOM.scrollIntoViewIfNeeded": DOM.scrollIntoViewIfNeededReturnValue;
          "DOM.disable": DOM.disableReturnValue;
          "DOM.discardSearchResults": DOM.discardSearchResultsReturnValue;
          "DOM.enable": DOM.enableReturnValue;
          "DOM.focus": DOM.focusReturnValue;
          "DOM.getAttributes": DOM.getAttributesReturnValue;
          "DOM.getBoxModel": DOM.getBoxModelReturnValue;
          "DOM.getContentQuads": DOM.getContentQuadsReturnValue;
          "DOM.getDocument": DOM.getDocumentReturnValue;
          "DOM.getFlattenedDocument": DOM.getFlattenedDocumentReturnValue;
          "DOM.getNodeForLocation": DOM.getNodeForLocationReturnValue;
          "DOM.getOuterHTML": DOM.getOuterHTMLReturnValue;
          "DOM.getRelayoutBoundary": DOM.getRelayoutBoundaryReturnValue;
          "DOM.getSearchResults": DOM.getSearchResultsReturnValue;
          "DOM.hideHighlight": DOM.hideHighlightReturnValue;
          "DOM.highlightNode": DOM.highlightNodeReturnValue;
          "DOM.highlightRect": DOM.highlightRectReturnValue;
          "DOM.markUndoableState": DOM.markUndoableStateReturnValue;
          "DOM.moveTo": DOM.moveToReturnValue;
          "DOM.performSearch": DOM.performSearchReturnValue;
          "DOM.pushNodeByPathToFrontend": DOM.pushNodeByPathToFrontendReturnValue;
          "DOM.pushNodesByBackendIdsToFrontend": DOM.pushNodesByBackendIdsToFrontendReturnValue;
          "DOM.querySelector": DOM.querySelectorReturnValue;
          "DOM.querySelectorAll": DOM.querySelectorAllReturnValue;
          "DOM.redo": DOM.redoReturnValue;
          "DOM.removeAttribute": DOM.removeAttributeReturnValue;
          "DOM.removeNode": DOM.removeNodeReturnValue;
          "DOM.requestChildNodes": DOM.requestChildNodesReturnValue;
          "DOM.requestNode": DOM.requestNodeReturnValue;
          "DOM.resolveNode": DOM.resolveNodeReturnValue;
          "DOM.setAttributeValue": DOM.setAttributeValueReturnValue;
          "DOM.setAttributesAsText": DOM.setAttributesAsTextReturnValue;
          "DOM.setFileInputFiles": DOM.setFileInputFilesReturnValue;
          "DOM.setNodeStackTracesEnabled": DOM.setNodeStackTracesEnabledReturnValue;
          "DOM.getNodeStackTraces": DOM.getNodeStackTracesReturnValue;
          "DOM.getFileInfo": DOM.getFileInfoReturnValue;
          "DOM.setInspectedNode": DOM.setInspectedNodeReturnValue;
          "DOM.setNodeName": DOM.setNodeNameReturnValue;
          "DOM.setNodeValue": DOM.setNodeValueReturnValue;
          "DOM.setOuterHTML": DOM.setOuterHTMLReturnValue;
          "DOM.undo": DOM.undoReturnValue;
          "DOM.getFrameOwner": DOM.getFrameOwnerReturnValue;
          "DOMDebugger.getEventListeners": DOMDebugger.getEventListenersReturnValue;
          "DOMDebugger.removeDOMBreakpoint": DOMDebugger.removeDOMBreakpointReturnValue;
          "DOMDebugger.removeEventListenerBreakpoint": DOMDebugger.removeEventListenerBreakpointReturnValue;
          "DOMDebugger.removeInstrumentationBreakpoint": DOMDebugger.removeInstrumentationBreakpointReturnValue;
          "DOMDebugger.removeXHRBreakpoint": DOMDebugger.removeXHRBreakpointReturnValue;
          "DOMDebugger.setDOMBreakpoint": DOMDebugger.setDOMBreakpointReturnValue;
          "DOMDebugger.setEventListenerBreakpoint": DOMDebugger.setEventListenerBreakpointReturnValue;
          "DOMDebugger.setInstrumentationBreakpoint": DOMDebugger.setInstrumentationBreakpointReturnValue;
          "DOMDebugger.setXHRBreakpoint": DOMDebugger.setXHRBreakpointReturnValue;
          "DOMSnapshot.disable": DOMSnapshot.disableReturnValue;
          "DOMSnapshot.enable": DOMSnapshot.enableReturnValue;
          "DOMSnapshot.getSnapshot": DOMSnapshot.getSnapshotReturnValue;
          "DOMSnapshot.captureSnapshot": DOMSnapshot.captureSnapshotReturnValue;
          "DOMStorage.clear": DOMStorage.clearReturnValue;
          "DOMStorage.disable": DOMStorage.disableReturnValue;
          "DOMStorage.enable": DOMStorage.enableReturnValue;
          "DOMStorage.getDOMStorageItems": DOMStorage.getDOMStorageItemsReturnValue;
          "DOMStorage.removeDOMStorageItem": DOMStorage.removeDOMStorageItemReturnValue;
          "DOMStorage.setDOMStorageItem": DOMStorage.setDOMStorageItemReturnValue;
          "Database.disable": Database.disableReturnValue;
          "Database.enable": Database.enableReturnValue;
          "Database.executeSQL": Database.executeSQLReturnValue;
          "Database.getDatabaseTableNames": Database.getDatabaseTableNamesReturnValue;
          "DeviceOrientation.clearDeviceOrientationOverride": DeviceOrientation.clearDeviceOrientationOverrideReturnValue;
          "DeviceOrientation.setDeviceOrientationOverride": DeviceOrientation.setDeviceOrientationOverrideReturnValue;
          "Emulation.canEmulate": Emulation.canEmulateReturnValue;
          "Emulation.clearDeviceMetricsOverride": Emulation.clearDeviceMetricsOverrideReturnValue;
          "Emulation.clearGeolocationOverride": Emulation.clearGeolocationOverrideReturnValue;
          "Emulation.resetPageScaleFactor": Emulation.resetPageScaleFactorReturnValue;
          "Emulation.setFocusEmulationEnabled": Emulation.setFocusEmulationEnabledReturnValue;
          "Emulation.setCPUThrottlingRate": Emulation.setCPUThrottlingRateReturnValue;
          "Emulation.setDefaultBackgroundColorOverride": Emulation.setDefaultBackgroundColorOverrideReturnValue;
          "Emulation.setDeviceMetricsOverride": Emulation.setDeviceMetricsOverrideReturnValue;
          "Emulation.setScrollbarsHidden": Emulation.setScrollbarsHiddenReturnValue;
          "Emulation.setDocumentCookieDisabled": Emulation.setDocumentCookieDisabledReturnValue;
          "Emulation.setEmitTouchEventsForMouse": Emulation.setEmitTouchEventsForMouseReturnValue;
          "Emulation.setEmulatedMedia": Emulation.setEmulatedMediaReturnValue;
          "Emulation.setEmulatedVisionDeficiency": Emulation.setEmulatedVisionDeficiencyReturnValue;
          "Emulation.setGeolocationOverride": Emulation.setGeolocationOverrideReturnValue;
          "Emulation.setNavigatorOverrides": Emulation.setNavigatorOverridesReturnValue;
          "Emulation.setPageScaleFactor": Emulation.setPageScaleFactorReturnValue;
          "Emulation.setScriptExecutionDisabled": Emulation.setScriptExecutionDisabledReturnValue;
          "Emulation.setTouchEmulationEnabled": Emulation.setTouchEmulationEnabledReturnValue;
          "Emulation.setVirtualTimePolicy": Emulation.setVirtualTimePolicyReturnValue;
          "Emulation.setLocaleOverride": Emulation.setLocaleOverrideReturnValue;
          "Emulation.setTimezoneOverride": Emulation.setTimezoneOverrideReturnValue;
          "Emulation.setVisibleSize": Emulation.setVisibleSizeReturnValue;
          "Emulation.setUserAgentOverride": Emulation.setUserAgentOverrideReturnValue;
          "HeadlessExperimental.beginFrame": HeadlessExperimental.beginFrameReturnValue;
          "HeadlessExperimental.disable": HeadlessExperimental.disableReturnValue;
          "HeadlessExperimental.enable": HeadlessExperimental.enableReturnValue;
          "IO.close": IO.closeReturnValue;
          "IO.read": IO.readReturnValue;
          "IO.resolveBlob": IO.resolveBlobReturnValue;
          "IndexedDB.clearObjectStore": IndexedDB.clearObjectStoreReturnValue;
          "IndexedDB.deleteDatabase": IndexedDB.deleteDatabaseReturnValue;
          "IndexedDB.deleteObjectStoreEntries": IndexedDB.deleteObjectStoreEntriesReturnValue;
          "IndexedDB.disable": IndexedDB.disableReturnValue;
          "IndexedDB.enable": IndexedDB.enableReturnValue;
          "IndexedDB.requestData": IndexedDB.requestDataReturnValue;
          "IndexedDB.getMetadata": IndexedDB.getMetadataReturnValue;
          "IndexedDB.requestDatabase": IndexedDB.requestDatabaseReturnValue;
          "IndexedDB.requestDatabaseNames": IndexedDB.requestDatabaseNamesReturnValue;
          "Input.dispatchKeyEvent": Input.dispatchKeyEventReturnValue;
          "Input.insertText": Input.insertTextReturnValue;
          "Input.dispatchMouseEvent": Input.dispatchMouseEventReturnValue;
          "Input.dispatchTouchEvent": Input.dispatchTouchEventReturnValue;
          "Input.emulateTouchFromMouseEvent": Input.emulateTouchFromMouseEventReturnValue;
          "Input.setIgnoreInputEvents": Input.setIgnoreInputEventsReturnValue;
          "Input.synthesizePinchGesture": Input.synthesizePinchGestureReturnValue;
          "Input.synthesizeScrollGesture": Input.synthesizeScrollGestureReturnValue;
          "Input.synthesizeTapGesture": Input.synthesizeTapGestureReturnValue;
          "Inspector.disable": Inspector.disableReturnValue;
          "Inspector.enable": Inspector.enableReturnValue;
          "LayerTree.compositingReasons": LayerTree.compositingReasonsReturnValue;
          "LayerTree.disable": LayerTree.disableReturnValue;
          "LayerTree.enable": LayerTree.enableReturnValue;
          "LayerTree.loadSnapshot": LayerTree.loadSnapshotReturnValue;
          "LayerTree.makeSnapshot": LayerTree.makeSnapshotReturnValue;
          "LayerTree.profileSnapshot": LayerTree.profileSnapshotReturnValue;
          "LayerTree.releaseSnapshot": LayerTree.releaseSnapshotReturnValue;
          "LayerTree.replaySnapshot": LayerTree.replaySnapshotReturnValue;
          "LayerTree.snapshotCommandLog": LayerTree.snapshotCommandLogReturnValue;
          "Log.clear": Log.clearReturnValue;
          "Log.disable": Log.disableReturnValue;
          "Log.enable": Log.enableReturnValue;
          "Log.startViolationsReport": Log.startViolationsReportReturnValue;
          "Log.stopViolationsReport": Log.stopViolationsReportReturnValue;
          "Memory.getDOMCounters": Memory.getDOMCountersReturnValue;
          "Memory.prepareForLeakDetection": Memory.prepareForLeakDetectionReturnValue;
          "Memory.forciblyPurgeJavaScriptMemory": Memory.forciblyPurgeJavaScriptMemoryReturnValue;
          "Memory.setPressureNotificationsSuppressed": Memory.setPressureNotificationsSuppressedReturnValue;
          "Memory.simulatePressureNotification": Memory.simulatePressureNotificationReturnValue;
          "Memory.startSampling": Memory.startSamplingReturnValue;
          "Memory.stopSampling": Memory.stopSamplingReturnValue;
          "Memory.getAllTimeSamplingProfile": Memory.getAllTimeSamplingProfileReturnValue;
          "Memory.getBrowserSamplingProfile": Memory.getBrowserSamplingProfileReturnValue;
          "Memory.getSamplingProfile": Memory.getSamplingProfileReturnValue;
          "Network.canClearBrowserCache": Network.canClearBrowserCacheReturnValue;
          "Network.canClearBrowserCookies": Network.canClearBrowserCookiesReturnValue;
          "Network.canEmulateNetworkConditions": Network.canEmulateNetworkConditionsReturnValue;
          "Network.clearBrowserCache": Network.clearBrowserCacheReturnValue;
          "Network.clearBrowserCookies": Network.clearBrowserCookiesReturnValue;
          "Network.continueInterceptedRequest": Network.continueInterceptedRequestReturnValue;
          "Network.deleteCookies": Network.deleteCookiesReturnValue;
          "Network.disable": Network.disableReturnValue;
          "Network.emulateNetworkConditions": Network.emulateNetworkConditionsReturnValue;
          "Network.enable": Network.enableReturnValue;
          "Network.getAllCookies": Network.getAllCookiesReturnValue;
          "Network.getCertificate": Network.getCertificateReturnValue;
          "Network.getCookies": Network.getCookiesReturnValue;
          "Network.getResponseBody": Network.getResponseBodyReturnValue;
          "Network.getRequestPostData": Network.getRequestPostDataReturnValue;
          "Network.getResponseBodyForInterception": Network.getResponseBodyForInterceptionReturnValue;
          "Network.takeResponseBodyForInterceptionAsStream": Network.takeResponseBodyForInterceptionAsStreamReturnValue;
          "Network.replayXHR": Network.replayXHRReturnValue;
          "Network.searchInResponseBody": Network.searchInResponseBodyReturnValue;
          "Network.setBlockedURLs": Network.setBlockedURLsReturnValue;
          "Network.setBypassServiceWorker": Network.setBypassServiceWorkerReturnValue;
          "Network.setCacheDisabled": Network.setCacheDisabledReturnValue;
          "Network.setCookie": Network.setCookieReturnValue;
          "Network.setCookies": Network.setCookiesReturnValue;
          "Network.setDataSizeLimitsForTest": Network.setDataSizeLimitsForTestReturnValue;
          "Network.setExtraHTTPHeaders": Network.setExtraHTTPHeadersReturnValue;
          "Network.setRequestInterception": Network.setRequestInterceptionReturnValue;
          "Network.setUserAgentOverride": Network.setUserAgentOverrideReturnValue;
          "Overlay.disable": Overlay.disableReturnValue;
          "Overlay.enable": Overlay.enableReturnValue;
          "Overlay.getHighlightObjectForTest": Overlay.getHighlightObjectForTestReturnValue;
          "Overlay.hideHighlight": Overlay.hideHighlightReturnValue;
          "Overlay.highlightFrame": Overlay.highlightFrameReturnValue;
          "Overlay.highlightNode": Overlay.highlightNodeReturnValue;
          "Overlay.highlightQuad": Overlay.highlightQuadReturnValue;
          "Overlay.highlightRect": Overlay.highlightRectReturnValue;
          "Overlay.setInspectMode": Overlay.setInspectModeReturnValue;
          "Overlay.setShowAdHighlights": Overlay.setShowAdHighlightsReturnValue;
          "Overlay.setPausedInDebuggerMessage": Overlay.setPausedInDebuggerMessageReturnValue;
          "Overlay.setShowDebugBorders": Overlay.setShowDebugBordersReturnValue;
          "Overlay.setShowFPSCounter": Overlay.setShowFPSCounterReturnValue;
          "Overlay.setShowPaintRects": Overlay.setShowPaintRectsReturnValue;
          "Overlay.setShowLayoutShiftRegions": Overlay.setShowLayoutShiftRegionsReturnValue;
          "Overlay.setShowScrollBottleneckRects": Overlay.setShowScrollBottleneckRectsReturnValue;
          "Overlay.setShowHitTestBorders": Overlay.setShowHitTestBordersReturnValue;
          "Overlay.setShowViewportSizeOnResize": Overlay.setShowViewportSizeOnResizeReturnValue;
          "Page.addScriptToEvaluateOnLoad": Page.addScriptToEvaluateOnLoadReturnValue;
          "Page.addScriptToEvaluateOnNewDocument": Page.addScriptToEvaluateOnNewDocumentReturnValue;
          "Page.bringToFront": Page.bringToFrontReturnValue;
          "Page.captureScreenshot": Page.captureScreenshotReturnValue;
          "Page.captureSnapshot": Page.captureSnapshotReturnValue;
          "Page.clearDeviceMetricsOverride": Page.clearDeviceMetricsOverrideReturnValue;
          "Page.clearDeviceOrientationOverride": Page.clearDeviceOrientationOverrideReturnValue;
          "Page.clearGeolocationOverride": Page.clearGeolocationOverrideReturnValue;
          "Page.createIsolatedWorld": Page.createIsolatedWorldReturnValue;
          "Page.deleteCookie": Page.deleteCookieReturnValue;
          "Page.disable": Page.disableReturnValue;
          "Page.enable": Page.enableReturnValue;
          "Page.getAppManifest": Page.getAppManifestReturnValue;
          "Page.getInstallabilityErrors": Page.getInstallabilityErrorsReturnValue;
          "Page.getManifestIcons": Page.getManifestIconsReturnValue;
          "Page.getCookies": Page.getCookiesReturnValue;
          "Page.getFrameTree": Page.getFrameTreeReturnValue;
          "Page.getLayoutMetrics": Page.getLayoutMetricsReturnValue;
          "Page.getNavigationHistory": Page.getNavigationHistoryReturnValue;
          "Page.resetNavigationHistory": Page.resetNavigationHistoryReturnValue;
          "Page.getResourceContent": Page.getResourceContentReturnValue;
          "Page.getResourceTree": Page.getResourceTreeReturnValue;
          "Page.handleJavaScriptDialog": Page.handleJavaScriptDialogReturnValue;
          "Page.navigate": Page.navigateReturnValue;
          "Page.navigateToHistoryEntry": Page.navigateToHistoryEntryReturnValue;
          "Page.printToPDF": Page.printToPDFReturnValue;
          "Page.reload": Page.reloadReturnValue;
          "Page.removeScriptToEvaluateOnLoad": Page.removeScriptToEvaluateOnLoadReturnValue;
          "Page.removeScriptToEvaluateOnNewDocument": Page.removeScriptToEvaluateOnNewDocumentReturnValue;
          "Page.screencastFrameAck": Page.screencastFrameAckReturnValue;
          "Page.searchInResource": Page.searchInResourceReturnValue;
          "Page.setAdBlockingEnabled": Page.setAdBlockingEnabledReturnValue;
          "Page.setBypassCSP": Page.setBypassCSPReturnValue;
          "Page.setDeviceMetricsOverride": Page.setDeviceMetricsOverrideReturnValue;
          "Page.setDeviceOrientationOverride": Page.setDeviceOrientationOverrideReturnValue;
          "Page.setFontFamilies": Page.setFontFamiliesReturnValue;
          "Page.setFontSizes": Page.setFontSizesReturnValue;
          "Page.setDocumentContent": Page.setDocumentContentReturnValue;
          "Page.setDownloadBehavior": Page.setDownloadBehaviorReturnValue;
          "Page.setGeolocationOverride": Page.setGeolocationOverrideReturnValue;
          "Page.setLifecycleEventsEnabled": Page.setLifecycleEventsEnabledReturnValue;
          "Page.setTouchEmulationEnabled": Page.setTouchEmulationEnabledReturnValue;
          "Page.startScreencast": Page.startScreencastReturnValue;
          "Page.stopLoading": Page.stopLoadingReturnValue;
          "Page.crash": Page.crashReturnValue;
          "Page.close": Page.closeReturnValue;
          "Page.setWebLifecycleState": Page.setWebLifecycleStateReturnValue;
          "Page.stopScreencast": Page.stopScreencastReturnValue;
          "Page.setProduceCompilationCache": Page.setProduceCompilationCacheReturnValue;
          "Page.addCompilationCache": Page.addCompilationCacheReturnValue;
          "Page.clearCompilationCache": Page.clearCompilationCacheReturnValue;
          "Page.generateTestReport": Page.generateTestReportReturnValue;
          "Page.waitForDebugger": Page.waitForDebuggerReturnValue;
          "Page.setInterceptFileChooserDialog": Page.setInterceptFileChooserDialogReturnValue;
          "Performance.disable": Performance.disableReturnValue;
          "Performance.enable": Performance.enableReturnValue;
          "Performance.setTimeDomain": Performance.setTimeDomainReturnValue;
          "Performance.getMetrics": Performance.getMetricsReturnValue;
          "Security.disable": Security.disableReturnValue;
          "Security.enable": Security.enableReturnValue;
          "Security.setIgnoreCertificateErrors": Security.setIgnoreCertificateErrorsReturnValue;
          "Security.handleCertificateError": Security.handleCertificateErrorReturnValue;
          "Security.setOverrideCertificateErrors": Security.setOverrideCertificateErrorsReturnValue;
          "ServiceWorker.deliverPushMessage": ServiceWorker.deliverPushMessageReturnValue;
          "ServiceWorker.disable": ServiceWorker.disableReturnValue;
          "ServiceWorker.dispatchSyncEvent": ServiceWorker.dispatchSyncEventReturnValue;
          "ServiceWorker.dispatchPeriodicSyncEvent": ServiceWorker.dispatchPeriodicSyncEventReturnValue;
          "ServiceWorker.enable": ServiceWorker.enableReturnValue;
          "ServiceWorker.inspectWorker": ServiceWorker.inspectWorkerReturnValue;
          "ServiceWorker.setForceUpdateOnPageLoad": ServiceWorker.setForceUpdateOnPageLoadReturnValue;
          "ServiceWorker.skipWaiting": ServiceWorker.skipWaitingReturnValue;
          "ServiceWorker.startWorker": ServiceWorker.startWorkerReturnValue;
          "ServiceWorker.stopAllWorkers": ServiceWorker.stopAllWorkersReturnValue;
          "ServiceWorker.stopWorker": ServiceWorker.stopWorkerReturnValue;
          "ServiceWorker.unregister": ServiceWorker.unregisterReturnValue;
          "ServiceWorker.updateRegistration": ServiceWorker.updateRegistrationReturnValue;
          "Storage.clearDataForOrigin": Storage.clearDataForOriginReturnValue;
          "Storage.getCookies": Storage.getCookiesReturnValue;
          "Storage.setCookies": Storage.setCookiesReturnValue;
          "Storage.clearCookies": Storage.clearCookiesReturnValue;
          "Storage.getUsageAndQuota": Storage.getUsageAndQuotaReturnValue;
          "Storage.trackCacheStorageForOrigin": Storage.trackCacheStorageForOriginReturnValue;
          "Storage.trackIndexedDBForOrigin": Storage.trackIndexedDBForOriginReturnValue;
          "Storage.untrackCacheStorageForOrigin": Storage.untrackCacheStorageForOriginReturnValue;
          "Storage.untrackIndexedDBForOrigin": Storage.untrackIndexedDBForOriginReturnValue;
          "SystemInfo.getInfo": SystemInfo.getInfoReturnValue;
          "SystemInfo.getProcessInfo": SystemInfo.getProcessInfoReturnValue;
          "Target.activateTarget": Target.activateTargetReturnValue;
          "Target.attachToTarget": Target.attachToTargetReturnValue;
          "Target.attachToBrowserTarget": Target.attachToBrowserTargetReturnValue;
          "Target.closeTarget": Target.closeTargetReturnValue;
          "Target.exposeDevToolsProtocol": Target.exposeDevToolsProtocolReturnValue;
          "Target.createBrowserContext": Target.createBrowserContextReturnValue;
          "Target.getBrowserContexts": Target.getBrowserContextsReturnValue;
          "Target.createTarget": Target.createTargetReturnValue;
          "Target.detachFromTarget": Target.detachFromTargetReturnValue;
          "Target.disposeBrowserContext": Target.disposeBrowserContextReturnValue;
          "Target.getTargetInfo": Target.getTargetInfoReturnValue;
          "Target.getTargets": Target.getTargetsReturnValue;
          "Target.sendMessageToTarget": Target.sendMessageToTargetReturnValue;
          "Target.setAutoAttach": Target.setAutoAttachReturnValue;
          "Target.setDiscoverTargets": Target.setDiscoverTargetsReturnValue;
          "Target.setRemoteLocations": Target.setRemoteLocationsReturnValue;
          "Tethering.bind": Tethering.bindReturnValue;
          "Tethering.unbind": Tethering.unbindReturnValue;
          "Tracing.end": Tracing.endReturnValue;
          "Tracing.getCategories": Tracing.getCategoriesReturnValue;
          "Tracing.recordClockSyncMarker": Tracing.recordClockSyncMarkerReturnValue;
          "Tracing.requestMemoryDump": Tracing.requestMemoryDumpReturnValue;
          "Tracing.start": Tracing.startReturnValue;
          "Fetch.disable": Fetch.disableReturnValue;
          "Fetch.enable": Fetch.enableReturnValue;
          "Fetch.failRequest": Fetch.failRequestReturnValue;
          "Fetch.fulfillRequest": Fetch.fulfillRequestReturnValue;
          "Fetch.continueRequest": Fetch.continueRequestReturnValue;
          "Fetch.continueWithAuth": Fetch.continueWithAuthReturnValue;
          "Fetch.getResponseBody": Fetch.getResponseBodyReturnValue;
          "Fetch.takeResponseBodyAsStream": Fetch.takeResponseBodyAsStreamReturnValue;
          "WebAudio.enable": WebAudio.enableReturnValue;
          "WebAudio.disable": WebAudio.disableReturnValue;
          "WebAudio.getRealtimeData": WebAudio.getRealtimeDataReturnValue;
          "WebAuthn.enable": WebAuthn.enableReturnValue;
          "WebAuthn.disable": WebAuthn.disableReturnValue;
          "WebAuthn.addVirtualAuthenticator": WebAuthn.addVirtualAuthenticatorReturnValue;
          "WebAuthn.removeVirtualAuthenticator": WebAuthn.removeVirtualAuthenticatorReturnValue;
          "WebAuthn.addCredential": WebAuthn.addCredentialReturnValue;
          "WebAuthn.getCredential": WebAuthn.getCredentialReturnValue;
          "WebAuthn.getCredentials": WebAuthn.getCredentialsReturnValue;
          "WebAuthn.removeCredential": WebAuthn.removeCredentialReturnValue;
          "WebAuthn.clearCredentials": WebAuthn.clearCredentialsReturnValue;
          "WebAuthn.setUserVerified": WebAuthn.setUserVerifiedReturnValue;
          "Media.enable": Media.enableReturnValue;
          "Media.disable": Media.disableReturnValue;
          "Console.clearMessages": Console.clearMessagesReturnValue;
          "Console.disable": Console.disableReturnValue;
          "Console.enable": Console.enableReturnValue;
          "Debugger.continueToLocation": Debugger.continueToLocationReturnValue;
          "Debugger.disable": Debugger.disableReturnValue;
          "Debugger.enable": Debugger.enableReturnValue;
          "Debugger.evaluateOnCallFrame": Debugger.evaluateOnCallFrameReturnValue;
          "Debugger.getPossibleBreakpoints": Debugger.getPossibleBreakpointsReturnValue;
          "Debugger.getScriptSource": Debugger.getScriptSourceReturnValue;
          "Debugger.getWasmBytecode": Debugger.getWasmBytecodeReturnValue;
          "Debugger.getStackTrace": Debugger.getStackTraceReturnValue;
          "Debugger.pause": Debugger.pauseReturnValue;
          "Debugger.pauseOnAsyncCall": Debugger.pauseOnAsyncCallReturnValue;
          "Debugger.removeBreakpoint": Debugger.removeBreakpointReturnValue;
          "Debugger.restartFrame": Debugger.restartFrameReturnValue;
          "Debugger.resume": Debugger.resumeReturnValue;
          "Debugger.searchInContent": Debugger.searchInContentReturnValue;
          "Debugger.setAsyncCallStackDepth": Debugger.setAsyncCallStackDepthReturnValue;
          "Debugger.setBlackboxPatterns": Debugger.setBlackboxPatternsReturnValue;
          "Debugger.setBlackboxedRanges": Debugger.setBlackboxedRangesReturnValue;
          "Debugger.setBreakpoint": Debugger.setBreakpointReturnValue;
          "Debugger.setInstrumentationBreakpoint": Debugger.setInstrumentationBreakpointReturnValue;
          "Debugger.setBreakpointByUrl": Debugger.setBreakpointByUrlReturnValue;
          "Debugger.setBreakpointOnFunctionCall": Debugger.setBreakpointOnFunctionCallReturnValue;
          "Debugger.setBreakpointsActive": Debugger.setBreakpointsActiveReturnValue;
          "Debugger.setPauseOnExceptions": Debugger.setPauseOnExceptionsReturnValue;
          "Debugger.setReturnValue": Debugger.setReturnValueReturnValue;
          "Debugger.setScriptSource": Debugger.setScriptSourceReturnValue;
          "Debugger.setSkipAllPauses": Debugger.setSkipAllPausesReturnValue;
          "Debugger.setVariableValue": Debugger.setVariableValueReturnValue;
          "Debugger.stepInto": Debugger.stepIntoReturnValue;
          "Debugger.stepOut": Debugger.stepOutReturnValue;
          "Debugger.stepOver": Debugger.stepOverReturnValue;
          "HeapProfiler.addInspectedHeapObject": HeapProfiler.addInspectedHeapObjectReturnValue;
          "HeapProfiler.collectGarbage": HeapProfiler.collectGarbageReturnValue;
          "HeapProfiler.disable": HeapProfiler.disableReturnValue;
          "HeapProfiler.enable": HeapProfiler.enableReturnValue;
          "HeapProfiler.getHeapObjectId": HeapProfiler.getHeapObjectIdReturnValue;
          "HeapProfiler.getObjectByHeapObjectId": HeapProfiler.getObjectByHeapObjectIdReturnValue;
          "HeapProfiler.getSamplingProfile": HeapProfiler.getSamplingProfileReturnValue;
          "HeapProfiler.startSampling": HeapProfiler.startSamplingReturnValue;
          "HeapProfiler.startTrackingHeapObjects": HeapProfiler.startTrackingHeapObjectsReturnValue;
          "HeapProfiler.stopSampling": HeapProfiler.stopSamplingReturnValue;
          "HeapProfiler.stopTrackingHeapObjects": HeapProfiler.stopTrackingHeapObjectsReturnValue;
          "HeapProfiler.takeHeapSnapshot": HeapProfiler.takeHeapSnapshotReturnValue;
          "Profiler.disable": Profiler.disableReturnValue;
          "Profiler.enable": Profiler.enableReturnValue;
          "Profiler.getBestEffortCoverage": Profiler.getBestEffortCoverageReturnValue;
          "Profiler.setSamplingInterval": Profiler.setSamplingIntervalReturnValue;
          "Profiler.start": Profiler.startReturnValue;
          "Profiler.startPreciseCoverage": Profiler.startPreciseCoverageReturnValue;
          "Profiler.startTypeProfile": Profiler.startTypeProfileReturnValue;
          "Profiler.stop": Profiler.stopReturnValue;
          "Profiler.stopPreciseCoverage": Profiler.stopPreciseCoverageReturnValue;
          "Profiler.stopTypeProfile": Profiler.stopTypeProfileReturnValue;
          "Profiler.takePreciseCoverage": Profiler.takePreciseCoverageReturnValue;
          "Profiler.takeTypeProfile": Profiler.takeTypeProfileReturnValue;
          "Profiler.enableRuntimeCallStats": Profiler.enableRuntimeCallStatsReturnValue;
          "Profiler.disableRuntimeCallStats": Profiler.disableRuntimeCallStatsReturnValue;
          "Profiler.getRuntimeCallStats": Profiler.getRuntimeCallStatsReturnValue;
          "Runtime.awaitPromise": Runtime.awaitPromiseReturnValue;
          "Runtime.callFunctionOn": Runtime.callFunctionOnReturnValue;
          "Runtime.compileScript": Runtime.compileScriptReturnValue;
          "Runtime.disable": Runtime.disableReturnValue;
          "Runtime.discardConsoleEntries": Runtime.discardConsoleEntriesReturnValue;
          "Runtime.enable": Runtime.enableReturnValue;
          "Runtime.evaluate": Runtime.evaluateReturnValue;
          "Runtime.getIsolateId": Runtime.getIsolateIdReturnValue;
          "Runtime.getHeapUsage": Runtime.getHeapUsageReturnValue;
          "Runtime.getProperties": Runtime.getPropertiesReturnValue;
          "Runtime.globalLexicalScopeNames": Runtime.globalLexicalScopeNamesReturnValue;
          "Runtime.queryObjects": Runtime.queryObjectsReturnValue;
          "Runtime.releaseObject": Runtime.releaseObjectReturnValue;
          "Runtime.releaseObjectGroup": Runtime.releaseObjectGroupReturnValue;
          "Runtime.runIfWaitingForDebugger": Runtime.runIfWaitingForDebuggerReturnValue;
          "Runtime.runScript": Runtime.runScriptReturnValue;
          "Runtime.setAsyncCallStackDepth": Runtime.setAsyncCallStackDepthReturnValue;
          "Runtime.setCustomObjectFormatterEnabled": Runtime.setCustomObjectFormatterEnabledReturnValue;
          "Runtime.setMaxCallStackSizeToCapture": Runtime.setMaxCallStackSizeToCaptureReturnValue;
          "Runtime.terminateExecution": Runtime.terminateExecutionReturnValue;
          "Runtime.addBinding": Runtime.addBindingReturnValue;
          "Runtime.removeBinding": Runtime.removeBindingReturnValue;
          "Schema.getDomains": Schema.getDomainsReturnValue;
      }
  }
  export {};

}
declare module 'playwright-core/console' {
  /**
   * Copyright (c) Microsoft Corporation.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  import * as js from 'playwright-core/javascript';
  export type ConsoleMessageLocation = {
      url?: string;
      lineNumber?: number;
      columnNumber?: number;
  };
  export class ConsoleMessage {
      private _type;
      private _text?;
      private _args;
      private _location;
      constructor(type: string, text: string | undefined, args: js.JSHandle[], location?: ConsoleMessageLocation);
      type(): string;
      text(): string;
      args(): js.JSHandle[];
      location(): ConsoleMessageLocation;
  }

}
declare module 'playwright-core/deviceDescriptors' {
  /**
   * Copyright 2017 Google Inc. All rights reserved.
   * Modifications copyright (c) Microsoft Corporation.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *     http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  import * as types from 'playwright-core/types';
  export const DeviceDescriptors: types.Devices;

}
declare module 'playwright-core/dialog' {
  /**
   * Copyright 2017 Google Inc. All rights reserved.
   * Modifications copyright (c) Microsoft Corporation.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *     http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  type OnHandle = (accept: boolean, promptText?: string) => Promise<void>;
  export type DialogType = 'alert' | 'beforeunload' | 'confirm' | 'prompt';
  export class Dialog {
      private _type;
      private _message;
      private _onHandle;
      private _handled;
      private _defaultValue;
      constructor(type: string, message: string, onHandle: OnHandle, defaultValue?: string);
      type(): string;
      message(): string;
      defaultValue(): string;
      accept(promptText: string | undefined): Promise<void>;
      dismiss(): Promise<void>;
  }
  export {};

}
declare module 'playwright-core/dom' {
  /**
   * Copyright (c) Microsoft Corporation.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  import * as frames from 'playwright-core/frames';
  import * as input from 'playwright-core/input';
  import * as js from 'playwright-core/javascript';
  import * as types from 'playwright-core/types';
  import Injected from 'playwright-core/injected/injected';
  import { Page } from 'playwright-core/page';
  import * as platform from 'playwright-core/platform';
  export type PointerActionOptions = {
      modifiers?: input.Modifier[];
      position?: types.Point;
  };
  export type ClickOptions = PointerActionOptions & input.MouseClickOptions;
  export type MultiClickOptions = PointerActionOptions & input.MouseMultiClickOptions;
  export class FrameExecutionContext extends js.ExecutionContext {
      readonly frame: frames.Frame;
      private _injectedPromise?;
      private _injectedGeneration;
      constructor(delegate: js.ExecutionContextDelegate, frame: frames.Frame);
      _adoptIfNeeded(handle: js.JSHandle): Promise<js.JSHandle> | null;
      _doEvaluateInternal(returnByValue: boolean, waitForNavigations: boolean, pageFunction: string | Function, ...args: any[]): Promise<any>;
      _createHandle(remoteObject: any): js.JSHandle;
      _injected(): Promise<js.JSHandle<Injected>>;
      _$(selector: string, scope?: ElementHandle): Promise<ElementHandle<Element> | null>;
      _$array(selector: string, scope?: ElementHandle): Promise<js.JSHandle<Element[]>>;
      _$$(selector: string, scope?: ElementHandle): Promise<ElementHandle<Element>[]>;
  }
  export class ElementHandle<T extends Node = Node> extends js.JSHandle<T> {
      readonly _context: FrameExecutionContext;
      readonly _page: Page;
      constructor(context: FrameExecutionContext, remoteObject: any);
      asElement(): ElementHandle<T> | null;
      _evaluateInUtility<R, Arg>(pageFunction: types.FuncOn<{
          injected: Injected;
          node: T;
      }, Arg, R>, arg: Arg): Promise<R>;
      ownerFrame(): Promise<frames.Frame | null>;
      contentFrame(): Promise<frames.Frame | null>;
      _scrollRectIntoViewIfNeeded(rect?: types.Rect): Promise<void>;
      scrollIntoViewIfNeeded(): Promise<void>;
      private _clickablePoint;
      private _offsetPoint;
      _performPointerAction(action: (point: types.Point) => Promise<void>, options?: PointerActionOptions & types.PointerActionWaitOptions & types.NavigatingActionWaitOptions): Promise<void>;
      hover(options?: PointerActionOptions & types.PointerActionWaitOptions): Promise<void>;
      click(options?: ClickOptions & types.PointerActionWaitOptions & types.NavigatingActionWaitOptions): Promise<void>;
      dblclick(options?: MultiClickOptions & types.PointerActionWaitOptions & types.NavigatingActionWaitOptions): Promise<void>;
      selectOption(values: string | ElementHandle | types.SelectOption | string[] | ElementHandle[] | types.SelectOption[], options?: types.NavigatingActionWaitOptions): Promise<string[]>;
      fill(value: string, options?: types.NavigatingActionWaitOptions): Promise<void>;
      setInputFiles(files: string | types.FilePayload | string[] | types.FilePayload[]): Promise<void>;
      focus(): Promise<void>;
      type(text: string, options?: {
          delay?: number;
      } & types.NavigatingActionWaitOptions): Promise<void>;
      press(key: string, options?: {
          delay?: number;
      } & types.NavigatingActionWaitOptions): Promise<void>;
      check(options?: types.PointerActionWaitOptions & types.NavigatingActionWaitOptions): Promise<void>;
      uncheck(options?: types.PointerActionWaitOptions & types.NavigatingActionWaitOptions): Promise<void>;
      private _setChecked;
      boundingBox(): Promise<types.Rect | null>;
      screenshot(options?: types.ElementScreenshotOptions): Promise<platform.BufferType>;
      $(selector: string): Promise<ElementHandle | null>;
      $$(selector: string): Promise<ElementHandle<Element>[]>;
      $eval<R, Arg>(selector: string, pageFunction: types.FuncOn<Element, Arg, R>, arg: Arg): Promise<R>;
      $eval<R>(selector: string, pageFunction: types.FuncOn<Element, void, R>, arg?: any): Promise<R>;
      $$eval<R, Arg>(selector: string, pageFunction: types.FuncOn<Element[], Arg, R>, arg: Arg): Promise<R>;
      $$eval<R>(selector: string, pageFunction: types.FuncOn<Element[], void, R>, arg?: any): Promise<R>;
      _waitForDisplayedAtStablePosition(options?: types.TimeoutOptions): Promise<void>;
      _waitForHitTargetAt(point: types.Point, options?: types.TimeoutOptions): Promise<void>;
  }
  export const setFileInputFunction: (element: HTMLInputElement, payloads: types.FilePayload[]) => Promise<void>;

}
declare module 'playwright-core/errors' {
  /**
   * Copyright 2018 Google Inc. All rights reserved.
   * Modifications copyright (c) Microsoft Corporation.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *     http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  class CustomError extends Error {
      constructor(message: string);
  }
  export class TimeoutError extends CustomError {
  }
  export {};

}
declare module 'playwright-core/events' {
  /**
   * Copyright 2019 Google Inc. All rights reserved.
   * Modifications copyright (c) Microsoft Corporation.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *     http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  export const Events: {
      Browser: {
          Disconnected: string;
      };
      BrowserContext: {
          Close: string;
          Page: string;
      };
      BrowserServer: {
          Close: string;
      };
      Page: {
          Close: string;
          Console: string;
          Dialog: string;
          FileChooser: string;
          DOMContentLoaded: string;
          PageError: string;
          Request: string;
          Response: string;
          RequestFailed: string;
          RequestFinished: string;
          FrameAttached: string;
          FrameDetached: string;
          FrameNavigated: string;
          Load: string;
          Popup: string;
          Worker: string;
      };
      Worker: {
          Close: string;
      };
  };

}
declare module 'playwright-core/firefox/ffAccessibility' {
  /**
   * Copyright 2018 Google Inc. All rights reserved.
   * Modifications copyright (c) Microsoft Corporation.
   *
   * Licensed under the Apache License, Version 2.0 (the 'License');
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *     http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an 'AS IS' BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  import * as accessibility from 'playwright-core/accessibility';
  import { FFSession } from 'playwright-core/firefox/ffConnection';
  import * as dom from 'playwright-core/dom';
  export function getAccessibilityTree(session: FFSession, needle?: dom.ElementHandle): Promise<{
      tree: accessibility.AXNode;
      needle: accessibility.AXNode | null;
  }>;

}
declare module 'playwright-core/firefox/ffBrowser' {
  /**
   * Copyright 2018 Google Inc. All rights reserved.
   * Modifications copyright (c) Microsoft Corporation.
   *
   * Licensed under the Apache License, Version 2.0 (the 'License');
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *     http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an 'AS IS' BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  import { Browser } from 'playwright-core/browser';
  import { BrowserContext, BrowserContextBase, BrowserContextOptions } from 'playwright-core/browserContext';
  import * as network from 'playwright-core/network';
  import { Page } from 'playwright-core/page';
  import * as platform from 'playwright-core/platform';
  import { ConnectionTransport } from 'playwright-core/transport';
  import * as types from 'playwright-core/types';
  import { FFConnection } from 'playwright-core/firefox/ffConnection';
  import { FFPage } from 'playwright-core/firefox/ffPage';
  import { Protocol } from 'playwright-core/firefox/protocol';
  export class FFBrowser extends platform.EventEmitter implements Browser {
      _connection: FFConnection;
      readonly _ffPages: Map<string, FFPage>;
      readonly _defaultContext: FFBrowserContext;
      readonly _contexts: Map<string, FFBrowserContext>;
      private _eventListeners;
      readonly _firstPagePromise: Promise<void>;
      private _firstPageCallback;
      static connect(transport: ConnectionTransport, attachToDefaultContext: boolean, slowMo?: number): Promise<FFBrowser>;
      constructor(connection: FFConnection);
      isConnected(): boolean;
      newContext(options?: BrowserContextOptions): Promise<BrowserContext>;
      contexts(): BrowserContext[];
      newPage(options?: BrowserContextOptions): Promise<Page>;
      _onDetachedFromTarget(payload: Protocol.Browser.detachedFromTargetPayload): void;
      _onAttachedToTarget(payload: Protocol.Browser.attachedToTargetPayload): void;
      close(): Promise<void>;
      _setDebugFunction(debugFunction: (message: string) => void): void;
  }
  export class FFBrowserContext extends BrowserContextBase {
      readonly _browser: FFBrowser;
      readonly _browserContextId: string | null;
      private readonly _evaluateOnNewDocumentSources;
      constructor(browser: FFBrowser, browserContextId: string | null, options: BrowserContextOptions);
      _initialize(): Promise<void>;
      _ffPages(): FFPage[];
      setDefaultNavigationTimeout(timeout: number): void;
      setDefaultTimeout(timeout: number): void;
      pages(): Page[];
      newPage(): Promise<Page>;
      cookies(urls?: string | string[]): Promise<network.NetworkCookie[]>;
      addCookies(cookies: network.SetNetworkCookieParam[]): Promise<void>;
      clearCookies(): Promise<void>;
      _doGrantPermissions(origin: string, permissions: string[]): Promise<void>;
      _doClearPermissions(): Promise<void>;
      setGeolocation(geolocation: types.Geolocation | null): Promise<void>;
      setExtraHTTPHeaders(headers: network.Headers): Promise<void>;
      setOffline(offline: boolean): Promise<void>;
      setHTTPCredentials(httpCredentials: types.Credentials | null): Promise<void>;
      addInitScript(script: Function | string | {
          path?: string;
          content?: string;
      }, arg?: any): Promise<void>;
      exposeFunction(name: string, playwrightFunction: Function): Promise<void>;
      route(url: types.URLMatch, handler: network.RouteHandler): Promise<void>;
      close(): Promise<void>;
  }

}
declare module 'playwright-core/firefox/ffConnection' {
  /**
   * Copyright 2017 Google Inc. All rights reserved.
   * Modifications copyright (c) Microsoft Corporation.
   *
   * Licensed under the Apache License, Version 2.0 (the 'License');
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *     http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an 'AS IS' BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  import * as platform from 'playwright-core/platform';
  import { ConnectionTransport } from 'playwright-core/transport';
  import { Protocol } from 'playwright-core/firefox/protocol';
  export const ConnectionEvents: {
      Disconnected: symbol;
  };
  export const kBrowserCloseMessageId = -9999;
  export class FFConnection extends platform.EventEmitter {
      private _lastId;
      private _callbacks;
      private _transport;
      readonly _sessions: Map<string, FFSession>;
      _debugProtocol: (message: string) => void;
      _closed: boolean;
      on: <T extends keyof Protocol.Events | symbol>(event: T, listener: (payload: T extends symbol ? any : Protocol.Events[T extends keyof Protocol.Events ? T : never]) => void) => this;
      addListener: <T extends keyof Protocol.Events | symbol>(event: T, listener: (payload: T extends symbol ? any : Protocol.Events[T extends keyof Protocol.Events ? T : never]) => void) => this;
      off: <T extends keyof Protocol.Events | symbol>(event: T, listener: (payload: T extends symbol ? any : Protocol.Events[T extends keyof Protocol.Events ? T : never]) => void) => this;
      removeListener: <T extends keyof Protocol.Events | symbol>(event: T, listener: (payload: T extends symbol ? any : Protocol.Events[T extends keyof Protocol.Events ? T : never]) => void) => this;
      once: <T extends keyof Protocol.Events | symbol>(event: T, listener: (payload: T extends symbol ? any : Protocol.Events[T extends keyof Protocol.Events ? T : never]) => void) => this;
      constructor(transport: ConnectionTransport);
      send<T extends keyof Protocol.CommandParameters>(method: T, params?: Protocol.CommandParameters[T]): Promise<Protocol.CommandReturnValues[T]>;
      nextMessageId(): number;
      _rawSend(message: any): void;
      _onMessage(message: string): Promise<void>;
      _onClose(): void;
      close(): void;
      createSession(sessionId: string, type: string): FFSession;
  }
  export const FFSessionEvents: {
      Disconnected: symbol;
  };
  export class FFSession extends platform.EventEmitter {
      _connection: FFConnection;
      _disposed: boolean;
      private _callbacks;
      private _targetType;
      private _sessionId;
      private _rawSend;
      on: <T extends keyof Protocol.Events | symbol>(event: T, listener: (payload: T extends symbol ? any : Protocol.Events[T extends keyof Protocol.Events ? T : never]) => void) => this;
      addListener: <T extends keyof Protocol.Events | symbol>(event: T, listener: (payload: T extends symbol ? any : Protocol.Events[T extends keyof Protocol.Events ? T : never]) => void) => this;
      off: <T extends keyof Protocol.Events | symbol>(event: T, listener: (payload: T extends symbol ? any : Protocol.Events[T extends keyof Protocol.Events ? T : never]) => void) => this;
      removeListener: <T extends keyof Protocol.Events | symbol>(event: T, listener: (payload: T extends symbol ? any : Protocol.Events[T extends keyof Protocol.Events ? T : never]) => void) => this;
      once: <T extends keyof Protocol.Events | symbol>(event: T, listener: (payload: T extends symbol ? any : Protocol.Events[T extends keyof Protocol.Events ? T : never]) => void) => this;
      constructor(connection: FFConnection, targetType: string, sessionId: string, rawSend: (message: any) => void);
      send<T extends keyof Protocol.CommandParameters>(method: T, params?: Protocol.CommandParameters[T]): Promise<Protocol.CommandReturnValues[T]>;
      dispatchMessage(object: {
          id?: number;
          method: string;
          params: object;
          error: {
              message: string;
              data: any;
          };
          result?: any;
      }): void;
      dispose(): void;
  }

}
declare module 'playwright-core/firefox/ffExecutionContext' {
  /**
   * Copyright 2019 Google Inc. All rights reserved.
   * Modifications copyright (c) Microsoft Corporation.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *     http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  import * as js from 'playwright-core/javascript';
  import { FFSession } from 'playwright-core/firefox/ffConnection';
  import { Protocol } from 'playwright-core/firefox/protocol';
  export class FFExecutionContext implements js.ExecutionContextDelegate {
      _session: FFSession;
      _executionContextId: string;
      constructor(session: FFSession, executionContextId: string);
      evaluate(context: js.ExecutionContext, returnByValue: boolean, pageFunction: Function | string, ...args: any[]): Promise<any>;
      getProperties(handle: js.JSHandle): Promise<Map<string, js.JSHandle>>;
      releaseHandle(handle: js.JSHandle): Promise<void>;
      handleJSONValue<T>(handle: js.JSHandle<T>): Promise<T>;
      handleToString(handle: js.JSHandle, includeType: boolean): string;
      private _toCallArgument;
  }
  export function deserializeValue({ unserializableValue, value }: Protocol.Runtime.RemoteObject): any;

}
declare module 'playwright-core/firefox/ffInput' {
  /**
   * Copyright 2017 Google Inc. All rights reserved.
   * Modifications copyright (c) Microsoft Corporation.
   *
   * Licensed under the Apache License, Version 2.0 (the 'License');
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *     http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an 'AS IS' BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  import { FFSession } from 'playwright-core/firefox/ffConnection';
  import * as input from 'playwright-core/input';
  export class RawKeyboardImpl implements input.RawKeyboard {
      private _client;
      constructor(client: FFSession);
      keydown(modifiers: Set<input.Modifier>, code: string, keyCode: number, keyCodeWithoutLocation: number, key: string, location: number, autoRepeat: boolean, text: string | undefined): Promise<void>;
      keyup(modifiers: Set<input.Modifier>, code: string, keyCode: number, keyCodeWithoutLocation: number, key: string, location: number): Promise<void>;
      sendText(text: string): Promise<void>;
  }
  export class RawMouseImpl implements input.RawMouse {
      private _client;
      constructor(client: FFSession);
      move(x: number, y: number, button: input.Button | 'none', buttons: Set<input.Button>, modifiers: Set<input.Modifier>): Promise<void>;
      down(x: number, y: number, button: input.Button, buttons: Set<input.Button>, modifiers: Set<input.Modifier>, clickCount: number): Promise<void>;
      up(x: number, y: number, button: input.Button, buttons: Set<input.Button>, modifiers: Set<input.Modifier>, clickCount: number): Promise<void>;
  }

}
declare module 'playwright-core/firefox/ffNetworkManager' {
  /**
   * Copyright 2019 Google Inc. All rights reserved.
   * Modifications copyright (c) Microsoft Corporation.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *     http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  import { FFSession } from 'playwright-core/firefox/ffConnection';
  import { Page } from 'playwright-core/page';
  import * as network from 'playwright-core/network';
  import { Protocol } from 'playwright-core/firefox/protocol';
  export class FFNetworkManager {
      private _session;
      private _requests;
      private _page;
      private _eventListeners;
      constructor(session: FFSession, page: Page);
      dispose(): void;
      setRequestInterception(enabled: boolean): Promise<void>;
      _onRequestWillBeSent(event: Protocol.Network.requestWillBeSentPayload): void;
      _onResponseReceived(event: Protocol.Network.responseReceivedPayload): void;
      _onRequestFinished(event: Protocol.Network.requestFinishedPayload): void;
      _onRequestFailed(event: Protocol.Network.requestFailedPayload): void;
  }
  export function headersArray(headers: network.Headers): Protocol.Network.HTTPHeader[];

}
declare module 'playwright-core/firefox/ffPage' {
  /**
   * Copyright 2019 Google Inc. All rights reserved.
   * Modifications copyright (c) Microsoft Corporation.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *     http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  import * as dom from 'playwright-core/dom';
  import * as frames from 'playwright-core/frames';
  import { Page, PageBinding, PageDelegate } from 'playwright-core/page';
  import * as platform from 'playwright-core/platform';
  import * as types from 'playwright-core/types';
  import { FFBrowserContext } from 'playwright-core/firefox/ffBrowser';
  import { FFSession } from 'playwright-core/firefox/ffConnection';
  import { RawKeyboardImpl, RawMouseImpl } from 'playwright-core/firefox/ffInput';
  import { FFNetworkManager } from 'playwright-core/firefox/ffNetworkManager';
  import { Protocol } from 'playwright-core/firefox/protocol';
  export class FFPage implements PageDelegate {
      readonly rawMouse: RawMouseImpl;
      readonly rawKeyboard: RawKeyboardImpl;
      readonly _session: FFSession;
      readonly _page: Page;
      readonly _networkManager: FFNetworkManager;
      readonly _browserContext: FFBrowserContext;
      private _pagePromise;
      private _pageCallback;
      private _initialized;
      private readonly _opener;
      private readonly _contextIdToContext;
      private _eventListeners;
      private _workers;
      constructor(session: FFSession, browserContext: FFBrowserContext, opener: FFPage | null);
      _initialize(): Promise<void>;
      _initializedPage(): Page | null;
      pageOrError(): Promise<Page | Error>;
      _onExecutionContextCreated(payload: Protocol.Runtime.executionContextCreatedPayload): void;
      _onExecutionContextDestroyed(payload: Protocol.Runtime.executionContextDestroyedPayload): void;
      private _removeContextsForFrame;
      _onLinkClicked(phase: 'before' | 'after'): void;
      _onNavigationStarted(frameId: string): void;
      _onNavigationAborted(params: Protocol.Page.navigationAbortedPayload): void;
      _onNavigationCommitted(params: Protocol.Page.navigationCommittedPayload): void;
      _onSameDocumentNavigation(params: Protocol.Page.sameDocumentNavigationPayload): void;
      _onFrameAttached(params: Protocol.Page.frameAttachedPayload): void;
      _onFrameDetached(params: Protocol.Page.frameDetachedPayload): void;
      _onEventFired(payload: Protocol.Page.eventFiredPayload): void;
      _onUncaughtError(params: Protocol.Page.uncaughtErrorPayload): void;
      _onConsole(payload: Protocol.Runtime.consolePayload): void;
      _onDialogOpened(params: Protocol.Page.dialogOpenedPayload): void;
      _onBindingCalled(event: Protocol.Page.bindingCalledPayload): void;
      _onFileChooserOpened(payload: Protocol.Page.fileChooserOpenedPayload): Promise<void>;
      _onWorkerCreated(event: Protocol.Page.workerCreatedPayload): Promise<void>;
      _onWorkerDestroyed(event: Protocol.Page.workerDestroyedPayload): Promise<void>;
      _onDispatchMessageFromWorker(event: Protocol.Page.dispatchMessageFromWorkerPayload): Promise<void>;
      _onCrashed(event: Protocol.Page.crashedPayload): Promise<void>;
      exposeBinding(binding: PageBinding): Promise<void>;
      didClose(): void;
      navigateFrame(frame: frames.Frame, url: string, referer: string | undefined): Promise<frames.GotoResult>;
      updateExtraHTTPHeaders(): Promise<void>;
      setViewportSize(viewportSize: types.Size): Promise<void>;
      setEmulateMedia(mediaType: types.MediaType | null, colorScheme: types.ColorScheme | null): Promise<void>;
      updateRequestInterception(): Promise<void>;
      setFileChooserIntercepted(enabled: boolean): Promise<void>;
      opener(): Promise<Page | null>;
      reload(): Promise<void>;
      goBack(): Promise<boolean>;
      goForward(): Promise<boolean>;
      evaluateOnNewDocument(source: string): Promise<void>;
      closePage(runBeforeUnload: boolean): Promise<void>;
      canScreenshotOutsideViewport(): boolean;
      setBackgroundColor(color?: {
          r: number;
          g: number;
          b: number;
          a: number;
      }): Promise<void>;
      takeScreenshot(format: 'png' | 'jpeg', documentRect: types.Rect | undefined, viewportRect: types.Rect | undefined, quality: number | undefined): Promise<platform.BufferType>;
      resetViewport(): Promise<void>;
      getContentFrame(handle: dom.ElementHandle): Promise<frames.Frame | null>;
      getOwnerFrame(handle: dom.ElementHandle): Promise<string | null>;
      isElementHandle(remoteObject: any): boolean;
      getBoundingBox(handle: dom.ElementHandle): Promise<types.Rect | null>;
      scrollRectIntoViewIfNeeded(handle: dom.ElementHandle, rect?: types.Rect): Promise<void>;
      getContentQuads(handle: dom.ElementHandle): Promise<types.Quad[] | null>;
      layoutViewport(): Promise<{
          width: number;
          height: number;
      }>;
      setInputFiles(handle: dom.ElementHandle<HTMLInputElement>, files: types.FilePayload[]): Promise<void>;
      adoptElementHandle<T extends Node>(handle: dom.ElementHandle<T>, to: dom.FrameExecutionContext): Promise<dom.ElementHandle<T>>;
      getAccessibilityTree(needle?: dom.ElementHandle): Promise<{
          tree: import("playwright-core/accessibility").AXNode;
          needle: import("playwright-core/accessibility").AXNode | null;
      }>;
      inputActionEpilogue(): Promise<void>;
      getFrameElement(frame: frames.Frame): Promise<dom.ElementHandle>;
  }

}
declare module 'playwright-core/firefox/protocol' {
  export module Protocol {
      module Browser {
          type TargetInfo = {
              type: ("page");
              targetId: string;
              browserContextId?: string;
              openerId?: string;
          };
          type CookieOptions = {
              name: string;
              value: string;
              url?: string;
              domain?: string;
              path?: string;
              secure?: boolean;
              httpOnly?: boolean;
              sameSite?: ("Strict" | "Lax" | "None");
              expires?: number;
          };
          type Cookie = {
              name: string;
              domain: string;
              path: string;
              value: string;
              expires: number;
              size: number;
              httpOnly: boolean;
              secure: boolean;
              session: boolean;
              sameSite: ("Strict" | "Lax" | "None");
          };
          type Geolocation = {
              latitude: number;
              longitude: number;
              accuracy?: number;
          };
          type attachedToTargetPayload = {
              sessionId: string;
              targetInfo: {
                  type: ("page");
                  targetId: string;
                  browserContextId?: string;
                  openerId?: string;
              };
          };
          type detachedFromTargetPayload = {
              sessionId: string;
              targetId: string;
          };
          type enableParameters = {
              attachToDefaultContext: boolean;
          };
          type enableReturnValue = void;
          type createBrowserContextParameters = {
              removeOnDetach?: boolean;
              userAgent?: string;
              bypassCSP?: boolean;
              javaScriptDisabled?: boolean;
              viewport?: {
                  viewportSize: {
                      width: number;
                      height: number;
                  };
                  deviceScaleFactor: number;
                  isMobile: boolean;
                  hasTouch: boolean;
              };
              locale?: string;
          };
          type createBrowserContextReturnValue = {
              browserContextId: string;
          };
          type removeBrowserContextParameters = {
              browserContextId: string;
          };
          type removeBrowserContextReturnValue = void;
          type newPageParameters = {
              browserContextId?: string;
          };
          type newPageReturnValue = {
              targetId: string;
          };
          type closeParameters = void;
          type closeReturnValue = void;
          type getInfoParameters = void;
          type getInfoReturnValue = {
              userAgent: string;
              version: string;
          };
          type setIgnoreHTTPSErrorsParameters = {
              enabled: boolean;
          };
          type setIgnoreHTTPSErrorsReturnValue = void;
          type setExtraHTTPHeadersParameters = {
              browserContextId?: string;
              headers: {
                  name: string;
                  value: string;
              }[];
          };
          type setExtraHTTPHeadersReturnValue = void;
          type setHTTPCredentialsParameters = {
              browserContextId?: string;
              credentials: {
                  username: string;
                  password: string;
              } | null;
          };
          type setHTTPCredentialsReturnValue = void;
          type setRequestInterceptionParameters = {
              browserContextId?: string;
              enabled: boolean;
          };
          type setRequestInterceptionReturnValue = void;
          type setGeolocationOverrideParameters = {
              browserContextId?: string;
              geolocation: {
                  latitude: number;
                  longitude: number;
                  accuracy?: number;
              } | null;
          };
          type setGeolocationOverrideReturnValue = void;
          type addScriptToEvaluateOnNewDocumentParameters = {
              browserContextId?: string;
              script: string;
          };
          type addScriptToEvaluateOnNewDocumentReturnValue = void;
          type addBindingParameters = {
              browserContextId?: string;
              name: string;
              script: string;
          };
          type addBindingReturnValue = void;
          type grantPermissionsParameters = {
              origin: string;
              browserContextId?: string;
              permissions: string[];
          };
          type grantPermissionsReturnValue = void;
          type resetPermissionsParameters = {
              browserContextId?: string;
          };
          type resetPermissionsReturnValue = void;
          type setCookiesParameters = {
              browserContextId?: string;
              cookies: {
                  name: string;
                  value: string;
                  url?: string;
                  domain?: string;
                  path?: string;
                  secure?: boolean;
                  httpOnly?: boolean;
                  sameSite?: ("Strict" | "Lax" | "None");
                  expires?: number;
              }[];
          };
          type setCookiesReturnValue = void;
          type clearCookiesParameters = {
              browserContextId?: string;
          };
          type clearCookiesReturnValue = void;
          type getCookiesParameters = {
              browserContextId?: string;
          };
          type getCookiesReturnValue = {
              cookies: {
                  name: string;
                  domain: string;
                  path: string;
                  value: string;
                  expires: number;
                  size: number;
                  httpOnly: boolean;
                  secure: boolean;
                  session: boolean;
                  sameSite: ("Strict" | "Lax" | "None");
              }[];
          };
          type setOnlineOverrideParameters = {
              browserContextId?: string;
              override?: ("online" | "offline");
          };
          type setOnlineOverrideReturnValue = void;
      }
      module Page {
          type DOMPoint = {
              x: number;
              y: number;
          };
          type Rect = {
              x: number;
              y: number;
              width: number;
              height: number;
          };
          type Size = {
              width: number;
              height: number;
          };
          type Viewport = {
              viewportSize: {
                  width: number;
                  height: number;
              };
              deviceScaleFactor: number;
              isMobile: boolean;
              hasTouch: boolean;
          };
          type DOMQuad = {
              p1: {
                  x: number;
                  y: number;
              };
              p2: {
                  x: number;
                  y: number;
              };
              p3: {
                  x: number;
                  y: number;
              };
              p4: {
                  x: number;
                  y: number;
              };
          };
          type TouchPoint = {
              x: number;
              y: number;
              radiusX?: number;
              radiusY?: number;
              rotationAngle?: number;
              force?: number;
          };
          type Clip = {
              x: number;
              y: number;
              width: number;
              height: number;
          };
          type readyPayload = {};
          type crashedPayload = {};
          type eventFiredPayload = {
              frameId: string;
              name: ("load" | "DOMContentLoaded");
          };
          type uncaughtErrorPayload = {
              frameId: string;
              message: string;
              stack: string;
          };
          type frameAttachedPayload = {
              frameId: string;
              parentFrameId?: string;
          };
          type frameDetachedPayload = {
              frameId: string;
          };
          type navigationStartedPayload = {
              frameId: string;
              navigationId: string;
              url: string;
          };
          type navigationCommittedPayload = {
              frameId: string;
              navigationId?: string;
              url: string;
              name: string;
          };
          type navigationAbortedPayload = {
              frameId: string;
              navigationId: string;
              errorText: string;
          };
          type sameDocumentNavigationPayload = {
              frameId: string;
              url: string;
          };
          type dialogOpenedPayload = {
              dialogId: string;
              type: ("prompt" | "alert" | "confirm" | "beforeunload");
              message: string;
              defaultValue?: string;
          };
          type dialogClosedPayload = {
              dialogId: string;
          };
          type bindingCalledPayload = {
              executionContextId: string;
              name: string;
              payload: any;
          };
          type linkClickedPayload = {
              phase: ("before" | "after");
          };
          type fileChooserOpenedPayload = {
              executionContextId: string;
              element: {
                  type?: ("object" | "function" | "undefined" | "string" | "number" | "boolean" | "symbol" | "bigint");
                  subtype?: ("array" | "null" | "node" | "regexp" | "date" | "map" | "set" | "weakmap" | "weakset" | "error" | "proxy" | "promise" | "typedarray");
                  objectId?: string;
                  unserializableValue?: ("Infinity" | "-Infinity" | "-0" | "NaN");
                  value: any;
              };
          };
          type workerCreatedPayload = {
              workerId: string;
              frameId: string;
              url: string;
          };
          type workerDestroyedPayload = {
              workerId: string;
          };
          type dispatchMessageFromWorkerPayload = {
              workerId: string;
              message: string;
          };
          type closeParameters = {
              runBeforeUnload?: boolean;
          };
          type closeReturnValue = void;
          type setFileInputFilesParameters = {
              frameId: string;
              objectId: string;
              files: string[];
          };
          type setFileInputFilesReturnValue = void;
          type addBindingParameters = {
              name: string;
              script: string;
          };
          type addBindingReturnValue = void;
          type setViewportSizeParameters = {
              viewportSize: {
                  width: number;
                  height: number;
              } | null;
          };
          type setViewportSizeReturnValue = void;
          type setEmulatedMediaParameters = {
              type?: ("screen" | "print" | "");
              colorScheme?: ("dark" | "light" | "no-preference");
          };
          type setEmulatedMediaReturnValue = void;
          type setCacheDisabledParameters = {
              cacheDisabled: boolean;
          };
          type setCacheDisabledReturnValue = void;
          type describeNodeParameters = {
              frameId: string;
              objectId: string;
          };
          type describeNodeReturnValue = {
              contentFrameId?: string;
              ownerFrameId?: string;
          };
          type scrollIntoViewIfNeededParameters = {
              frameId: string;
              objectId: string;
              rect?: {
                  x: number;
                  y: number;
                  width: number;
                  height: number;
              };
          };
          type scrollIntoViewIfNeededReturnValue = void;
          type addScriptToEvaluateOnNewDocumentParameters = {
              script: string;
              worldName?: string;
          };
          type addScriptToEvaluateOnNewDocumentReturnValue = {
              scriptId: string;
          };
          type removeScriptToEvaluateOnNewDocumentParameters = {
              scriptId: string;
          };
          type removeScriptToEvaluateOnNewDocumentReturnValue = void;
          type navigateParameters = {
              frameId: string;
              url: string;
              referer?: string;
          };
          type navigateReturnValue = {
              navigationId: string | null;
              navigationURL: string | null;
          };
          type goBackParameters = {
              frameId: string;
          };
          type goBackReturnValue = {
              navigationId: string | null;
              navigationURL: string | null;
          };
          type goForwardParameters = {
              frameId: string;
          };
          type goForwardReturnValue = {
              navigationId: string | null;
              navigationURL: string | null;
          };
          type reloadParameters = {
              frameId: string;
          };
          type reloadReturnValue = {
              navigationId: string;
              navigationURL: string;
          };
          type getBoundingBoxParameters = {
              frameId: string;
              objectId: string;
          };
          type getBoundingBoxReturnValue = {
              boundingBox: {
                  x: number;
                  y: number;
                  width: number;
                  height: number;
              } | null;
          };
          type adoptNodeParameters = {
              frameId: string;
              objectId: string;
              executionContextId: string;
          };
          type adoptNodeReturnValue = {
              remoteObject: {
                  type?: ("object" | "function" | "undefined" | "string" | "number" | "boolean" | "symbol" | "bigint");
                  subtype?: ("array" | "null" | "node" | "regexp" | "date" | "map" | "set" | "weakmap" | "weakset" | "error" | "proxy" | "promise" | "typedarray");
                  objectId?: string;
                  unserializableValue?: ("Infinity" | "-Infinity" | "-0" | "NaN");
                  value: any;
              } | null;
          };
          type screenshotParameters = {
              mimeType: ("image/png" | "image/jpeg");
              fullPage?: boolean;
              clip?: {
                  x: number;
                  y: number;
                  width: number;
                  height: number;
              };
          };
          type screenshotReturnValue = {
              data: string;
          };
          type getContentQuadsParameters = {
              frameId: string;
              objectId: string;
          };
          type getContentQuadsReturnValue = {
              quads: {
                  p1: {
                      x: number;
                      y: number;
                  };
                  p2: {
                      x: number;
                      y: number;
                  };
                  p3: {
                      x: number;
                      y: number;
                  };
                  p4: {
                      x: number;
                      y: number;
                  };
              }[];
          };
          type dispatchKeyEventParameters = {
              type: string;
              key: string;
              keyCode: number;
              location: number;
              code: string;
              repeat: boolean;
              text?: string;
          };
          type dispatchKeyEventReturnValue = void;
          type dispatchTouchEventParameters = {
              type: ("touchStart" | "touchEnd" | "touchMove" | "touchCancel");
              touchPoints: {
                  x: number;
                  y: number;
                  radiusX?: number;
                  radiusY?: number;
                  rotationAngle?: number;
                  force?: number;
              }[];
              modifiers: number;
          };
          type dispatchTouchEventReturnValue = {
              defaultPrevented: boolean;
          };
          type dispatchMouseEventParameters = {
              type: string;
              button: number;
              x: number;
              y: number;
              modifiers: number;
              clickCount?: number;
              buttons: number;
          };
          type dispatchMouseEventReturnValue = void;
          type insertTextParameters = {
              text: string;
          };
          type insertTextReturnValue = void;
          type crashParameters = {};
          type crashReturnValue = void;
          type handleDialogParameters = {
              dialogId: string;
              accept: boolean;
              promptText?: string;
          };
          type handleDialogReturnValue = void;
          type setInterceptFileChooserDialogParameters = {
              enabled: boolean;
          };
          type setInterceptFileChooserDialogReturnValue = void;
          type sendMessageToWorkerParameters = {
              frameId: string;
              workerId: string;
              message: string;
          };
          type sendMessageToWorkerReturnValue = void;
      }
      module Runtime {
          type RemoteObject = {
              type?: ("object" | "function" | "undefined" | "string" | "number" | "boolean" | "symbol" | "bigint");
              subtype?: ("array" | "null" | "node" | "regexp" | "date" | "map" | "set" | "weakmap" | "weakset" | "error" | "proxy" | "promise" | "typedarray");
              objectId?: string;
              unserializableValue?: ("Infinity" | "-Infinity" | "-0" | "NaN");
              value: any;
          };
          type ObjectProperty = {
              name: string;
              value: {
                  type?: ("object" | "function" | "undefined" | "string" | "number" | "boolean" | "symbol" | "bigint");
                  subtype?: ("array" | "null" | "node" | "regexp" | "date" | "map" | "set" | "weakmap" | "weakset" | "error" | "proxy" | "promise" | "typedarray");
                  objectId?: string;
                  unserializableValue?: ("Infinity" | "-Infinity" | "-0" | "NaN");
                  value: any;
              };
          };
          type ScriptLocation = {
              columnNumber: number;
              lineNumber: number;
              url: string;
          };
          type ExceptionDetails = {
              text?: string;
              stack?: string;
              value?: any;
          };
          type CallFunctionArgument = {
              objectId?: string;
              unserializableValue?: ("Infinity" | "-Infinity" | "-0" | "NaN");
              value: any;
          };
          type executionContextCreatedPayload = {
              executionContextId: string;
              auxData: any;
          };
          type executionContextDestroyedPayload = {
              executionContextId: string;
          };
          type consolePayload = {
              executionContextId: string;
              args: {
                  type?: ("object" | "function" | "undefined" | "string" | "number" | "boolean" | "symbol" | "bigint");
                  subtype?: ("array" | "null" | "node" | "regexp" | "date" | "map" | "set" | "weakmap" | "weakset" | "error" | "proxy" | "promise" | "typedarray");
                  objectId?: string;
                  unserializableValue?: ("Infinity" | "-Infinity" | "-0" | "NaN");
                  value: any;
              }[];
              type: string;
              location: {
                  columnNumber: number;
                  lineNumber: number;
                  url: string;
              };
          };
          type evaluateParameters = {
              executionContextId: string;
              expression: string;
              returnByValue?: boolean;
          };
          type evaluateReturnValue = {
              result?: {
                  type?: ("object" | "function" | "undefined" | "string" | "number" | "boolean" | "symbol" | "bigint");
                  subtype?: ("array" | "null" | "node" | "regexp" | "date" | "map" | "set" | "weakmap" | "weakset" | "error" | "proxy" | "promise" | "typedarray");
                  objectId?: string;
                  unserializableValue?: ("Infinity" | "-Infinity" | "-0" | "NaN");
                  value: any;
              };
              exceptionDetails?: {
                  text?: string;
                  stack?: string;
                  value?: any;
              };
          };
          type callFunctionParameters = {
              executionContextId: string;
              functionDeclaration: string;
              returnByValue?: boolean;
              args: {
                  objectId?: string;
                  unserializableValue?: ("Infinity" | "-Infinity" | "-0" | "NaN");
                  value: any;
              }[];
          };
          type callFunctionReturnValue = {
              result?: {
                  type?: ("object" | "function" | "undefined" | "string" | "number" | "boolean" | "symbol" | "bigint");
                  subtype?: ("array" | "null" | "node" | "regexp" | "date" | "map" | "set" | "weakmap" | "weakset" | "error" | "proxy" | "promise" | "typedarray");
                  objectId?: string;
                  unserializableValue?: ("Infinity" | "-Infinity" | "-0" | "NaN");
                  value: any;
              };
              exceptionDetails?: {
                  text?: string;
                  stack?: string;
                  value?: any;
              };
          };
          type disposeObjectParameters = {
              executionContextId: string;
              objectId: string;
          };
          type disposeObjectReturnValue = void;
          type getObjectPropertiesParameters = {
              executionContextId: string;
              objectId: string;
          };
          type getObjectPropertiesReturnValue = {
              properties: {
                  name: string;
                  value: {
                      type?: ("object" | "function" | "undefined" | "string" | "number" | "boolean" | "symbol" | "bigint");
                      subtype?: ("array" | "null" | "node" | "regexp" | "date" | "map" | "set" | "weakmap" | "weakset" | "error" | "proxy" | "promise" | "typedarray");
                      objectId?: string;
                      unserializableValue?: ("Infinity" | "-Infinity" | "-0" | "NaN");
                      value: any;
                  };
              }[];
          };
      }
      module Network {
          type HTTPHeader = {
              name: string;
              value: string;
          };
          type HTTPCredentials = {
              username: string;
              password: string;
          };
          type SecurityDetails = {
              protocol: string;
              subjectName: string;
              issuer: string;
              validFrom: number;
              validTo: number;
          };
          type requestWillBeSentPayload = {
              frameId?: string;
              requestId: string;
              redirectedFrom?: string;
              postData?: string;
              headers: {
                  name: string;
                  value: string;
              }[];
              isIntercepted: boolean;
              url: string;
              method: string;
              navigationId?: string;
              cause: string;
          };
          type responseReceivedPayload = {
              securityDetails: {
                  protocol: string;
                  subjectName: string;
                  issuer: string;
                  validFrom: number;
                  validTo: number;
              } | null;
              requestId: string;
              fromCache: boolean;
              remoteIPAddress?: string;
              remotePort?: number;
              status: number;
              statusText: string;
              headers: {
                  name: string;
                  value: string;
              }[];
          };
          type requestFinishedPayload = {
              requestId: string;
          };
          type requestFailedPayload = {
              requestId: string;
              errorCode: string;
          };
          type setRequestInterceptionParameters = {
              enabled: boolean;
          };
          type setRequestInterceptionReturnValue = void;
          type setExtraHTTPHeadersParameters = {
              headers: {
                  name: string;
                  value: string;
              }[];
          };
          type setExtraHTTPHeadersReturnValue = void;
          type abortInterceptedRequestParameters = {
              requestId: string;
              errorCode: string;
          };
          type abortInterceptedRequestReturnValue = void;
          type resumeInterceptedRequestParameters = {
              requestId: string;
              method?: string;
              headers?: {
                  name: string;
                  value: string;
              }[];
              postData?: string;
          };
          type resumeInterceptedRequestReturnValue = void;
          type fulfillInterceptedRequestParameters = {
              requestId: string;
              status: number;
              statusText: string;
              headers: {
                  name: string;
                  value: string;
              }[];
              base64body?: string;
          };
          type fulfillInterceptedRequestReturnValue = void;
          type getResponseBodyParameters = {
              requestId: string;
          };
          type getResponseBodyReturnValue = {
              base64body: string;
              evicted?: boolean;
          };
      }
      module Accessibility {
          type AXTree = {
              role: string;
              name: string;
              children?: AXTree[];
              selected?: boolean;
              focused?: boolean;
              pressed?: boolean;
              focusable?: boolean;
              haspopup?: boolean;
              required?: boolean;
              invalid?: boolean;
              modal?: boolean;
              editable?: boolean;
              busy?: boolean;
              multiline?: boolean;
              readonly?: boolean;
              checked?: ("mixed" | true);
              expanded?: boolean;
              disabled?: boolean;
              multiselectable?: boolean;
              value?: string;
              description?: string;
              roledescription?: string;
              valuetext?: string;
              orientation?: string;
              autocomplete?: string;
              keyshortcuts?: string;
              level?: number;
              tag?: string;
              foundObject?: boolean;
          };
          type getFullAXTreeParameters = {
              objectId?: string;
          };
          type getFullAXTreeReturnValue = {
              tree: {
                  role: string;
                  name: string;
                  children?: AXTree[];
                  selected?: boolean;
                  focused?: boolean;
                  pressed?: boolean;
                  focusable?: boolean;
                  haspopup?: boolean;
                  required?: boolean;
                  invalid?: boolean;
                  modal?: boolean;
                  editable?: boolean;
                  busy?: boolean;
                  multiline?: boolean;
                  readonly?: boolean;
                  checked?: ("mixed" | true);
                  expanded?: boolean;
                  disabled?: boolean;
                  multiselectable?: boolean;
                  value?: string;
                  description?: string;
                  roledescription?: string;
                  valuetext?: string;
                  orientation?: string;
                  autocomplete?: string;
                  keyshortcuts?: string;
                  level?: number;
                  tag?: string;
                  foundObject?: boolean;
              };
          };
      }
      interface Events {
          "Browser.attachedToTarget": Browser.attachedToTargetPayload;
          "Browser.detachedFromTarget": Browser.detachedFromTargetPayload;
          "Page.ready": Page.readyPayload;
          "Page.crashed": Page.crashedPayload;
          "Page.eventFired": Page.eventFiredPayload;
          "Page.uncaughtError": Page.uncaughtErrorPayload;
          "Page.frameAttached": Page.frameAttachedPayload;
          "Page.frameDetached": Page.frameDetachedPayload;
          "Page.navigationStarted": Page.navigationStartedPayload;
          "Page.navigationCommitted": Page.navigationCommittedPayload;
          "Page.navigationAborted": Page.navigationAbortedPayload;
          "Page.sameDocumentNavigation": Page.sameDocumentNavigationPayload;
          "Page.dialogOpened": Page.dialogOpenedPayload;
          "Page.dialogClosed": Page.dialogClosedPayload;
          "Page.bindingCalled": Page.bindingCalledPayload;
          "Page.linkClicked": Page.linkClickedPayload;
          "Page.fileChooserOpened": Page.fileChooserOpenedPayload;
          "Page.workerCreated": Page.workerCreatedPayload;
          "Page.workerDestroyed": Page.workerDestroyedPayload;
          "Page.dispatchMessageFromWorker": Page.dispatchMessageFromWorkerPayload;
          "Runtime.executionContextCreated": Runtime.executionContextCreatedPayload;
          "Runtime.executionContextDestroyed": Runtime.executionContextDestroyedPayload;
          "Runtime.console": Runtime.consolePayload;
          "Network.requestWillBeSent": Network.requestWillBeSentPayload;
          "Network.responseReceived": Network.responseReceivedPayload;
          "Network.requestFinished": Network.requestFinishedPayload;
          "Network.requestFailed": Network.requestFailedPayload;
      }
      interface CommandParameters {
          "Browser.enable": Browser.enableParameters;
          "Browser.createBrowserContext": Browser.createBrowserContextParameters;
          "Browser.removeBrowserContext": Browser.removeBrowserContextParameters;
          "Browser.newPage": Browser.newPageParameters;
          "Browser.close": Browser.closeParameters;
          "Browser.getInfo": Browser.getInfoParameters;
          "Browser.setIgnoreHTTPSErrors": Browser.setIgnoreHTTPSErrorsParameters;
          "Browser.setExtraHTTPHeaders": Browser.setExtraHTTPHeadersParameters;
          "Browser.setHTTPCredentials": Browser.setHTTPCredentialsParameters;
          "Browser.setRequestInterception": Browser.setRequestInterceptionParameters;
          "Browser.setGeolocationOverride": Browser.setGeolocationOverrideParameters;
          "Browser.addScriptToEvaluateOnNewDocument": Browser.addScriptToEvaluateOnNewDocumentParameters;
          "Browser.addBinding": Browser.addBindingParameters;
          "Browser.grantPermissions": Browser.grantPermissionsParameters;
          "Browser.resetPermissions": Browser.resetPermissionsParameters;
          "Browser.setCookies": Browser.setCookiesParameters;
          "Browser.clearCookies": Browser.clearCookiesParameters;
          "Browser.getCookies": Browser.getCookiesParameters;
          "Browser.setOnlineOverride": Browser.setOnlineOverrideParameters;
          "Page.close": Page.closeParameters;
          "Page.setFileInputFiles": Page.setFileInputFilesParameters;
          "Page.addBinding": Page.addBindingParameters;
          "Page.setViewportSize": Page.setViewportSizeParameters;
          "Page.setEmulatedMedia": Page.setEmulatedMediaParameters;
          "Page.setCacheDisabled": Page.setCacheDisabledParameters;
          "Page.describeNode": Page.describeNodeParameters;
          "Page.scrollIntoViewIfNeeded": Page.scrollIntoViewIfNeededParameters;
          "Page.addScriptToEvaluateOnNewDocument": Page.addScriptToEvaluateOnNewDocumentParameters;
          "Page.removeScriptToEvaluateOnNewDocument": Page.removeScriptToEvaluateOnNewDocumentParameters;
          "Page.navigate": Page.navigateParameters;
          "Page.goBack": Page.goBackParameters;
          "Page.goForward": Page.goForwardParameters;
          "Page.reload": Page.reloadParameters;
          "Page.getBoundingBox": Page.getBoundingBoxParameters;
          "Page.adoptNode": Page.adoptNodeParameters;
          "Page.screenshot": Page.screenshotParameters;
          "Page.getContentQuads": Page.getContentQuadsParameters;
          "Page.dispatchKeyEvent": Page.dispatchKeyEventParameters;
          "Page.dispatchTouchEvent": Page.dispatchTouchEventParameters;
          "Page.dispatchMouseEvent": Page.dispatchMouseEventParameters;
          "Page.insertText": Page.insertTextParameters;
          "Page.crash": Page.crashParameters;
          "Page.handleDialog": Page.handleDialogParameters;
          "Page.setInterceptFileChooserDialog": Page.setInterceptFileChooserDialogParameters;
          "Page.sendMessageToWorker": Page.sendMessageToWorkerParameters;
          "Runtime.evaluate": Runtime.evaluateParameters;
          "Runtime.callFunction": Runtime.callFunctionParameters;
          "Runtime.disposeObject": Runtime.disposeObjectParameters;
          "Runtime.getObjectProperties": Runtime.getObjectPropertiesParameters;
          "Network.setRequestInterception": Network.setRequestInterceptionParameters;
          "Network.setExtraHTTPHeaders": Network.setExtraHTTPHeadersParameters;
          "Network.abortInterceptedRequest": Network.abortInterceptedRequestParameters;
          "Network.resumeInterceptedRequest": Network.resumeInterceptedRequestParameters;
          "Network.fulfillInterceptedRequest": Network.fulfillInterceptedRequestParameters;
          "Network.getResponseBody": Network.getResponseBodyParameters;
          "Accessibility.getFullAXTree": Accessibility.getFullAXTreeParameters;
      }
      interface CommandReturnValues {
          "Browser.enable": Browser.enableReturnValue;
          "Browser.createBrowserContext": Browser.createBrowserContextReturnValue;
          "Browser.removeBrowserContext": Browser.removeBrowserContextReturnValue;
          "Browser.newPage": Browser.newPageReturnValue;
          "Browser.close": Browser.closeReturnValue;
          "Browser.getInfo": Browser.getInfoReturnValue;
          "Browser.setIgnoreHTTPSErrors": Browser.setIgnoreHTTPSErrorsReturnValue;
          "Browser.setExtraHTTPHeaders": Browser.setExtraHTTPHeadersReturnValue;
          "Browser.setHTTPCredentials": Browser.setHTTPCredentialsReturnValue;
          "Browser.setRequestInterception": Browser.setRequestInterceptionReturnValue;
          "Browser.setGeolocationOverride": Browser.setGeolocationOverrideReturnValue;
          "Browser.addScriptToEvaluateOnNewDocument": Browser.addScriptToEvaluateOnNewDocumentReturnValue;
          "Browser.addBinding": Browser.addBindingReturnValue;
          "Browser.grantPermissions": Browser.grantPermissionsReturnValue;
          "Browser.resetPermissions": Browser.resetPermissionsReturnValue;
          "Browser.setCookies": Browser.setCookiesReturnValue;
          "Browser.clearCookies": Browser.clearCookiesReturnValue;
          "Browser.getCookies": Browser.getCookiesReturnValue;
          "Browser.setOnlineOverride": Browser.setOnlineOverrideReturnValue;
          "Page.close": Page.closeReturnValue;
          "Page.setFileInputFiles": Page.setFileInputFilesReturnValue;
          "Page.addBinding": Page.addBindingReturnValue;
          "Page.setViewportSize": Page.setViewportSizeReturnValue;
          "Page.setEmulatedMedia": Page.setEmulatedMediaReturnValue;
          "Page.setCacheDisabled": Page.setCacheDisabledReturnValue;
          "Page.describeNode": Page.describeNodeReturnValue;
          "Page.scrollIntoViewIfNeeded": Page.scrollIntoViewIfNeededReturnValue;
          "Page.addScriptToEvaluateOnNewDocument": Page.addScriptToEvaluateOnNewDocumentReturnValue;
          "Page.removeScriptToEvaluateOnNewDocument": Page.removeScriptToEvaluateOnNewDocumentReturnValue;
          "Page.navigate": Page.navigateReturnValue;
          "Page.goBack": Page.goBackReturnValue;
          "Page.goForward": Page.goForwardReturnValue;
          "Page.reload": Page.reloadReturnValue;
          "Page.getBoundingBox": Page.getBoundingBoxReturnValue;
          "Page.adoptNode": Page.adoptNodeReturnValue;
          "Page.screenshot": Page.screenshotReturnValue;
          "Page.getContentQuads": Page.getContentQuadsReturnValue;
          "Page.dispatchKeyEvent": Page.dispatchKeyEventReturnValue;
          "Page.dispatchTouchEvent": Page.dispatchTouchEventReturnValue;
          "Page.dispatchMouseEvent": Page.dispatchMouseEventReturnValue;
          "Page.insertText": Page.insertTextReturnValue;
          "Page.crash": Page.crashReturnValue;
          "Page.handleDialog": Page.handleDialogReturnValue;
          "Page.setInterceptFileChooserDialog": Page.setInterceptFileChooserDialogReturnValue;
          "Page.sendMessageToWorker": Page.sendMessageToWorkerReturnValue;
          "Runtime.evaluate": Runtime.evaluateReturnValue;
          "Runtime.callFunction": Runtime.callFunctionReturnValue;
          "Runtime.disposeObject": Runtime.disposeObjectReturnValue;
          "Runtime.getObjectProperties": Runtime.getObjectPropertiesReturnValue;
          "Network.setRequestInterception": Network.setRequestInterceptionReturnValue;
          "Network.setExtraHTTPHeaders": Network.setExtraHTTPHeadersReturnValue;
          "Network.abortInterceptedRequest": Network.abortInterceptedRequestReturnValue;
          "Network.resumeInterceptedRequest": Network.resumeInterceptedRequestReturnValue;
          "Network.fulfillInterceptedRequest": Network.fulfillInterceptedRequestReturnValue;
          "Network.getResponseBody": Network.getResponseBodyReturnValue;
          "Accessibility.getFullAXTree": Accessibility.getFullAXTreeReturnValue;
      }
  }

}
declare module 'playwright-core/frames' {
  /**
   * Copyright 2017 Google Inc. All rights reserved.
   * Modifications copyright (c) Microsoft Corporation.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *     http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /// <reference types="node" />
  import * as types from 'playwright-core/types';
  import * as js from 'playwright-core/javascript';
  import * as dom from 'playwright-core/dom';
  import * as network from 'playwright-core/network';
  import { Page } from 'playwright-core/page';
  import { ConsoleMessage } from 'playwright-core/console';
  type ContextType = 'main' | 'utility';
  export type GotoOptions = types.NavigateOptions & {
      referer?: string;
  };
  export type GotoResult = {
      newDocumentId?: string;
  };
  type ConsoleTagHandler = () => void;
  export class FrameManager {
      private _page;
      private _frames;
      private _mainFrame;
      readonly _consoleMessageTags: Map<string, ConsoleTagHandler>;
      private _pendingNavigationBarriers;
      constructor(page: Page);
      mainFrame(): Frame;
      frames(): Frame[];
      frame(frameId: string): Frame | null;
      frameAttached(frameId: string, parentFrameId: string | null | undefined): Frame;
      waitForNavigationsCreatedBy<T>(action: () => Promise<T>, options?: types.NavigatingActionWaitOptions, input?: boolean): Promise<T>;
      frameWillPotentiallyRequestNavigation(): void;
      frameDidPotentiallyRequestNavigation(): void;
      frameRequestedNavigation(frameId: string): void;
      frameCommittedNewDocumentNavigation(frameId: string, url: string, name: string, documentId: string, initial: boolean): void;
      frameCommittedSameDocumentNavigation(frameId: string, url: string): void;
      frameDetached(frameId: string): void;
      frameStoppedLoading(frameId: string): void;
      frameLifecycleEvent(frameId: string, event: types.LifecycleEvent): void;
      clearFrameLifecycle(frame: Frame): void;
      requestStarted(request: network.Request): void;
      requestReceivedResponse(response: network.Response): void;
      requestFinished(request: network.Request): void;
      requestFailed(request: network.Request, canceled: boolean): void;
      provisionalLoadFailed(frame: Frame, documentId: string, error: string): void;
      private _notifyLifecycle;
      private _removeFramesRecursively;
      private _inflightRequestFinished;
      private _inflightRequestStarted;
      private _startNetworkIdleTimer;
      private _stopNetworkIdleTimer;
      interceptConsoleMessage(message: ConsoleMessage): boolean;
  }
  export class Frame {
      _id: string;
      readonly _firedLifecycleEvents: Set<types.LifecycleEvent>;
      _lastDocumentId: string;
      _frameTasks: Set<FrameTask>;
      readonly _page: Page;
      private _parentFrame;
      _url: string;
      private _detached;
      private _contextData;
      private _childFrames;
      _name: string;
      _inflightRequests: Set<network.Request>;
      readonly _networkIdleTimers: Map<types.LifecycleEvent, NodeJS.Timer>;
      private _setContentCounter;
      readonly _detachedPromise: Promise<void>;
      private _detachedCallback;
      constructor(page: Page, id: string, parentFrame: Frame | null);
      goto(url: string, options?: GotoOptions): Promise<network.Response | null>;
      waitForNavigation(options?: types.WaitForNavigationOptions): Promise<network.Response | null>;
      waitForLoadState(state?: types.LifecycleEvent, options?: types.TimeoutOptions): Promise<void>;
      frameElement(): Promise<dom.ElementHandle>;
      _context(contextType: ContextType): Promise<dom.FrameExecutionContext>;
      _mainContext(): Promise<dom.FrameExecutionContext>;
      _utilityContext(): Promise<dom.FrameExecutionContext>;
      evaluateHandle<R, Arg>(pageFunction: types.Func1<Arg, R>, arg: Arg): Promise<types.SmartHandle<R>>;
      evaluateHandle<R>(pageFunction: types.Func1<void, R>, arg?: any): Promise<types.SmartHandle<R>>;
      evaluate<R, Arg>(pageFunction: types.Func1<Arg, R>, arg: Arg): Promise<R>;
      evaluate<R>(pageFunction: types.Func1<void, R>, arg?: any): Promise<R>;
      $(selector: string): Promise<dom.ElementHandle<Element> | null>;
      waitForSelector(selector: string, options?: types.WaitForElementOptions): Promise<dom.ElementHandle<Element> | null>;
      $eval<R, Arg>(selector: string, pageFunction: types.FuncOn<Element, Arg, R>, arg: Arg): Promise<R>;
      $eval<R>(selector: string, pageFunction: types.FuncOn<Element, void, R>, arg?: any): Promise<R>;
      $$eval<R, Arg>(selector: string, pageFunction: types.FuncOn<Element[], Arg, R>, arg: Arg): Promise<R>;
      $$eval<R>(selector: string, pageFunction: types.FuncOn<Element[], void, R>, arg?: any): Promise<R>;
      $$(selector: string): Promise<dom.ElementHandle<Element>[]>;
      content(): Promise<string>;
      setContent(html: string, options?: types.NavigateOptions): Promise<void>;
      name(): string;
      url(): string;
      parentFrame(): Frame | null;
      childFrames(): Frame[];
      isDetached(): boolean;
      addScriptTag(options: {
          url?: string;
          path?: string;
          content?: string;
          type?: string;
      }): Promise<dom.ElementHandle>;
      addStyleTag(options: {
          url?: string;
          path?: string;
          content?: string;
      }): Promise<dom.ElementHandle>;
      private _raceWithCSPError;
      click(selector: string, options?: dom.ClickOptions & types.PointerActionWaitOptions & types.NavigatingActionWaitOptions): Promise<void>;
      dblclick(selector: string, options?: dom.MultiClickOptions & types.PointerActionWaitOptions & types.NavigatingActionWaitOptions): Promise<void>;
      fill(selector: string, value: string, options?: types.NavigatingActionWaitOptions): Promise<void>;
      focus(selector: string, options?: types.TimeoutOptions): Promise<void>;
      hover(selector: string, options?: dom.PointerActionOptions & types.PointerActionWaitOptions): Promise<void>;
      selectOption(selector: string, values: string | dom.ElementHandle | types.SelectOption | string[] | dom.ElementHandle[] | types.SelectOption[], options?: types.NavigatingActionWaitOptions): Promise<string[]>;
      type(selector: string, text: string, options?: {
          delay?: number;
      } & types.NavigatingActionWaitOptions): Promise<void>;
      press(selector: string, key: string, options?: {
          delay?: number;
      } & types.NavigatingActionWaitOptions): Promise<void>;
      check(selector: string, options?: types.PointerActionWaitOptions & types.NavigatingActionWaitOptions): Promise<void>;
      uncheck(selector: string, options?: types.PointerActionWaitOptions & types.NavigatingActionWaitOptions): Promise<void>;
      waitFor(selectorOrFunctionOrTimeout: (string | number | Function), options?: types.WaitForFunctionOptions & types.WaitForElementOptions, arg?: any): Promise<js.JSHandle | null>;
      private _waitForSelectorInUtilityContext;
      waitForFunction<R, Arg>(pageFunction: types.Func1<Arg, R>, arg: Arg, options?: types.WaitForFunctionOptions): Promise<types.SmartHandle<R>>;
      waitForFunction<R>(pageFunction: types.Func1<void, R>, arg?: any, options?: types.WaitForFunctionOptions): Promise<types.SmartHandle<R>>;
      title(): Promise<string>;
      _onDetached(): void;
      private _scheduleRerunnableTask;
      private _setContext;
      _contextCreated(contextType: ContextType, context: dom.FrameExecutionContext): void;
      _contextDestroyed(context: dom.FrameExecutionContext): void;
  }
  export class FrameTask {
      private _frame;
      private _failurePromise;
      private _requestMap;
      private _timer?;
      private _url;
      onNewDocument: (documentId: string, error?: Error) => void;
      onSameDocument: () => void;
      onLifecycle: () => void;
      constructor(frame: Frame, options: types.TimeoutOptions, url?: string);
      onRequest(request: network.Request): void;
      raceAgainstFailures<T>(promise: Promise<T>): Promise<T>;
      request(documentId: string): network.Request | undefined;
      waitForSameDocumentNavigation(url?: types.URLMatch): Promise<void>;
      waitForSpecificDocument(expectedDocumentId: string): Promise<void>;
      waitForNewDocument(url?: types.URLMatch): Promise<string>;
      waitForLifecycle(waitUntil: types.LifecycleEvent): Promise<void>;
      done(): void;
  }
  export {};

}
declare module 'playwright-core/generated/injectedSource' {
  export const source = "(/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// define __esModule on exports\n/******/ \t__webpack_require__.r = function(exports) {\n/******/ \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n/******/ \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n/******/ \t\t}\n/******/ \t\tObject.defineProperty(exports, '__esModule', { value: true });\n/******/ \t};\n/******/\n/******/ \t// create a fake namespace object\n/******/ \t// mode & 1: value is a module id, require it\n/******/ \t// mode & 2: merge all properties of value into the ns\n/******/ \t// mode & 4: return value when already ns object\n/******/ \t// mode & 8|1: behave like require\n/******/ \t__webpack_require__.t = function(value, mode) {\n/******/ \t\tif(mode & 1) value = __webpack_require__(value);\n/******/ \t\tif(mode & 8) return value;\n/******/ \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n/******/ \t\tvar ns = Object.create(null);\n/******/ \t\t__webpack_require__.r(ns);\n/******/ \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n/******/ \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n/******/ \t\treturn ns;\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = \"./src/injected/injected.ts\");\n/******/ })\n/************************************************************************/\n/******/ ({\n\n/***/ \"./src/injected/cssSelectorEngine.ts\":\n/*!*******************************************!*\\\n  !*** ./src/injected/cssSelectorEngine.ts ***!\n  \\*******************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CSSEngine = {\n    create(root, targetElement) {\n        const tokens = [];\n        function uniqueCSSSelector(prefix) {\n            const path = tokens.slice();\n            if (prefix)\n                path.unshift(prefix);\n            const selector = path.join(' > ');\n            const nodes = Array.from(root.querySelectorAll(selector));\n            return nodes[0] === targetElement ? selector : undefined;\n        }\n        for (let element = targetElement; element && element !== root; element = element.parentElement) {\n            const nodeName = element.nodeName.toLowerCase();\n            // Element ID is the strongest signal, use it.\n            let bestTokenForLevel = '';\n            if (element.id) {\n                const token = /^[a-zA-Z][a-zA-Z0-9\\-\\_]+$/.test(element.id) ? '#' + element.id : `[id=\"${element.id}\"]`;\n                const selector = uniqueCSSSelector(token);\n                if (selector)\n                    return selector;\n                bestTokenForLevel = token;\n            }\n            const parent = element.parentElement;\n            // Combine class names until unique.\n            const classes = Array.from(element.classList);\n            for (let i = 0; i < classes.length; ++i) {\n                const token = '.' + classes.slice(0, i + 1).join('.');\n                const selector = uniqueCSSSelector(token);\n                if (selector)\n                    return selector;\n                // Even if not unique, does this subset of classes uniquely identify node as a child?\n                if (!bestTokenForLevel && parent) {\n                    const sameClassSiblings = parent.querySelectorAll(token);\n                    if (sameClassSiblings.length === 1)\n                        bestTokenForLevel = token;\n                }\n            }\n            // Ordinal is the weakest signal.\n            if (parent) {\n                const siblings = Array.from(parent.children);\n                const sameTagSiblings = siblings.filter(sibling => (sibling).nodeName.toLowerCase() === nodeName);\n                const token = sameTagSiblings.length === 1 ? nodeName : `${nodeName}:nth-child(${1 + siblings.indexOf(element)})`;\n                const selector = uniqueCSSSelector(token);\n                if (selector)\n                    return selector;\n                if (!bestTokenForLevel)\n                    bestTokenForLevel = token;\n            }\n            else if (!bestTokenForLevel) {\n                bestTokenForLevel = nodeName;\n            }\n            tokens.unshift(bestTokenForLevel);\n        }\n        return uniqueCSSSelector();\n    },\n    query(root, selector) {\n        return root.querySelector(selector) || undefined;\n    },\n    queryAll(root, selector) {\n        return Array.from(root.querySelectorAll(selector));\n    }\n};\n\n\n/***/ }),\n\n/***/ \"./src/injected/injected.ts\":\n/*!**********************************!*\\\n  !*** ./src/injected/injected.ts ***!\n  \\**********************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst utils_1 = __webpack_require__(/*! ./utils */ \"./src/injected/utils.ts\");\nconst cssSelectorEngine_1 = __webpack_require__(/*! ./cssSelectorEngine */ \"./src/injected/cssSelectorEngine.ts\");\nconst xpathSelectorEngine_1 = __webpack_require__(/*! ./xpathSelectorEngine */ \"./src/injected/xpathSelectorEngine.ts\");\nconst textSelectorEngine_1 = __webpack_require__(/*! ./textSelectorEngine */ \"./src/injected/textSelectorEngine.ts\");\nfunction createAttributeEngine(attribute) {\n    const engine = {\n        create(root, target) {\n            const value = target.getAttribute(attribute);\n            if (!value)\n                return;\n            if (root.querySelector(`[${attribute}=${value}]`) === target)\n                return value;\n        },\n        query(root, selector) {\n            return root.querySelector(`[${attribute}=${selector}]`) || undefined;\n        },\n        queryAll(root, selector) {\n            return Array.from(root.querySelectorAll(`[${attribute}=${selector}]`));\n        }\n    };\n    return engine;\n}\nclass Injected {\n    constructor(customEngines) {\n        this.utils = new utils_1.Utils();\n        this.engines = new Map();\n        // Note: keep predefined names in sync with Selectors class.\n        this.engines.set('css', cssSelectorEngine_1.CSSEngine);\n        this.engines.set('xpath', xpathSelectorEngine_1.XPathEngine);\n        this.engines.set('text', textSelectorEngine_1.TextEngine);\n        this.engines.set('id', createAttributeEngine('id'));\n        this.engines.set('data-testid', createAttributeEngine('data-testid'));\n        this.engines.set('data-test-id', createAttributeEngine('data-test-id'));\n        this.engines.set('data-test', createAttributeEngine('data-test'));\n        for (const { name, engine } of customEngines)\n            this.engines.set(name, engine);\n    }\n    querySelector(selector, root) {\n        const parsed = this._parseSelector(selector);\n        if (!root['querySelector'])\n            throw new Error('Node is not queryable.');\n        return this._querySelectorRecursively(root, parsed, 0);\n    }\n    _querySelectorRecursively(root, parsed, index) {\n        const current = parsed[index];\n        root = root.shadowRoot || root;\n        if (index === parsed.length - 1)\n            return current.engine.query(root, current.selector);\n        const all = current.engine.queryAll(root, current.selector);\n        for (const next of all) {\n            const result = this._querySelectorRecursively(next, parsed, index + 1);\n            if (result)\n                return result;\n        }\n    }\n    querySelectorAll(selector, root) {\n        const parsed = this._parseSelector(selector);\n        if (!root['querySelectorAll'])\n            throw new Error('Node is not queryable.');\n        let set = new Set([root]);\n        for (const { engine, selector } of parsed) {\n            const newSet = new Set();\n            for (const prev of set) {\n                for (const next of engine.queryAll(prev.shadowRoot || prev, selector)) {\n                    if (newSet.has(next))\n                        continue;\n                    newSet.add(next);\n                }\n            }\n            set = newSet;\n        }\n        return Array.from(set);\n    }\n    _parseSelector(selector) {\n        let index = 0;\n        let quote;\n        let start = 0;\n        const result = [];\n        const append = () => {\n            const part = selector.substring(start, index).trim();\n            const eqIndex = part.indexOf('=');\n            let name;\n            let body;\n            if (eqIndex !== -1 && part.substring(0, eqIndex).trim().match(/^[a-zA-Z_0-9-]+$/)) {\n                name = part.substring(0, eqIndex).trim();\n                body = part.substring(eqIndex + 1);\n            }\n            else if (part.startsWith('\"')) {\n                name = 'text';\n                body = part;\n            }\n            else if (/^\\(*\\/\\//.test(part)) {\n                // If selector starts with '//' or '//' prefixed with multiple opening\n                // parenthesis, consider xpath. @see https://github.com/microsoft/playwright/issues/817\n                name = 'xpath';\n                body = part;\n            }\n            else {\n                name = 'css';\n                body = part;\n            }\n            const engine = this.engines.get(name.toLowerCase());\n            if (!engine)\n                throw new Error(`Unknown engine ${name} while parsing selector ${selector}`);\n            result.push({ engine, selector: body });\n        };\n        while (index < selector.length) {\n            const c = selector[index];\n            if (c === '\\\\' && index + 1 < selector.length) {\n                index += 2;\n            }\n            else if (c === quote) {\n                quote = undefined;\n                index++;\n            }\n            else if (!quote && c === '>' && selector[index + 1] === '>') {\n                append();\n                index += 2;\n                start = index;\n            }\n            else {\n                index++;\n            }\n        }\n        append();\n        return result;\n    }\n    isVisible(element) {\n        if (!element.ownerDocument || !element.ownerDocument.defaultView)\n            return true;\n        const style = element.ownerDocument.defaultView.getComputedStyle(element);\n        if (!style || style.visibility === 'hidden')\n            return false;\n        const rect = element.getBoundingClientRect();\n        return !!(rect.top || rect.bottom || rect.width || rect.height);\n    }\n    _pollMutation(selector, predicate, timeout) {\n        let timedOut = false;\n        if (timeout)\n            setTimeout(() => timedOut = true, timeout);\n        const element = selector === undefined ? undefined : this.querySelector(selector, document);\n        const success = predicate(element);\n        if (success)\n            return Promise.resolve(success);\n        let fulfill;\n        const result = new Promise(x => fulfill = x);\n        const observer = new MutationObserver(() => {\n            if (timedOut) {\n                observer.disconnect();\n                fulfill();\n                return;\n            }\n            const element = selector === undefined ? undefined : this.querySelector(selector, document);\n            const success = predicate(element);\n            if (success) {\n                observer.disconnect();\n                fulfill(success);\n            }\n        });\n        observer.observe(document, {\n            childList: true,\n            subtree: true,\n            attributes: true\n        });\n        return result;\n    }\n    _pollRaf(selector, predicate, timeout) {\n        let timedOut = false;\n        if (timeout)\n            setTimeout(() => timedOut = true, timeout);\n        let fulfill;\n        const result = new Promise(x => fulfill = x);\n        const onRaf = () => {\n            if (timedOut) {\n                fulfill();\n                return;\n            }\n            const element = selector === undefined ? undefined : this.querySelector(selector, document);\n            const success = predicate(element);\n            if (success)\n                fulfill(success);\n            else\n                requestAnimationFrame(onRaf);\n        };\n        onRaf();\n        return result;\n    }\n    _pollInterval(selector, pollInterval, predicate, timeout) {\n        let timedOut = false;\n        if (timeout)\n            setTimeout(() => timedOut = true, timeout);\n        let fulfill;\n        const result = new Promise(x => fulfill = x);\n        const onTimeout = () => {\n            if (timedOut) {\n                fulfill();\n                return;\n            }\n            const element = selector === undefined ? undefined : this.querySelector(selector, document);\n            const success = predicate(element);\n            if (success)\n                fulfill(success);\n            else\n                setTimeout(onTimeout, pollInterval);\n        };\n        onTimeout();\n        return result;\n    }\n    poll(polling, selector, timeout, predicate) {\n        if (polling === 'raf')\n            return this._pollRaf(selector, predicate, timeout);\n        if (polling === 'mutation')\n            return this._pollMutation(selector, predicate, timeout);\n        return this._pollInterval(selector, polling, predicate, timeout);\n    }\n    getElementBorderWidth(node) {\n        if (node.nodeType !== Node.ELEMENT_NODE || !node.ownerDocument || !node.ownerDocument.defaultView)\n            return { left: 0, top: 0 };\n        const style = node.ownerDocument.defaultView.getComputedStyle(node);\n        return { left: parseInt(style.borderLeftWidth || '', 10), top: parseInt(style.borderTopWidth || '', 10) };\n    }\n    selectOptions(node, optionsToSelect) {\n        if (node.nodeName.toLowerCase() !== 'select')\n            throw new Error('Element is not a <select> element.');\n        const element = node;\n        const options = Array.from(element.options);\n        element.value = undefined;\n        for (let index = 0; index < options.length; index++) {\n            const option = options[index];\n            option.selected = optionsToSelect.some(optionToSelect => {\n                if (optionToSelect instanceof Node)\n                    return option === optionToSelect;\n                let matches = true;\n                if (optionToSelect.value !== undefined)\n                    matches = matches && optionToSelect.value === option.value;\n                if (optionToSelect.label !== undefined)\n                    matches = matches && optionToSelect.label === option.label;\n                if (optionToSelect.index !== undefined)\n                    matches = matches && optionToSelect.index === index;\n                return matches;\n            });\n            if (option.selected && !element.multiple)\n                break;\n        }\n        element.dispatchEvent(new Event('input', { 'bubbles': true }));\n        element.dispatchEvent(new Event('change', { 'bubbles': true }));\n        return options.filter(option => option.selected).map(option => option.value);\n    }\n    fill(node, value) {\n        if (node.nodeType !== Node.ELEMENT_NODE)\n            return 'Node is not of type HTMLElement';\n        const element = node;\n        if (!element.isConnected)\n            return 'Element is not attached to the DOM';\n        if (!element.ownerDocument || !element.ownerDocument.defaultView)\n            return 'Element does not belong to a window';\n        const style = element.ownerDocument.defaultView.getComputedStyle(element);\n        if (!style || style.visibility === 'hidden')\n            return 'Element is hidden';\n        if (!element.offsetParent && element.tagName !== 'BODY')\n            return 'Element is not visible';\n        if (element.nodeName.toLowerCase() === 'input') {\n            const input = element;\n            const type = input.getAttribute('type') || '';\n            const kTextInputTypes = new Set(['', 'email', 'number', 'password', 'search', 'tel', 'text', 'url']);\n            if (!kTextInputTypes.has(type.toLowerCase()))\n                return 'Cannot fill input of type \"' + type + '\".';\n            if (type.toLowerCase() === 'number') {\n                value = value.trim();\n                if (!value || isNaN(Number(value)))\n                    return 'Cannot type text into input[type=number].';\n            }\n            if (input.disabled)\n                return 'Cannot fill a disabled input.';\n            if (input.readOnly)\n                return 'Cannot fill a readonly input.';\n            input.select();\n            input.focus();\n        }\n        else if (element.nodeName.toLowerCase() === 'textarea') {\n            const textarea = element;\n            if (textarea.disabled)\n                return 'Cannot fill a disabled textarea.';\n            if (textarea.readOnly)\n                return 'Cannot fill a readonly textarea.';\n            textarea.selectionStart = 0;\n            textarea.selectionEnd = textarea.value.length;\n            textarea.focus();\n        }\n        else if (element.isContentEditable) {\n            const range = element.ownerDocument.createRange();\n            range.selectNodeContents(element);\n            const selection = element.ownerDocument.defaultView.getSelection();\n            if (!selection)\n                return 'Element belongs to invisible iframe.';\n            selection.removeAllRanges();\n            selection.addRange(range);\n            element.focus();\n        }\n        else {\n            return 'Element is not an <input>, <textarea> or [contenteditable] element.';\n        }\n        return false;\n    }\n    isCheckboxChecked(node) {\n        if (node.nodeType !== Node.ELEMENT_NODE)\n            throw new Error('Not a checkbox or radio button');\n        let element = node;\n        if (element.getAttribute('role') === 'checkbox')\n            return element.getAttribute('aria-checked') === 'true';\n        if (element.nodeName === 'LABEL') {\n            const forId = element.getAttribute('for');\n            if (forId && element.ownerDocument)\n                element = element.ownerDocument.querySelector(`input[id=\"${forId}\"]`) || undefined;\n            else\n                element = element.querySelector('input[type=checkbox],input[type=radio]') || undefined;\n        }\n        if (element && element.nodeName === 'INPUT') {\n            const type = element.getAttribute('type');\n            if (type && (type.toLowerCase() === 'checkbox' || type.toLowerCase() === 'radio'))\n                return element.checked;\n        }\n        throw new Error('Not a checkbox');\n    }\n    async waitForDisplayedAtStablePosition(node, timeout) {\n        if (!node.isConnected)\n            throw new Error('Element is not attached to the DOM');\n        const element = node.nodeType === Node.ELEMENT_NODE ? node : node.parentElement;\n        if (!element)\n            throw new Error('Element is not attached to the DOM');\n        let lastRect;\n        let counter = 0;\n        const result = await this.poll('raf', undefined, timeout, () => {\n            // First raf happens in the same animation frame as evaluation, so it does not produce\n            // any client rect difference compared to synchronous call. We skip the synchronous call\n            // and only force layout during actual rafs as a small optimisation.\n            if (++counter === 1)\n                return false;\n            const clientRect = element.getBoundingClientRect();\n            const rect = { x: clientRect.top, y: clientRect.left, width: clientRect.width, height: clientRect.height };\n            const isDisplayedAndStable = lastRect && rect.x === lastRect.x && rect.y === lastRect.y && rect.width === lastRect.width && rect.height === lastRect.height && rect.width > 0 && rect.height > 0;\n            lastRect = rect;\n            return isDisplayedAndStable;\n        });\n        if (!result)\n            throw new Error(`waiting for element to be displayed and not moving failed: timeout ${timeout}ms exceeded`);\n    }\n    async waitForHitTargetAt(node, timeout, point) {\n        const element = node.nodeType === Node.ELEMENT_NODE ? node : node.parentElement;\n        if (!element)\n            throw new Error('Element is not attached to the DOM');\n        const result = await this.poll('raf', undefined, timeout, () => {\n            let hitElement = this.utils.deepElementFromPoint(document, point.x, point.y);\n            while (hitElement && hitElement !== element)\n                hitElement = this.utils.parentElementOrShadowHost(hitElement);\n            return hitElement === element;\n        });\n        if (!result)\n            throw new Error(`waiting for element to receive mouse events failed: timeout ${timeout}ms exceeded`);\n    }\n}\nexports.default = Injected;\n\n\n/***/ }),\n\n/***/ \"./src/injected/textSelectorEngine.ts\":\n/*!********************************************!*\\\n  !*** ./src/injected/textSelectorEngine.ts ***!\n  \\********************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TextEngine = {\n    create(root, targetElement, type) {\n        const document = root instanceof Document ? root : root.ownerDocument;\n        if (!document)\n            return;\n        for (let child = targetElement.firstChild; child; child = child.nextSibling) {\n            if (child.nodeType === 3 /* Node.TEXT_NODE */) {\n                const text = child.nodeValue;\n                if (!text)\n                    continue;\n                if (text.match(/^\\s*[a-zA-Z0-9]+\\s*$/) && exports.TextEngine.query(root, text.trim()) === targetElement)\n                    return text.trim();\n                if (exports.TextEngine.query(root, JSON.stringify(text)) === targetElement)\n                    return JSON.stringify(text);\n            }\n        }\n    },\n    query(root, selector) {\n        const document = root instanceof Document ? root : root.ownerDocument;\n        if (!document)\n            return;\n        const matcher = createMatcher(selector);\n        const walker = document.createTreeWalker(root, NodeFilter.SHOW_TEXT);\n        while (walker.nextNode()) {\n            const node = walker.currentNode;\n            const element = node.parentElement;\n            const text = node.nodeValue;\n            if (element && text && matcher(text))\n                return element;\n        }\n    },\n    queryAll(root, selector) {\n        const result = [];\n        const document = root instanceof Document ? root : root.ownerDocument;\n        if (!document)\n            return result;\n        const matcher = createMatcher(selector);\n        const walker = document.createTreeWalker(root, NodeFilter.SHOW_TEXT);\n        while (walker.nextNode()) {\n            const node = walker.currentNode;\n            const element = node.parentElement;\n            const text = node.nodeValue;\n            if (element && text && matcher(text))\n                result.push(element);\n        }\n        return result;\n    }\n};\nfunction createMatcher(selector) {\n    if (selector[0] === '\"' && selector[selector.length - 1] === '\"') {\n        const parsed = JSON.parse(selector);\n        return text => text === parsed;\n    }\n    if (selector[0] === '/' && selector.lastIndexOf('/') > 0) {\n        const lastSlash = selector.lastIndexOf('/');\n        const re = new RegExp(selector.substring(1, lastSlash), selector.substring(lastSlash + 1));\n        return text => re.test(text);\n    }\n    selector = selector.trim().toLowerCase();\n    return text => text.trim().toLowerCase() === selector;\n}\n\n\n/***/ }),\n\n/***/ \"./src/injected/utils.ts\":\n/*!*******************************!*\\\n  !*** ./src/injected/utils.ts ***!\n  \\*******************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nclass Utils {\n    parentElementOrShadowHost(element) {\n        if (element.parentElement)\n            return element.parentElement;\n        if (!element.parentNode)\n            return;\n        if (element.parentNode.nodeType === Node.DOCUMENT_FRAGMENT_NODE && element.parentNode.host)\n            return element.parentNode.host;\n    }\n    deepElementFromPoint(document, x, y) {\n        let container = document;\n        let element;\n        while (container) {\n            const innerElement = container.elementFromPoint(x, y);\n            if (!innerElement || element === innerElement)\n                break;\n            element = innerElement;\n            container = element.shadowRoot;\n        }\n        return element;\n    }\n}\nexports.Utils = Utils;\n\n\n/***/ }),\n\n/***/ \"./src/injected/xpathSelectorEngine.ts\":\n/*!*********************************************!*\\\n  !*** ./src/injected/xpathSelectorEngine.ts ***!\n  \\*********************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst maxTextLength = 80;\nconst minMeaningfulSelectorLegth = 100;\nexports.XPathEngine = {\n    create(root, targetElement, type) {\n        const maybeDocument = root instanceof Document ? root : root.ownerDocument;\n        if (!maybeDocument)\n            return;\n        const document = maybeDocument;\n        const xpathCache = new Map();\n        if (type === 'notext')\n            return createNoText(root, targetElement);\n        const tokens = [];\n        function evaluateXPath(expression) {\n            let nodes = xpathCache.get(expression);\n            if (!nodes) {\n                nodes = [];\n                try {\n                    const result = document.evaluate(expression, root, null, XPathResult.ORDERED_NODE_ITERATOR_TYPE);\n                    for (let node = result.iterateNext(); node; node = result.iterateNext()) {\n                        if (node.nodeType === Node.ELEMENT_NODE)\n                            nodes.push(node);\n                    }\n                }\n                catch (e) {\n                }\n                xpathCache.set(expression, nodes);\n            }\n            return nodes;\n        }\n        function uniqueXPathSelector(prefix) {\n            const path = tokens.slice();\n            if (prefix)\n                path.unshift(prefix);\n            let selector = '//' + path.join('/');\n            while (selector.includes('///'))\n                selector = selector.replace('///', '//');\n            if (selector.endsWith('/'))\n                selector = selector.substring(0, selector.length - 1);\n            const nodes = evaluateXPath(selector);\n            if (nodes[nodes.length - 1] === targetElement)\n                return selector;\n            // If we are looking at a small set of elements with long selector, fall back to ordinal.\n            if (nodes.length < 5 && selector.length > minMeaningfulSelectorLegth) {\n                const index = nodes.indexOf(targetElement);\n                if (index !== -1)\n                    return `(${selector})[${index + 1}]`;\n            }\n            return undefined;\n        }\n        function escapeAndCap(text) {\n            text = text.substring(0, maxTextLength);\n            // XPath 1.0 does not support quote escaping.\n            // 1. If there are no single quotes - use them.\n            if (text.indexOf(`'`) === -1)\n                return `'${text}'`;\n            // 2. If there are no double quotes - use them to enclose text.\n            if (text.indexOf(`\"`) === -1)\n                return `\"${text}\"`;\n            // 3. Otherwise, use popular |concat| trick.\n            const Q = `'`;\n            return `concat(${text.split(Q).map(token => Q + token + Q).join(`, \"'\", `)})`;\n        }\n        const defaultAttributes = new Set(['title', 'aria-label', 'disabled', 'role']);\n        const importantAttributes = new Map([\n            ['form', ['action']],\n            ['img', ['alt']],\n            ['input', ['placeholder', 'type', 'name', 'value']],\n        ]);\n        let usedTextConditions = false;\n        for (let element = targetElement; element && element !== root; element = element.parentElement) {\n            const nodeName = element.nodeName.toLowerCase();\n            const tag = nodeName === 'svg' ? '*' : nodeName;\n            const tagConditions = [];\n            if (nodeName === 'svg')\n                tagConditions.push('local-name()=\"svg\"');\n            const attrConditions = [];\n            const importantAttrs = [...defaultAttributes, ...(importantAttributes.get(tag) || [])];\n            for (const attr of importantAttrs) {\n                const value = element.getAttribute(attr);\n                if (value && value.length < maxTextLength)\n                    attrConditions.push(`normalize-space(@${attr})=${escapeAndCap(value)}`);\n                else if (value)\n                    attrConditions.push(`starts-with(normalize-space(@${attr}), ${escapeAndCap(value)})`);\n            }\n            const text = document.evaluate('normalize-space(.)', element).stringValue;\n            const textConditions = [];\n            if (tag !== 'select' && text.length && !usedTextConditions) {\n                if (text.length < maxTextLength)\n                    textConditions.push(`normalize-space(.)=${escapeAndCap(text)}`);\n                else\n                    textConditions.push(`starts-with(normalize-space(.), ${escapeAndCap(text)})`);\n                usedTextConditions = true;\n            }\n            // Always retain the last tag.\n            const conditions = [...tagConditions, ...textConditions, ...attrConditions];\n            const token = conditions.length ? `${tag}[${conditions.join(' and ')}]` : (tokens.length ? '' : tag);\n            const selector = uniqueXPathSelector(token);\n            if (selector)\n                return selector;\n            // Ordinal is the weakest signal.\n            const parent = element.parentElement;\n            let tagWithOrdinal = tag;\n            if (parent) {\n                const siblings = Array.from(parent.children);\n                const sameTagSiblings = siblings.filter(sibling => (sibling).nodeName.toLowerCase() === nodeName);\n                if (sameTagSiblings.length > 1)\n                    tagWithOrdinal += `[${1 + siblings.indexOf(element)}]`;\n            }\n            // Do not include text into this token, only tag / attributes.\n            // Topmost node will get all the text.\n            const nonTextConditions = [...tagConditions, ...attrConditions];\n            const levelToken = nonTextConditions.length ? `${tagWithOrdinal}[${nonTextConditions.join(' and ')}]` : tokens.length ? '' : tagWithOrdinal;\n            tokens.unshift(levelToken);\n        }\n        return uniqueXPathSelector();\n    },\n    query(root, selector) {\n        const document = root instanceof Document ? root : root.ownerDocument;\n        if (!document)\n            return;\n        const it = document.evaluate(selector, root, null, XPathResult.ORDERED_NODE_ITERATOR_TYPE);\n        for (let node = it.iterateNext(); node; node = it.iterateNext()) {\n            if (node.nodeType === Node.ELEMENT_NODE)\n                return node;\n        }\n    },\n    queryAll(root, selector) {\n        const result = [];\n        const document = root instanceof Document ? root : root.ownerDocument;\n        if (!document)\n            return result;\n        const it = document.evaluate(selector, root, null, XPathResult.ORDERED_NODE_ITERATOR_TYPE);\n        for (let node = it.iterateNext(); node; node = it.iterateNext()) {\n            if (node.nodeType === Node.ELEMENT_NODE)\n                result.push(node);\n        }\n        return result;\n    }\n};\nfunction createNoText(root, targetElement) {\n    const steps = [];\n    for (let element = targetElement; element && element !== root; element = element.parentElement) {\n        if (element.getAttribute('id')) {\n            steps.unshift(`//*[@id=\"${element.getAttribute('id')}\"]`);\n            return steps.join('/');\n        }\n        const siblings = element.parentElement ? Array.from(element.parentElement.children) : [];\n        const similarElements = siblings.filter(sibling => element.nodeName === sibling.nodeName);\n        const index = similarElements.length === 1 ? 0 : similarElements.indexOf(element) + 1;\n        steps.unshift(index ? `${element.nodeName}[${index}]` : element.nodeName);\n    }\n    return '/' + steps.join('/');\n}\n\n\n/***/ })\n\n/******/ })).default";

}
declare module 'playwright-core/generated/zsSelectorEngineSource' {
  export const source = "(/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// define __esModule on exports\n/******/ \t__webpack_require__.r = function(exports) {\n/******/ \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n/******/ \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n/******/ \t\t}\n/******/ \t\tObject.defineProperty(exports, '__esModule', { value: true });\n/******/ \t};\n/******/\n/******/ \t// create a fake namespace object\n/******/ \t// mode & 1: value is a module id, require it\n/******/ \t// mode & 2: merge all properties of value into the ns\n/******/ \t// mode & 4: return value when already ns object\n/******/ \t// mode & 8|1: behave like require\n/******/ \t__webpack_require__.t = function(value, mode) {\n/******/ \t\tif(mode & 1) value = __webpack_require__(value);\n/******/ \t\tif(mode & 8) return value;\n/******/ \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n/******/ \t\tvar ns = Object.create(null);\n/******/ \t\t__webpack_require__.r(ns);\n/******/ \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n/******/ \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n/******/ \t\treturn ns;\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = \"./src/injected/zsSelectorEngine.ts\");\n/******/ })\n/************************************************************************/\n/******/ ({\n\n/***/ \"./src/injected/zsSelectorEngine.ts\":\n/*!******************************************!*\\\n  !*** ./src/injected/zsSelectorEngine.ts ***!\n  \\******************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction tokenize(selector) {\n    const tokens = [];\n    let pos = 0;\n    const skipWhitespace = () => {\n        while (pos < selector.length && selector[pos] === ' ')\n            pos++;\n    };\n    while (pos < selector.length) {\n        skipWhitespace();\n        if (pos === selector.length)\n            break;\n        if (!tokens.length && '^>~'.includes(selector[pos]))\n            return pos;\n        const token = { combinator: '' };\n        if (selector[pos] === '^') {\n            token.combinator = '^';\n            tokens.push(token);\n            pos++;\n            continue;\n        }\n        if (selector[pos] === '>') {\n            token.combinator = '>';\n            pos++;\n            skipWhitespace();\n            if (pos === selector.length)\n                return pos;\n        }\n        else if (selector[pos] === '~') {\n            token.combinator = '~';\n            pos++;\n            skipWhitespace();\n            if (pos === selector.length)\n                return pos;\n        }\n        let text = '';\n        let end = pos;\n        let stringQuote;\n        const isText = '`\"\\''.includes(selector[pos]);\n        while (end < selector.length) {\n            if (stringQuote) {\n                if (selector[end] === '\\\\' && end + 1 < selector.length) {\n                    if (!isText)\n                        text += selector[end];\n                    text += selector[end + 1];\n                    end += 2;\n                }\n                else if (selector[end] === stringQuote) {\n                    text += selector[end++];\n                    stringQuote = undefined;\n                    if (isText)\n                        break;\n                }\n                else {\n                    text += selector[end++];\n                }\n            }\n            else if (' >~^#'.includes(selector[end])) {\n                break;\n            }\n            else if ('`\"\\''.includes(selector[end])) {\n                stringQuote = selector[end];\n                text += selector[end++];\n            }\n            else {\n                text += selector[end++];\n            }\n        }\n        if (stringQuote)\n            return end;\n        if (isText)\n            token.text = JSON.stringify(text.substring(1, text.length - 1));\n        else\n            token.css = text;\n        pos = end;\n        if (pos < selector.length && selector[pos] === '#') {\n            pos++;\n            let end = pos;\n            while (end < selector.length && selector[end] >= '0' && selector[end] <= '9')\n                end++;\n            if (end === pos)\n                return pos;\n            const num = Number(selector.substring(pos, end));\n            if (isNaN(num))\n                return pos;\n            token.index = num;\n            pos = end;\n        }\n        tokens.push(token);\n    }\n    return tokens;\n}\nfunction pathFromRoot(root, targetElement) {\n    let target = targetElement;\n    const path = [target];\n    while (target !== root) {\n        if (!target.parentNode || target.parentNode.nodeType !== 1 /* Node.ELEMENT_NODE */ && target.parentNode.nodeType !== 11 /* Node.DOCUMENT_FRAGMENT_NODE */)\n            throw new Error('Target does not belong to the root subtree');\n        target = target.parentNode;\n        path.push(target);\n    }\n    path.reverse();\n    return path;\n}\nfunction detectLists(root, shouldConsider, getBox) {\n    const lists = new Map();\n    const add = (map, element, key) => {\n        let list = map.get(key);\n        if (!list) {\n            list = [];\n            map.set(key, list);\n        }\n        list.push(element);\n    };\n    const mark = (parent, map, used) => {\n        for (let list of map.values()) {\n            list = list.filter(item => !used.has(item));\n            if (list.length < 2)\n                continue;\n            let collection = lists.get(parent);\n            if (!collection) {\n                collection = [];\n                lists.set(parent, collection);\n            }\n            collection.push(list);\n            list.forEach(item => used.add(item));\n        }\n    };\n    // hashes list: s, vh, v, h\n    const kHashes = 4;\n    const visit = (element, produceHashes) => {\n        const consider = shouldConsider(element);\n        let size = 1;\n        let maps;\n        if (consider)\n            maps = new Array(kHashes).fill(0).map(_ => new Map());\n        let structure;\n        if (produceHashes)\n            structure = [element.nodeName];\n        for (let child = element.firstElementChild; child; child = child.nextElementSibling) {\n            const childResult = visit(child, consider);\n            size += childResult.size;\n            if (consider) {\n                for (let i = 0; i < childResult.hashes.length; i++) {\n                    if (childResult.hashes[i])\n                        add(maps[i], child, childResult.hashes[i]);\n                }\n            }\n            if (structure)\n                structure.push(child.nodeName);\n        }\n        if (consider) {\n            const used = new Set();\n            maps.forEach(map => mark(element, map, used));\n        }\n        let hashes;\n        if (produceHashes) {\n            const box = getBox(element);\n            hashes = [];\n            hashes.push((structure.length >= 4) || (size >= 10) ? structure.join('') : '');\n            hashes.push(`${element.nodeName},${(size / 3) | 0},${box.height | 0},${box.width | 0}`);\n            if (size <= 5)\n                hashes.push(`${element.nodeName},${(size / 3) | 0},${box.width | 0},${box.left | 0}`);\n            else\n                hashes.push(`${element.nodeName},${(size / 3) | 0},${box.width | 0},${box.left | 0},${2 * Math.log(box.height) | 0}`);\n            if (size <= 5)\n                hashes.push(`${element.nodeName},${(size / 3) | 0},${box.height | 0},${box.top | 0}`);\n            else\n                hashes.push(`${element.nodeName},${(size / 3) | 0},${box.height | 0},${box.top | 0},${2 * Math.log(box.width) | 0}`);\n        }\n        return { size, hashes };\n    };\n    visit(root, false);\n    return lists;\n}\nconst defaultOptions = {\n    genericTagScore: 10,\n    textScore: 1,\n    imgAltScore: 2,\n    ariaLabelScore: 2,\n    detectLists: true,\n    avoidShortText: false,\n    usePlaceholders: true,\n    debug: false,\n};\nfunction parentOrRoot(element) {\n    return element.parentNode;\n}\nclass Engine {\n    constructor(options = defaultOptions) {\n        this._cues = new Map();\n        this._metrics = new Map();\n        this.options = options;\n    }\n    query(root, selector, all) {\n        const tokens = tokenize(selector);\n        if (typeof tokens === 'number')\n            throw new Error('Cannot parse selector at position ' + tokens);\n        if (!tokens.length)\n            throw new Error('Empty selector');\n        if (!this._cues.has(root)) {\n            const cueMap = new Map();\n            const pathCues = this._preprocess(root, [root], Infinity).pathCues;\n            for (const [text, cue] of pathCues) {\n                cueMap.set(text, {\n                    type: cue.type,\n                    score: cue.score,\n                    elements: cue.elements[0]\n                });\n            }\n            this._cues.set(root, cueMap);\n        }\n        // Map from the element to the boundary used. We never go outside the boundary when doing '~'.\n        let currentStep = new Map();\n        currentStep.set(root, root);\n        for (const token of tokens) {\n            const nextStep = new Map();\n            for (let [element, boundary] of currentStep) {\n                let next = [];\n                if (token.combinator === '^') {\n                    if (element === boundary) {\n                        next = [];\n                    }\n                    else {\n                        const parent = parentOrRoot(element);\n                        next = parent ? [parent] : [];\n                    }\n                }\n                else if (token.combinator === '>') {\n                    boundary = element;\n                    next = this._matchChildren(element, token, all);\n                }\n                else if (token.combinator === '') {\n                    boundary = element;\n                    next = this._matchSubtree(element, token, all);\n                }\n                else if (token.combinator === '~') {\n                    while (true) {\n                        next = this._matchSubtree(element, token, all);\n                        if (next.length) {\n                            // Further '~' / '^' will not go outside of this boundary, which is\n                            // a container with both the cue and the target elements inside.\n                            boundary = element;\n                            break;\n                        }\n                        if (element === boundary)\n                            break;\n                        element = parentOrRoot(element);\n                    }\n                }\n                for (const nextElement of next) {\n                    if (!nextStep.has(nextElement))\n                        nextStep.set(nextElement, boundary);\n                }\n            }\n            currentStep = nextStep;\n        }\n        return Array.from(currentStep.keys()).filter(e => e.nodeType === 1 /* Node.ELEMENT_NODE */);\n    }\n    create(root, target, type) {\n        const path = pathFromRoot(root, target);\n        const maxCueCount = type === 'notext' ? 50 : 10;\n        const { pathCues, lcaMap } = this._preprocess(root, path, maxCueCount);\n        const lists = this.options.detectLists ?\n            this._buildLists(root, path) : undefined;\n        const queue = path.map(_ => new Map());\n        const startStep = {\n            token: { combinator: '' },\n            element: root,\n            depth: 0,\n            score: 0,\n            totalScore: 0\n        };\n        for (let stepDepth = -1; stepDepth < path.length; stepDepth++) {\n            const stepsMap = stepDepth === -1 ? new Map([[undefined, startStep]]) : queue[stepDepth];\n            const ancestorDepth = stepDepth === -1 ? 0 : stepDepth;\n            for (const [text, cue] of pathCues) {\n                const elements = cue.elements[ancestorDepth];\n                for (let index = 0; index < elements.length; index++) {\n                    const element = elements[index];\n                    const lca = lcaMap.get(element);\n                    const lcaDepth = lca.lcaDepth;\n                    // Always go deeper in the tree.\n                    if (lcaDepth <= stepDepth)\n                        continue;\n                    // 'notext' - do not use elements from the target's subtree.\n                    if (type === 'notext' && lcaDepth === path.length - 1 && lca.depth > 0)\n                        continue;\n                    // 'notext' - do not use target's own text.\n                    if (type === 'notext' && lcaDepth === path.length - 1 && !lca.depth && cue.type !== 'tag')\n                        continue;\n                    const targetAnchor = path[lcaDepth + 1];\n                    if (lists && lca.anchor && targetAnchor && lca.anchor !== targetAnchor) {\n                        const oldList = lists.get(lca.anchor);\n                        // Do not use cues from sibling list items (lca.anchor and targetAnchor).\n                        if (oldList && oldList === lists.get(targetAnchor))\n                            continue;\n                    }\n                    if (cue.type !== 'tag' && !this._isVisible(element))\n                        continue;\n                    const distanceToTarget = path.length - stepDepth;\n                    // Short text can be used more effectively in a smaller scope.\n                    let shortTextScore = 0;\n                    if (this.options.avoidShortText && cue.type === 'text')\n                        shortTextScore = Math.max(0, distanceToTarget - 2 * (text.length - 2));\n                    const score = (cue.score + shortTextScore) * (\n                    // Unique cues are heavily favored.\n                    1 * (index + elements.length * 1000) +\n                        // Larger text is preferred.\n                        5 * (cue.type === 'text' ? this._elementMetrics(element).fontMetric : 1) +\n                        // The closer to the target, the better.\n                        1 * lca.depth);\n                    for (const [anchor, step] of stepsMap) {\n                        // This ensures uniqueness when resolving the selector.\n                        if (anchor && (cue.anchorCount.get(anchor) || 0) > index)\n                            continue;\n                        let newStep = {\n                            token: {\n                                combinator: stepDepth === -1 ? '' : '~',\n                                text: cue.type === 'text' ? text : undefined,\n                                css: cue.type === 'text' ? undefined : text,\n                                index: index || undefined,\n                            },\n                            previous: step,\n                            depth: lca.depth,\n                            element,\n                            score,\n                            totalScore: step.totalScore + score\n                        };\n                        let nextStep = queue[lcaDepth].get(lca.anchor);\n                        if (!nextStep || nextStep.totalScore > newStep.totalScore)\n                            queue[lcaDepth].set(lca.anchor, newStep);\n                        // Try going to the ancestor.\n                        if (newStep.depth) {\n                            newStep = {\n                                token: { combinator: '^' },\n                                previous: newStep,\n                                depth: 0,\n                                element: lca.lca,\n                                score: 2000 * newStep.depth,\n                                totalScore: newStep.totalScore + 2000 * newStep.depth,\n                                repeat: newStep.depth\n                            };\n                            nextStep = queue[lcaDepth].get(undefined);\n                            if (!nextStep || nextStep.totalScore > newStep.totalScore)\n                                queue[lcaDepth].set(undefined, newStep);\n                        }\n                    }\n                }\n            }\n        }\n        let best;\n        for (const [, step] of queue[path.length - 1]) {\n            if (!best || step.totalScore < best.totalScore)\n                best = step;\n        }\n        if (!best)\n            return '';\n        const tokens = new Array(best.depth).fill({ combinator: '^' });\n        while (best && best !== startStep) {\n            for (let repeat = best.repeat || 1; repeat; repeat--)\n                tokens.push(best.token);\n            best = best.previous;\n        }\n        tokens.reverse();\n        return this._serialize(tokens);\n    }\n    _textMetric(text) {\n        // Text which looks like a float number or counter is most likely volatile.\n        if (/^\\$?[\\d,]+(\\.\\d+|(\\.\\d+)?[kKmMbBgG])?$/.test(text))\n            return 12;\n        const num = Number(text);\n        // Large numbers are likely volatile.\n        if (!isNaN(num) && (num >= 32 || num < 0))\n            return 6;\n        return 1;\n    }\n    _elementMetrics(element) {\n        let metrics = this._metrics.get(element);\n        if (!metrics) {\n            const style = element.ownerDocument ?\n                element.ownerDocument.defaultView.getComputedStyle(element) :\n                {};\n            const box = element.getBoundingClientRect();\n            const fontSize = (parseInt(style.fontSize || '', 10) || 12) / 12; // default 12 px\n            const fontWeight = (parseInt(style.fontWeight || '', 10) || 400) / 400; // default normal weight\n            let fontMetric = fontSize * (1 + (fontWeight - 1) / 5);\n            fontMetric = 1 / Math.exp(fontMetric - 1);\n            metrics = { box, style, fontMetric };\n            this._metrics.set(element, metrics);\n        }\n        return metrics;\n    }\n    _isVisible(element) {\n        const metrics = this._elementMetrics(element);\n        return metrics.box.width > 1 && metrics.box.height > 1;\n    }\n    _preprocess(root, path, maxCueCount) {\n        const pathCues = new Map();\n        const lcaMap = new Map();\n        const textScore = this.options.textScore || 1;\n        const appendCue = (text, type, score, element, lca, textValue) => {\n            let pathCue = pathCues.get(text);\n            if (!pathCue) {\n                pathCue = { type, score: (textValue ? this._textMetric(textValue) : 1) * score, elements: [], anchorCount: new Map() };\n                for (let i = 0; i < path.length; i++)\n                    pathCue.elements.push([]);\n                pathCues.set(text, pathCue);\n            }\n            for (let index = lca.lcaDepth; index >= 0; index--) {\n                const elements = pathCue.elements[index];\n                if (elements.length < maxCueCount)\n                    elements.push(element);\n            }\n            if (lca.anchor)\n                pathCue.anchorCount.set(lca.anchor, 1 + (pathCue.anchorCount.get(lca.anchor) || 0));\n        };\n        const appendElementCues = (element, lca, detached) => {\n            const nodeName = element.nodeName;\n            if (!detached && this.options.usePlaceholders && nodeName === 'INPUT') {\n                const placeholder = element.getAttribute('placeholder');\n                if (placeholder)\n                    appendCue(JSON.stringify(placeholder), 'text', textScore, element, lca, placeholder);\n            }\n            if (!detached && nodeName === 'INPUT' && element.getAttribute('type') === 'button') {\n                const value = element.getAttribute('value');\n                if (value)\n                    appendCue(JSON.stringify(value), 'text', textScore, element, lca, value);\n            }\n            if (!nodeName.startsWith('<pseudo') && !nodeName.startsWith('::'))\n                appendCue(nodeName, 'tag', this.options.genericTagScore, element, lca, '');\n            if (this.options.imgAltScore && nodeName === 'IMG') {\n                const alt = element.getAttribute('alt');\n                if (alt)\n                    appendCue(`img[alt=${JSON.stringify(alt)}]`, 'imgAlt', this.options.imgAltScore, element, lca, alt);\n            }\n            if (this.options.ariaLabelScore) {\n                const ariaLabel = element.getAttribute('aria-label');\n                if (ariaLabel)\n                    appendCue(JSON.stringify(`[aria-label=${JSON.stringify(ariaLabel)}]`), 'ariaLabel', this.options.ariaLabelScore, element, lca, ariaLabel);\n            }\n        };\n        const visit = (element, lca, depth) => {\n            // Check for elements STYLE, NOSCRIPT, SCRIPT, OPTION and other elements\n            // that have |display:none| behavior.\n            const detached = !element.offsetParent;\n            if (element.nodeType === 1 /* Node.ELEMENT_NODE */)\n                appendElementCues(element, lca, detached);\n            lcaMap.set(element, lca);\n            for (let childNode = element.firstChild; childNode; childNode = childNode.nextSibling) {\n                if (element.nodeType === 1 /* Node.ELEMENT_NODE */ && !detached && childNode.nodeType === 3 /* Node.TEXT_NODE */ && childNode.nodeValue) {\n                    const textValue = childNode.nodeValue.trim();\n                    if (textValue)\n                        appendCue(JSON.stringify(textValue), 'text', textScore, element, lca, textValue);\n                }\n                if (childNode.nodeType !== 1 /* Node.ELEMENT_NODE */)\n                    continue;\n                const childElement = childNode;\n                if (childElement.nodeName.startsWith('<pseudo:'))\n                    continue;\n                if (path[depth + 1] === childElement) {\n                    const childLca = { depth: 0, lca: childElement, lcaDepth: depth + 1, anchor: undefined };\n                    visit(childElement, childLca, depth + 1);\n                }\n                else {\n                    const childLca = { depth: lca.depth + 1, lca: lca.lca, lcaDepth: lca.lcaDepth, anchor: lca.anchor || element };\n                    visit(childElement, childLca, depth + 1);\n                }\n            }\n        };\n        visit(root, { depth: 0, lca: root, lcaDepth: 0, anchor: undefined }, 0);\n        return { pathCues: pathCues, lcaMap };\n    }\n    _filterCues(cues, root) {\n        const result = new Map();\n        for (const [text, cue] of cues) {\n            const filtered = cue.elements.filter(element => root.contains(element));\n            if (!filtered.length)\n                continue;\n            const newCue = { type: cue.type, score: cue.score, elements: filtered };\n            result.set(text, newCue);\n        }\n        return result;\n    }\n    _buildLists(root, path) {\n        const pathSet = new Set(path);\n        const map = detectLists(root, e => pathSet.has(e), e => this._elementMetrics(e).box);\n        const result = new Map();\n        let listNumber = 1;\n        for (const collection of map.values()) {\n            for (const list of collection) {\n                for (const child of list)\n                    result.set(child, listNumber);\n                ++listNumber;\n            }\n        }\n        return result;\n    }\n    _matchChildren(parent, token, all) {\n        const result = [];\n        if (token.index !== undefined)\n            all = false;\n        let index = token.index || 0;\n        if (token.css !== undefined) {\n            for (let child = parent.firstElementChild; child; child = child.nextElementSibling) {\n                if (child.matches(token.css) && (all || !index--)) {\n                    result.push(child);\n                    if (!all)\n                        return result;\n                }\n            }\n            return result;\n        }\n        if (token.text !== undefined) {\n            const cue = this._getCues(parent).get(token.text);\n            if (!cue || cue.type !== 'text')\n                return [];\n            for (const element of cue.elements) {\n                if (parentOrRoot(element) === parent && (all || !index--)) {\n                    result.push(element);\n                    if (!all)\n                        return result;\n                }\n            }\n            return result;\n        }\n        throw new Error('Unsupported token');\n    }\n    _matchSubtree(root, token, all) {\n        const result = [];\n        if (token.index !== undefined)\n            all = false;\n        let index = token.index || 0;\n        if (token.css !== undefined) {\n            if (root.nodeType === 1 /* Node.ELEMENT_NODE */) {\n                const rootElement = root;\n                if (rootElement.matches(token.css) && (all || !index--)) {\n                    result.push(rootElement);\n                    if (!all)\n                        return result;\n                }\n            }\n            const queried = root.querySelectorAll(token.css);\n            if (all)\n                result.push(...Array.from(queried));\n            else if (queried.length > index)\n                result.push(queried.item(index));\n            return result;\n        }\n        if (token.text !== undefined) {\n            const texts = this._getCues(root);\n            const cue = texts.get(token.text);\n            if (!cue || cue.type !== 'text')\n                return result;\n            if (all)\n                return cue.elements;\n            if (index < cue.elements.length)\n                result.push(cue.elements[index]);\n            return result;\n        }\n        throw new Error('Unsupported token');\n    }\n    _getCues(element) {\n        if (!this._cues.has(element)) {\n            let parent = element;\n            while (!this._cues.has(parent))\n                parent = parentOrRoot(parent);\n            this._cues.set(element, this._filterCues(this._cues.get(parent), element));\n        }\n        return this._cues.get(element);\n    }\n    _serialize(tokens) {\n        const result = tokens.map(token => (token.combinator === '' ? ' ' : token.combinator) +\n            (token.text !== undefined ? token.text : '') +\n            (token.css !== undefined ? token.css : '') +\n            (token.index !== undefined ? '#' + token.index : '')).join('');\n        if (result[0] !== ' ')\n            throw new Error('First token is wrong');\n        return result.substring(1);\n    }\n}\nconst ZSSelectorEngine = {\n    create(root, element, type) {\n        return new Engine().create(root, element, type || 'default');\n    },\n    query(root, selector) {\n        return new Engine().query(root, selector, false /* all */)[0];\n    },\n    queryAll(root, selector) {\n        return new Engine().query(root, selector, true /* all */);\n    }\n};\nZSSelectorEngine.test = () => {\n    const elements = Array.from(document.querySelectorAll('*')).slice(1500, 2000);\n    console.time('test'); // eslint-disable-line no-console\n    const failures = elements.filter((e, index) => {\n        const name = e.tagName.toUpperCase();\n        if (name === 'SCRIPT' || name === 'STYLE' || name === 'NOSCRIPT' || name === 'META' || name === 'LINK' || name === 'OPTION')\n            return false;\n        if (index % 100 === 0)\n            console.log(`${index} / ${elements.length}`); // eslint-disable-line no-console\n        if (e.nodeName.toLowerCase().startsWith('<pseudo:'))\n            e = e.parentElement;\n        while (e && e.namespaceURI && e.namespaceURI.endsWith('svg') && e.nodeName.toLowerCase() !== 'svg')\n            e = e.parentElement;\n        try {\n            document.documentElement.style.outline = '1px solid red';\n            const selector = new Engine().create(document.documentElement, e, 'default');\n            document.documentElement.style.outline = '1px solid green';\n            const e2 = new Engine().query(document.documentElement, selector, false)[0];\n            return e !== e2;\n        }\n        catch (e) {\n            return false;\n        }\n    });\n    console.timeEnd('test'); // eslint-disable-line no-console\n    console.log(failures); // eslint-disable-line no-console\n};\nexports.default = ZSSelectorEngine;\n\n\n/***/ })\n\n/******/ })).default";

}
declare module 'playwright-core/helper' {
  /**
   * Copyright 2017 Google Inc. All rights reserved.
   * Modifications copyright (c) Microsoft Corporation.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *     http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /// <reference types="debug" />
  import * as platform from 'playwright-core/platform';
  import * as types from 'playwright-core/types';
  export const debugError: import("debug").IDebugger;
  export type RegisteredListener = {
      emitter: platform.EventEmitterType;
      eventName: (string | symbol);
      handler: (...args: any[]) => void;
  };
  class Helper {
      static evaluationString(fun: Function | string, ...args: any[]): string;
      static evaluationScript(fun: Function | string | {
          path?: string;
          content?: string;
      }, arg?: any, addSourceUrl?: boolean): Promise<string>;
      static installApiHooks(className: string, classType: any): void;
      static addEventListener(emitter: platform.EventEmitterType, eventName: (string | symbol), handler: (...args: any[]) => void): RegisteredListener;
      static removeEventListeners(listeners: Array<{
          emitter: platform.EventEmitterType;
          eventName: (string | symbol);
          handler: (...args: any[]) => void;
      }>): void;
      static isString(obj: any): obj is string;
      static isNumber(obj: any): obj is number;
      static isRegExp(obj: any): obj is RegExp;
      static isObject(obj: any): obj is NonNullable<object>;
      static isBoolean(obj: any): obj is boolean;
      static waitForEvent(emitter: platform.EventEmitterType, eventName: (string | symbol), predicate: Function, timeout: number, abortPromise: Promise<Error>): Promise<any>;
      static waitWithTimeout<T>(promise: Promise<T>, taskName: string, timeout: number): Promise<T>;
      static globToRegex(glob: string): RegExp;
      static completeUserURL(urlString: string): string;
      static trimMiddle(string: string, maxLength: number): string;
      static enclosingIntRect(rect: types.Rect): types.Rect;
      static enclosingIntSize(size: types.Size): types.Size;
      static urlMatches(urlString: string, match: types.URLMatch | undefined): boolean;
  }
  export function assert(value: any, message?: string): asserts value;
  export const helper: typeof Helper;
  export {};

}
declare module 'playwright-core/injected/cssSelectorEngine' {
  /**
   * Copyright (c) Microsoft Corporation.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  import { SelectorEngine } from 'playwright-core/injected/selectorEngine';
  export const CSSEngine: SelectorEngine;

}
declare module 'playwright-core/injected/injected' {
  /**
   * Copyright (c) Microsoft Corporation.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  import { SelectorEngine } from 'playwright-core/injected/selectorEngine';
  import { Utils } from 'playwright-core/injected/utils';
  import * as types from 'playwright-core/types';
  type Predicate = (element: Element | undefined) => any;
  class Injected {
      readonly utils: Utils;
      readonly engines: Map<string, SelectorEngine>;
      constructor(customEngines: {
          name: string;
          engine: SelectorEngine;
      }[]);
      querySelector(selector: string, root: Node): Element | undefined;
      private _querySelectorRecursively;
      querySelectorAll(selector: string, root: Node): Element[];
      private _parseSelector;
      isVisible(element: Element): boolean;
      private _pollMutation;
      private _pollRaf;
      private _pollInterval;
      poll(polling: 'raf' | 'mutation' | number, selector: string | undefined, timeout: number, predicate: Predicate): Promise<any>;
      getElementBorderWidth(node: Node): {
          left: number;
          top: number;
      };
      selectOptions(node: Node, optionsToSelect: (Node | types.SelectOption)[]): string[];
      fill(node: Node, value: string): string | false;
      isCheckboxChecked(node: Node): boolean;
      waitForDisplayedAtStablePosition(node: Node, timeout: number): Promise<void>;
      waitForHitTargetAt(node: Node, timeout: number, point: types.Point): Promise<void>;
  }
  export default Injected;

}
declare module 'playwright-core/injected/selectorEngine' {
  /**
   * Copyright (c) Microsoft Corporation.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  export type SelectorType = 'default' | 'notext';
  export type SelectorRoot = Element | ShadowRoot | Document;
  export interface SelectorEngine {
      create(root: SelectorRoot, target: Element, type?: SelectorType): string | undefined;
      query(root: SelectorRoot, selector: string): Element | undefined;
      queryAll(root: SelectorRoot, selector: string): Element[];
  }

}
declare module 'playwright-core/injected/textSelectorEngine' {
  /**
   * Copyright (c) Microsoft Corporation.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  import { SelectorEngine } from 'playwright-core/injected/selectorEngine';
  export const TextEngine: SelectorEngine;

}
declare module 'playwright-core/injected/utils' {
  /**
   * Copyright (c) Microsoft Corporation.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  export class Utils {
      parentElementOrShadowHost(element: Element): Element | undefined;
      deepElementFromPoint(document: Document, x: number, y: number): Element | undefined;
  }

}
declare module 'playwright-core/injected/xpathSelectorEngine' {
  /**
   * Copyright (c) Microsoft Corporation.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  import { SelectorEngine } from 'playwright-core/injected/selectorEngine';
  export const XPathEngine: SelectorEngine;

}
declare module 'playwright-core/injected/zsSelectorEngine' {
  /**
   * Copyright (c) Microsoft Corporation.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  import { SelectorEngine } from 'playwright-core/injected/selectorEngine';
  const ZSSelectorEngine: SelectorEngine;
  export default ZSSelectorEngine;

}
declare module 'playwright-core/input' {
  /**
   * Copyright (c) Microsoft Corporation.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  export type Modifier = 'Alt' | 'Control' | 'Meta' | 'Shift';
  export type Button = 'left' | 'right' | 'middle';
  export type MouseClickOptions = {
      delay?: number;
      button?: Button;
      clickCount?: number;
  };
  export type MouseMultiClickOptions = {
      delay?: number;
      button?: Button;
  };
  export const keypadLocation = 3;
  export interface RawKeyboard {
      keydown(modifiers: Set<Modifier>, code: string, keyCode: number, keyCodeWithoutLocation: number, key: string, location: number, autoRepeat: boolean, text: string | undefined): Promise<void>;
      keyup(modifiers: Set<Modifier>, code: string, keyCode: number, keyCodeWithoutLocation: number, key: string, location: number): Promise<void>;
      sendText(text: string): Promise<void>;
  }
  export class Keyboard {
      private _raw;
      private _pressedModifiers;
      private _pressedKeys;
      constructor(raw: RawKeyboard);
      down(key: string): Promise<void>;
      private _keyDescriptionForString;
      up(key: string): Promise<void>;
      insertText(text: string): Promise<void>;
      type(text: string, options?: {
          delay?: number;
      }): Promise<void>;
      press(key: string, options?: {
          delay?: number;
      }): Promise<void>;
      _ensureModifiers(modifiers: Modifier[]): Promise<Modifier[]>;
      _modifiers(): Set<Modifier>;
  }
  export interface RawMouse {
      move(x: number, y: number, button: Button | 'none', buttons: Set<Button>, modifiers: Set<Modifier>): Promise<void>;
      down(x: number, y: number, button: Button, buttons: Set<Button>, modifiers: Set<Modifier>, clickCount: number): Promise<void>;
      up(x: number, y: number, button: Button, buttons: Set<Button>, modifiers: Set<Modifier>, clickCount: number): Promise<void>;
  }
  export class Mouse {
      private _raw;
      private _keyboard;
      private _x;
      private _y;
      private _lastButton;
      private _buttons;
      constructor(raw: RawMouse, keyboard: Keyboard);
      move(x: number, y: number, options?: {
          steps?: number;
      }): Promise<void>;
      down(options?: {
          button?: Button;
          clickCount?: number;
      }): Promise<void>;
      up(options?: {
          button?: Button;
          clickCount?: number;
      }): Promise<void>;
      click(x: number, y: number, options?: MouseClickOptions): Promise<void>;
      dblclick(x: number, y: number, options?: MouseMultiClickOptions): Promise<void>;
  }

}
declare module 'playwright-core/javascript' {
  /**
   * Copyright (c) Microsoft Corporation.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  import * as types from 'playwright-core/types';
  import * as dom from 'playwright-core/dom';
  export interface ExecutionContextDelegate {
      evaluate(context: ExecutionContext, returnByValue: boolean, pageFunction: string | Function, ...args: any[]): Promise<any>;
      getProperties(handle: JSHandle): Promise<Map<string, JSHandle>>;
      releaseHandle(handle: JSHandle): Promise<void>;
      handleToString(handle: JSHandle, includeType: boolean): string;
      handleJSONValue<T>(handle: JSHandle<T>): Promise<T>;
  }
  export class ExecutionContext {
      readonly _delegate: ExecutionContextDelegate;
      constructor(delegate: ExecutionContextDelegate);
      _doEvaluateInternal(returnByValue: boolean, waitForNavigations: boolean, pageFunction: string | Function, ...args: any[]): Promise<any>;
      _adoptIfNeeded(handle: JSHandle): Promise<JSHandle> | null;
      evaluateInternal<R>(pageFunction: types.Func0<R>): Promise<R>;
      evaluateInternal<Arg, R>(pageFunction: types.Func1<Arg, R>, arg: Arg): Promise<R>;
      evaluateHandleInternal<R>(pageFunction: types.Func0<R>): Promise<types.SmartHandle<R>>;
      evaluateHandleInternal<Arg, R>(pageFunction: types.Func1<Arg, R>, arg: Arg): Promise<types.SmartHandle<R>>;
      _createHandle(remoteObject: any): JSHandle;
  }
  export class JSHandle<T = any> {
      readonly _context: ExecutionContext;
      readonly _remoteObject: any;
      _disposed: boolean;
      constructor(context: ExecutionContext, remoteObject: any);
      evaluate<R, Arg>(pageFunction: types.FuncOn<T, Arg, R>, arg: Arg): Promise<R>;
      evaluate<R>(pageFunction: types.FuncOn<T, void, R>, arg?: any): Promise<R>;
      evaluateHandle<R, Arg>(pageFunction: types.FuncOn<T, Arg, R>, arg: Arg): Promise<types.SmartHandle<R>>;
      evaluateHandle<R>(pageFunction: types.FuncOn<T, void, R>, arg?: any): Promise<types.SmartHandle<R>>;
      getProperty(propertyName: string): Promise<JSHandle>;
      getProperties(): Promise<Map<string, JSHandle>>;
      jsonValue(): Promise<T>;
      asElement(): dom.ElementHandle | null;
      dispose(): Promise<void>;
      toString(): string;
  }
  export function prepareFunctionCall<T>(pageFunction: Function, context: ExecutionContext, args: any[], toCallArgumentIfNeeded: (value: any) => {
      handle?: T;
      value?: any;
  }): Promise<{
      functionText: string;
      values: any[];
      handles: T[];
      dispose: () => void;
  }>;

}
declare module 'playwright-core/network' {
  /**
   * Copyright (c) Microsoft Corporation.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  import * as frames from 'playwright-core/frames';
  import * as platform from 'playwright-core/platform';
  export type NetworkCookie = {
      name: string;
      value: string;
      domain: string;
      path: string;
      expires: number;
      httpOnly: boolean;
      secure: boolean;
      sameSite: 'Strict' | 'Lax' | 'None';
  };
  export type SetNetworkCookieParam = {
      name: string;
      value: string;
      url?: string;
      domain?: string;
      path?: string;
      expires?: number;
      httpOnly?: boolean;
      secure?: boolean;
      sameSite?: 'Strict' | 'Lax' | 'None';
  };
  export function filterCookies(cookies: NetworkCookie[], urls?: string | string[]): NetworkCookie[];
  export function rewriteCookies(cookies: SetNetworkCookieParam[]): SetNetworkCookieParam[];
  export type Headers = {
      [key: string]: string;
  };
  export class Request {
      readonly _routeDelegate: RouteDelegate | null;
      private _response;
      private _redirectedFrom;
      private _redirectedTo;
      readonly _documentId?: string;
      readonly _isFavicon: boolean;
      private _failureText;
      private _url;
      private _resourceType;
      private _method;
      private _postData;
      private _headers;
      private _frame;
      private _waitForResponsePromise;
      private _waitForResponsePromiseCallback;
      constructor(routeDelegate: RouteDelegate | null, frame: frames.Frame, redirectedFrom: Request | null, documentId: string | undefined, url: string, resourceType: string, method: string, postData: string | null, headers: Headers);
      _setFailureText(failureText: string): void;
      url(): string;
      resourceType(): string;
      method(): string;
      postData(): string | null;
      headers(): {
          [key: string]: string;
      };
      response(): Promise<Response | null>;
      _existingResponse(): Response | null;
      _setResponse(response: Response): void;
      _finalRequest(): Request;
      frame(): frames.Frame;
      isNavigationRequest(): boolean;
      redirectedFrom(): Request | null;
      redirectedTo(): Request | null;
      failure(): {
          errorText: string;
      } | null;
      _route(): Route | null;
  }
  export class Route {
      private readonly _request;
      private readonly _delegate;
      private _handled;
      constructor(request: Request, delegate: RouteDelegate);
      request(): Request;
      abort(errorCode?: string): Promise<void>;
      fulfill(response: FulfillResponse & {
          path?: string;
      }): Promise<void>;
      continue(overrides?: {
          method?: string;
          headers?: Headers;
          postData?: string;
      }): Promise<void>;
  }
  export type RouteHandler = (route: Route, request: Request) => void;
  type GetResponseBodyCallback = () => Promise<platform.BufferType>;
  export class Response {
      private _request;
      private _contentPromise;
      _finishedPromise: Promise<Error | null>;
      private _finishedPromiseCallback;
      private _status;
      private _statusText;
      private _url;
      private _headers;
      private _getResponseBodyCallback;
      constructor(request: Request, status: number, statusText: string, headers: Headers, getResponseBodyCallback: GetResponseBodyCallback);
      _requestFinished(error?: Error): void;
      url(): string;
      ok(): boolean;
      status(): number;
      statusText(): string;
      headers(): object;
      finished(): Promise<Error | null>;
      body(): Promise<platform.BufferType>;
      text(): Promise<string>;
      json(): Promise<object>;
      request(): Request;
      frame(): frames.Frame;
  }
  export type FulfillResponse = {
      status?: number;
      headers?: Headers;
      contentType?: string;
      body?: string | platform.BufferType;
  };
  export interface RouteDelegate {
      abort(errorCode: string): Promise<void>;
      fulfill(response: FulfillResponse): Promise<void>;
      continue(overrides: {
          method?: string;
          headers?: Headers;
          postData?: string;
      }): Promise<void>;
  }
  export const STATUS_TEXTS: {
      [status: string]: string;
  };
  export function verifyHeaders(headers: Headers): Headers;
  export function mergeHeaders(headers: (Headers | undefined | null)[]): Headers;
  export {};

}
declare module 'playwright-core/page' {
  /**
   * Copyright 2017 Google Inc. All rights reserved.
   * Modifications copyright (c) Microsoft Corporation.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *     http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  import * as dom from 'playwright-core/dom';
  import * as frames from 'playwright-core/frames';
  import * as input from 'playwright-core/input';
  import * as js from 'playwright-core/javascript';
  import * as network from 'playwright-core/network';
  import { Screenshotter } from 'playwright-core/screenshotter';
  import { TimeoutSettings } from 'playwright-core/timeoutSettings';
  import * as types from 'playwright-core/types';
  import { BrowserContext, BrowserContextBase } from 'playwright-core/browserContext';
  import { ConsoleMessageLocation } from 'playwright-core/console';
  import * as accessibility from 'playwright-core/accessibility';
  import * as platform from 'playwright-core/platform';
  export interface PageDelegate {
      readonly rawMouse: input.RawMouse;
      readonly rawKeyboard: input.RawKeyboard;
      opener(): Promise<Page | null>;
      reload(): Promise<void>;
      goBack(): Promise<boolean>;
      goForward(): Promise<boolean>;
      exposeBinding(binding: PageBinding): Promise<void>;
      evaluateOnNewDocument(source: string): Promise<void>;
      closePage(runBeforeUnload: boolean): Promise<void>;
      navigateFrame(frame: frames.Frame, url: string, referrer: string | undefined): Promise<frames.GotoResult>;
      updateExtraHTTPHeaders(): Promise<void>;
      setViewportSize(viewportSize: types.Size): Promise<void>;
      setEmulateMedia(mediaType: types.MediaType | null, colorScheme: types.ColorScheme | null): Promise<void>;
      updateRequestInterception(): Promise<void>;
      setFileChooserIntercepted(enabled: boolean): Promise<void>;
      canScreenshotOutsideViewport(): boolean;
      resetViewport(): Promise<void>;
      setBackgroundColor(color?: {
          r: number;
          g: number;
          b: number;
          a: number;
      }): Promise<void>;
      takeScreenshot(format: string, documentRect: types.Rect | undefined, viewportRect: types.Rect | undefined, quality: number | undefined): Promise<platform.BufferType>;
      isElementHandle(remoteObject: any): boolean;
      adoptElementHandle<T extends Node>(handle: dom.ElementHandle<T>, to: dom.FrameExecutionContext): Promise<dom.ElementHandle<T>>;
      getContentFrame(handle: dom.ElementHandle): Promise<frames.Frame | null>;
      getOwnerFrame(handle: dom.ElementHandle): Promise<string | null>;
      getContentQuads(handle: dom.ElementHandle): Promise<types.Quad[] | null>;
      layoutViewport(): Promise<{
          width: number;
          height: number;
      }>;
      setInputFiles(handle: dom.ElementHandle<HTMLInputElement>, files: types.FilePayload[]): Promise<void>;
      getBoundingBox(handle: dom.ElementHandle): Promise<types.Rect | null>;
      getFrameElement(frame: frames.Frame): Promise<dom.ElementHandle>;
      scrollRectIntoViewIfNeeded(handle: dom.ElementHandle, rect?: types.Rect): Promise<void>;
      getAccessibilityTree(needle?: dom.ElementHandle): Promise<{
          tree: accessibility.AXNode;
          needle: accessibility.AXNode | null;
      }>;
      pdf?: (options?: types.PDFOptions) => Promise<platform.BufferType>;
      coverage?: () => any;
      inputActionEpilogue(): Promise<void>;
  }
  type PageState = {
      viewportSize: types.Size | null;
      mediaType: types.MediaType | null;
      colorScheme: types.ColorScheme | null;
      extraHTTPHeaders: network.Headers | null;
  };
  export type FileChooser = {
      element: dom.ElementHandle;
      multiple: boolean;
  };
  export class Page extends platform.EventEmitter {
      private _closed;
      private _closedCallback;
      private _closedPromise;
      private _disconnected;
      private _disconnectedCallback;
      readonly _disconnectedPromise: Promise<Error>;
      readonly _browserContext: BrowserContextBase;
      readonly keyboard: input.Keyboard;
      readonly mouse: input.Mouse;
      readonly _timeoutSettings: TimeoutSettings;
      readonly _delegate: PageDelegate;
      readonly _state: PageState;
      readonly _pageBindings: Map<string, PageBinding>;
      readonly _screenshotter: Screenshotter;
      readonly _frameManager: frames.FrameManager;
      readonly accessibility: accessibility.Accessibility;
      private _workers;
      readonly pdf: ((options?: types.PDFOptions) => Promise<platform.BufferType>) | undefined;
      readonly coverage: any;
      readonly _routes: {
          url: types.URLMatch;
          handler: network.RouteHandler;
      }[];
      _ownedContext: BrowserContext | undefined;
      constructor(delegate: PageDelegate, browserContext: BrowserContextBase);
      _didClose(): void;
      _didCrash(): void;
      _didDisconnect(): void;
      _onFileChooserOpened(handle: dom.ElementHandle): Promise<void>;
      context(): BrowserContext;
      opener(): Promise<Page | null>;
      mainFrame(): frames.Frame;
      frame(options: string | {
          name?: string;
          url?: types.URLMatch;
      }): frames.Frame | null;
      frames(): frames.Frame[];
      setDefaultNavigationTimeout(timeout: number): void;
      setDefaultTimeout(timeout: number): void;
      $(selector: string): Promise<dom.ElementHandle<Element> | null>;
      waitForSelector(selector: string, options?: types.WaitForElementOptions): Promise<dom.ElementHandle<Element> | null>;
      evaluateHandle<R, Arg>(pageFunction: types.Func1<Arg, R>, arg: Arg): Promise<types.SmartHandle<R>>;
      evaluateHandle<R>(pageFunction: types.Func1<void, R>, arg?: any): Promise<types.SmartHandle<R>>;
      $eval<R, Arg>(selector: string, pageFunction: types.FuncOn<Element, Arg, R>, arg: Arg): Promise<R>;
      $eval<R>(selector: string, pageFunction: types.FuncOn<Element, void, R>, arg?: any): Promise<R>;
      $$eval<R, Arg>(selector: string, pageFunction: types.FuncOn<Element[], Arg, R>, arg: Arg): Promise<R>;
      $$eval<R>(selector: string, pageFunction: types.FuncOn<Element[], void, R>, arg?: any): Promise<R>;
      $$(selector: string): Promise<dom.ElementHandle<Element>[]>;
      addScriptTag(options: {
          url?: string;
          path?: string;
          content?: string;
          type?: string;
      }): Promise<dom.ElementHandle>;
      addStyleTag(options: {
          url?: string;
          path?: string;
          content?: string;
      }): Promise<dom.ElementHandle>;
      exposeFunction(name: string, playwrightFunction: Function): Promise<void>;
      setExtraHTTPHeaders(headers: network.Headers): Promise<void>;
      _onBindingCalled(payload: string, context: js.ExecutionContext): Promise<void>;
      _addConsoleMessage(type: string, args: js.JSHandle[], location: ConsoleMessageLocation, text?: string): void;
      url(): string;
      content(): Promise<string>;
      setContent(html: string, options?: types.NavigateOptions): Promise<void>;
      goto(url: string, options?: frames.GotoOptions): Promise<network.Response | null>;
      reload(options?: types.NavigateOptions): Promise<network.Response | null>;
      waitForLoadState(state?: types.LifecycleEvent, options?: types.TimeoutOptions): Promise<void>;
      waitForNavigation(options?: types.WaitForNavigationOptions): Promise<network.Response | null>;
      waitForEvent(event: string, optionsOrPredicate?: Function | (types.TimeoutOptions & {
          predicate?: Function;
      })): Promise<any>;
      waitForRequest(urlOrPredicate: string | RegExp | ((r: network.Request) => boolean), options?: types.TimeoutOptions): Promise<network.Request>;
      waitForResponse(urlOrPredicate: string | RegExp | ((r: network.Response) => boolean), options?: types.TimeoutOptions): Promise<network.Response>;
      goBack(options?: types.NavigateOptions): Promise<network.Response | null>;
      goForward(options?: types.NavigateOptions): Promise<network.Response | null>;
      emulateMedia(options: {
          media?: types.MediaType;
          colorScheme?: types.ColorScheme;
      }): Promise<void>;
      setViewportSize(viewportSize: types.Size): Promise<void>;
      viewportSize(): types.Size | null;
      evaluate<R, Arg>(pageFunction: types.Func1<Arg, R>, arg: Arg): Promise<R>;
      evaluate<R>(pageFunction: types.Func1<void, R>, arg?: any): Promise<R>;
      addInitScript(script: Function | string | {
          path?: string;
          content?: string;
      }, arg?: any): Promise<void>;
      _needsRequestInterception(): boolean;
      route(url: types.URLMatch, handler: network.RouteHandler): Promise<void>;
      _requestStarted(request: network.Request): void;
      screenshot(options?: types.ScreenshotOptions): Promise<platform.BufferType>;
      title(): Promise<string>;
      close(options?: {
          runBeforeUnload: (boolean | undefined);
      }): Promise<void>;
      isClosed(): boolean;
      click(selector: string, options?: dom.ClickOptions & types.PointerActionWaitOptions & types.NavigatingActionWaitOptions): Promise<void>;
      dblclick(selector: string, options?: dom.MultiClickOptions & types.PointerActionWaitOptions & types.NavigatingActionWaitOptions): Promise<void>;
      fill(selector: string, value: string, options?: types.NavigatingActionWaitOptions): Promise<void>;
      focus(selector: string, options?: types.TimeoutOptions): Promise<void>;
      hover(selector: string, options?: dom.PointerActionOptions & types.PointerActionWaitOptions): Promise<void>;
      selectOption(selector: string, values: string | dom.ElementHandle | types.SelectOption | string[] | dom.ElementHandle[] | types.SelectOption[], options?: types.NavigatingActionWaitOptions): Promise<string[]>;
      type(selector: string, text: string, options?: {
          delay?: number;
      } & types.NavigatingActionWaitOptions): Promise<void>;
      press(selector: string, key: string, options?: {
          delay?: number;
      } & types.NavigatingActionWaitOptions): Promise<void>;
      check(selector: string, options?: types.PointerActionWaitOptions & types.NavigatingActionWaitOptions): Promise<void>;
      uncheck(selector: string, options?: types.PointerActionWaitOptions & types.NavigatingActionWaitOptions): Promise<void>;
      waitFor(selectorOrFunctionOrTimeout: (string | number | Function), options?: types.WaitForFunctionOptions & types.WaitForElementOptions, arg?: any): Promise<js.JSHandle | null>;
      waitForFunction<R, Arg>(pageFunction: types.Func1<Arg, R>, arg: Arg, options?: types.WaitForFunctionOptions): Promise<types.SmartHandle<R>>;
      waitForFunction<R>(pageFunction: types.Func1<void, R>, arg?: any, options?: types.WaitForFunctionOptions): Promise<types.SmartHandle<R>>;
      workers(): Worker[];
      _addWorker(workerId: string, worker: Worker): void;
      _removeWorker(workerId: string): void;
      _clearWorkers(): void;
      on(event: string | symbol, listener: platform.Listener): this;
      removeListener(event: string | symbol, listener: platform.Listener): this;
  }
  export class Worker extends platform.EventEmitter {
      private _url;
      private _executionContextPromise;
      private _executionContextCallback;
      _existingExecutionContext: js.ExecutionContext | null;
      constructor(url: string);
      _createExecutionContext(delegate: js.ExecutionContextDelegate): void;
      url(): string;
      evaluate<R, Arg>(pageFunction: types.Func1<Arg, R>, arg: Arg): Promise<R>;
      evaluate<R>(pageFunction: types.Func1<void, R>, arg?: any): Promise<R>;
      evaluateHandle<R, Arg>(pageFunction: types.Func1<Arg, R>, arg: Arg): Promise<types.SmartHandle<R>>;
      evaluateHandle<R>(pageFunction: types.Func1<void, R>, arg?: any): Promise<types.SmartHandle<R>>;
  }
  export class PageBinding {
      readonly name: string;
      readonly playwrightFunction: Function;
      readonly source: string;
      constructor(name: string, playwrightFunction: Function);
      static dispatch(page: Page, payload: string, context: js.ExecutionContext): Promise<void>;
  }
  export {};

}
declare module 'playwright-core/platform' {
  /**
   * Copyright (c) Microsoft Corporation.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /// <reference types="node" />
  import * as nodeEvents from 'events';
  import * as nodeDebug from 'debug';
  import * as nodeBuffer from 'buffer';
  import { ConnectionTransport } from 'playwright-core/transport';
  export const isNode: boolean;
  export function promisify(nodeFunction: Function): Function;
  export type Listener = (...args: any[]) => void;
  export const EventEmitter: typeof nodeEvents.EventEmitter;
  export type EventEmitterType = nodeEvents.EventEmitter;
  type DebugType = typeof nodeDebug;
  export const debug: DebugType;
  export const Buffer: typeof nodeBuffer.Buffer;
  export type BufferType = Buffer;
  export function readFileAsync(file: string, encoding: string): Promise<string>;
  export function readFileBuffer(file: string): Promise<BufferType>;
  export function writeFileAsync(file: string, data: any): Promise<any>;
  export function basename(file: string): string;
  export function openFdAsync(file: string, flags: string): Promise<number>;
  export function writeFdAsync(fd: number, buffer: Buffer): Promise<void>;
  export function closeFdAsync(fd: number): Promise<void>;
  export function getMimeType(file: string): string;
  export function pngToJpeg(buffer: Buffer, quality?: number): Buffer;
  export function fetchUrl(url: string): Promise<string>;
  export function makeWaitForNextTask(): typeof setImmediate | ((callback: () => void) => void);
  export function guid(): string;
  export function connectToWebsocket<T>(url: string, onopen: (transport: ConnectionTransport) => Promise<T>): Promise<T>;
  export {};

}
declare module 'playwright-core/screenshotter' {
  /**
   * Copyright 2019 Google Inc. All rights reserved.
   * Modifications copyright (c) Microsoft Corporation.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *     http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  import * as dom from 'playwright-core/dom';
  import * as types from 'playwright-core/types';
  import { Page } from 'playwright-core/page';
  import * as platform from 'playwright-core/platform';
  export class Screenshotter {
      private _queue;
      private _page;
      constructor(page: Page);
      private _originalViewportSize;
      private _fullPageSize;
      screenshotPage(options?: types.ScreenshotOptions): Promise<platform.BufferType>;
      screenshotElement(handle: dom.ElementHandle, options?: types.ElementScreenshotOptions): Promise<platform.BufferType>;
      private _screenshot;
  }
  export const kScreenshotDuringNavigationError = "Cannot take a screenshot while page is navigating";

}
declare module 'playwright-core/selectors' {
  /**
   * Copyright (c) Microsoft Corporation.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  import * as dom from 'playwright-core/dom';
  export class Selectors {
      readonly _engines: Map<string, string>;
      _generation: number;
      static _instance(): Selectors;
      constructor();
      register(name: string, script: string | Function | {
          path?: string;
          content?: string;
      }): Promise<void>;
      _createSelector(name: string, handle: dom.ElementHandle<Element>): Promise<string | undefined>;
  }

}
declare module 'playwright-core/server/browserFetcher' {
  /**
   * Copyright 2017 Google Inc. All rights reserved.
   * Modifications copyright (c) Microsoft Corporation.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *     http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  export type OnProgressCallback = (downloadedBytes: number, totalBytes: number) => void;
  export type BrowserName = ('chromium' | 'webkit' | 'firefox');
  export type BrowserPlatform = ('win32' | 'win64' | 'mac10.14' | 'mac10.15' | 'linux');
  export type DownloadOptions = {
      browser: BrowserName;
      revision: string;
      downloadPath: string;
      platform?: BrowserPlatform;
      host?: string;
      progress?: OnProgressCallback;
  };
  export function downloadBrowser(options: DownloadOptions): Promise<void>;
  export function executablePath(options: DownloadOptions): string;
  export function canDownload(options: DownloadOptions): Promise<boolean>;

}
declare module 'playwright-core/server/browserServer' {
  /**
   * Copyright (c) Microsoft Corporation.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /// <reference types="node" />
  import { ChildProcess } from 'child_process';
  import * as platform from 'playwright-core/platform';
  export class BrowserServer extends platform.EventEmitter {
      private _process;
      private _gracefullyClose;
      private _browserWSEndpoint;
      constructor(process: ChildProcess, gracefullyClose: () => Promise<void>, wsEndpoint: string | null);
      process(): ChildProcess;
      wsEndpoint(): string;
      kill(): void;
      close(): Promise<void>;
  }

}
declare module 'playwright-core/server/browserType' {
  /**
   * Copyright (c) Microsoft Corporation.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  import { ConnectOptions } from 'playwright-core/browser';
  import { BrowserContext } from 'playwright-core/browserContext';
  import { BrowserServer } from 'playwright-core/server/browserServer';
  export type BrowserArgOptions = {
      headless?: boolean;
      args?: string[];
      devtools?: boolean;
  };
  export type LaunchOptions = BrowserArgOptions & {
      executablePath?: string;
      ignoreDefaultArgs?: boolean | string[];
      handleSIGINT?: boolean;
      handleSIGTERM?: boolean;
      handleSIGHUP?: boolean;
      timeout?: number;
      /**
       * Whether to dump stdio of the browser, this is useful for example when
       * diagnosing browser launch issues.
       */
      dumpio?: boolean;
      env?: {
          [key: string]: string;
      } | undefined;
  };
  export interface BrowserType<Browser> {
      executablePath(): string;
      name(): string;
      launch(options?: LaunchOptions & {
          slowMo?: number;
      }): Promise<Browser>;
      launchServer(options?: LaunchOptions & {
          port?: number;
      }): Promise<BrowserServer>;
      launchPersistentContext(userDataDir: string, options?: LaunchOptions): Promise<BrowserContext>;
      connect(options: ConnectOptions): Promise<Browser>;
  }

}
declare module 'playwright-core/server/chromium' {
  /**
   * Copyright 2017 Google Inc. All rights reserved.
   * Modifications copyright (c) Microsoft Corporation.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *     http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  import { CRBrowser } from 'playwright-core/chromium/crBrowser';
  import { LaunchOptions, BrowserType } from 'playwright-core/server/browserType';
  import { ConnectOptions } from 'playwright-core/browser';
  import { BrowserServer } from 'playwright-core/server/browserServer';
  import { BrowserContext } from 'playwright-core/browserContext';
  export class Chromium implements BrowserType<CRBrowser> {
      private _executablePath;
      executablePath(): string;
      name(): string;
      launch(options?: LaunchOptions & {
          slowMo?: number;
      }): Promise<CRBrowser>;
      launchServer(options?: LaunchOptions & {
          port?: number;
      }): Promise<BrowserServer>;
      launchPersistentContext(userDataDir: string, options?: LaunchOptions): Promise<BrowserContext>;
      private _launchServer;
      connect(options: ConnectOptions): Promise<CRBrowser>;
      private _defaultArgs;
  }

}
declare module 'playwright-core/server/firefox' {
  /**
   * Copyright 2017 Google Inc. All rights reserved.
   * Modifications copyright (c) Microsoft Corporation.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *     http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  import { ConnectOptions } from 'playwright-core/browser';
  import { BrowserContext } from 'playwright-core/browserContext';
  import { FFBrowser } from 'playwright-core/firefox/ffBrowser';
  import { BrowserServer } from 'playwright-core/server/browserServer';
  import { BrowserType, LaunchOptions } from 'playwright-core/server/browserType';
  export class Firefox implements BrowserType<FFBrowser> {
      private _executablePath;
      executablePath(): string;
      name(): string;
      launch(options?: LaunchOptions & {
          slowMo?: number;
      }): Promise<FFBrowser>;
      launchServer(options?: LaunchOptions & {
          port?: number;
      }): Promise<BrowserServer>;
      launchPersistentContext(userDataDir: string, options?: LaunchOptions): Promise<BrowserContext>;
      private _launchServer;
      connect(options: ConnectOptions): Promise<FFBrowser>;
      private _defaultArgs;
  }

}
declare module 'playwright-core/server/pipeTransport' {
  /**
   * Copyright 2018 Google Inc. All rights reserved.
   * Modifications copyright (c) Microsoft Corporation.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *     http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /// <reference types="node" />
  import { ConnectionTransport } from 'playwright-core/transport';
  export class PipeTransport implements ConnectionTransport {
      private _pipeWrite;
      private _pendingMessage;
      private _eventListeners;
      private _waitForNextTask;
      private readonly _closeCallback;
      onmessage?: (message: string) => void;
      onclose?: () => void;
      constructor(pipeWrite: NodeJS.WritableStream, pipeRead: NodeJS.ReadableStream, closeCallback: () => void);
      send(message: string): void;
      close(): void;
      _dispatch(buffer: Buffer): void;
  }

}
declare module 'playwright-core/server/playwright' {
  /**
   * Copyright (c) Microsoft Corporation.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  import * as types from 'playwright-core/types';
  import * as api from 'playwright-core/api';
  import { TimeoutError } from 'playwright-core/errors';
  import { Chromium } from 'playwright-core/server/chromium';
  import { WebKit } from 'playwright-core/server/webkit';
  import { Firefox } from 'playwright-core/server/firefox';
  type PlaywrightOptions = {
      browsers: Array<('firefox' | 'webkit' | 'chromium')>;
  };
  export class Playwright {
      readonly selectors: api.Selectors;
      readonly devices: types.Devices;
      readonly errors: {
          TimeoutError: typeof TimeoutError;
      };
      readonly chromium: (Chromium | undefined);
      readonly firefox: (Firefox | undefined);
      readonly webkit: (WebKit | undefined);
      constructor(options: PlaywrightOptions);
  }
  export {};

}
declare module 'playwright-core/server/processLauncher' {
  /**
   * Copyright 2017 Google Inc. All rights reserved.
   * Modifications copyright (c) Microsoft Corporation.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *     http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /// <reference types="node" />
  import * as childProcess from 'child_process';
  import * as stream from 'stream';
  import { TimeoutError } from 'playwright-core/errors';
  export type LaunchProcessOptions = {
      executablePath: string;
      args: string[];
      env?: {
          [key: string]: string | undefined;
      };
      handleSIGINT?: boolean;
      handleSIGTERM?: boolean;
      handleSIGHUP?: boolean;
      dumpio?: boolean;
      pipe?: boolean;
      tempDir?: string;
      attemptToGracefullyClose: () => Promise<any>;
      onkill: (exitCode: number | null, signal: string | null) => void;
  };
  type LaunchResult = {
      launchedProcess: childProcess.ChildProcess;
      gracefullyClose: () => Promise<void>;
  };
  export function launchProcess(options: LaunchProcessOptions): Promise<LaunchResult>;
  export function waitForLine(process: childProcess.ChildProcess, inputStream: stream.Readable, regex: RegExp, timeout: number, timeoutError: TimeoutError): Promise<RegExpMatchArray>;
  export {};

}
declare module 'playwright-core/server/webkit' {
  /**
   * Copyright 2017 Google Inc. All rights reserved.
   * Modifications copyright (c) Microsoft Corporation.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *     http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  import { WKBrowser } from 'playwright-core/webkit/wkBrowser';
  import { LaunchOptions, BrowserArgOptions, BrowserType } from 'playwright-core/server/browserType';
  import { ConnectOptions, LaunchType } from 'playwright-core/browser';
  import { BrowserServer } from 'playwright-core/server/browserServer';
  import { BrowserContext } from 'playwright-core/browserContext';
  export class WebKit implements BrowserType<WKBrowser> {
      private _executablePath;
      executablePath(): string;
      name(): string;
      launch(options?: LaunchOptions & {
          slowMo?: number;
      }): Promise<WKBrowser>;
      launchServer(options?: LaunchOptions & {
          port?: number;
      }): Promise<BrowserServer>;
      launchPersistentContext(userDataDir: string, options?: LaunchOptions): Promise<BrowserContext>;
      private _launchServer;
      connect(options: ConnectOptions): Promise<WKBrowser>;
      _defaultArgs(options: BrowserArgOptions | undefined, launchType: LaunchType, userDataDir: string, port: number): string[];
  }

}
declare module 'playwright-core/timeoutSettings' {
  /**
   * Copyright 2019 Google Inc. All rights reserved.
   * Modifications copyright (c) Microsoft Corporation.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *     http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  export class TimeoutSettings {
      private _parent;
      private _defaultTimeout;
      private _defaultNavigationTimeout;
      constructor(parent?: TimeoutSettings);
      setDefaultTimeout(timeout: number): void;
      setDefaultNavigationTimeout(timeout: number): void;
      navigationTimeout(): number;
      timeout(): number;
  }

}
declare module 'playwright-core/transport' {
  /**
   * Copyright 2018 Google Inc. All rights reserved.
   * Modifications copyright (c) Microsoft Corporation.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *     http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  export interface ConnectionTransport {
      send(s: string): void;
      close(): void;
      onmessage?: (message: string) => void;
      onclose?: () => void;
  }
  export class SlowMoTransport {
      private readonly _delay;
      private readonly _delegate;
      onmessage?: (message: string) => void;
      onclose?: () => void;
      static wrap(transport: ConnectionTransport, delay?: number): ConnectionTransport;
      constructor(transport: ConnectionTransport, delay: number);
      private _onmessage;
      private _onClose;
      send(s: string): void;
      close(): void;
  }
  export class DeferWriteTransport implements ConnectionTransport {
      private _delegate;
      private _readPromise;
      onmessage?: (message: string) => void;
      onclose?: () => void;
      constructor(transport: ConnectionTransport);
      send(s: string): Promise<void>;
      close(): void;
  }

}
declare module 'playwright-core/types' {
  /**
   * Copyright (c) Microsoft Corporation.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  import * as js from 'playwright-core/javascript';
  import * as dom from 'playwright-core/dom';
  type NoHandles<Arg> = Arg extends js.JSHandle ? never : (Arg extends object ? {
      [Key in keyof Arg]: NoHandles<Arg[Key]>;
  } : Arg);
  type Unboxed<Arg> = Arg extends dom.ElementHandle<infer T> ? T : Arg extends js.JSHandle<infer T> ? T : Arg extends NoHandles<Arg> ? Arg : Arg extends Array<infer T> ? Array<Unboxed<T>> : Arg extends object ? {
      [Key in keyof Arg]: Unboxed<Arg[Key]>;
  } : Arg;
  export type Func0<R> = string | (() => R | Promise<R>);
  export type Func1<Arg, R> = string | ((arg: Unboxed<Arg>) => R | Promise<R>);
  export type FuncOn<On, Arg2, R> = string | ((on: On, arg2: Unboxed<Arg2>) => R | Promise<R>);
  export type SmartHandle<T> = T extends Node ? dom.ElementHandle<T> : js.JSHandle<T>;
  export type Size = {
      width: number;
      height: number;
  };
  export type Point = {
      x: number;
      y: number;
  };
  export type Rect = Size & Point;
  export type Quad = [Point, Point, Point, Point];
  export type TimeoutOptions = {
      timeout?: number;
  };
  export type WaitForElementOptions = TimeoutOptions & {
      waitFor?: 'attached' | 'detached' | 'visible' | 'hidden';
  };
  export type Polling = 'raf' | 'mutation' | number;
  export type WaitForFunctionOptions = TimeoutOptions & {
      polling?: Polling;
  };
  export type LifecycleEvent = 'load' | 'domcontentloaded' | 'networkidle0' | 'networkidle2';
  export const kLifecycleEvents: Set<LifecycleEvent>;
  export type NavigateOptions = TimeoutOptions & {
      waitUntil?: LifecycleEvent;
  };
  export type NavigatingActionWaitOptions = TimeoutOptions & {
      waitUntil?: LifecycleEvent | 'nowait';
  };
  export type PointerActionWaitOptions = TimeoutOptions & {
      force?: boolean;
  };
  export type WaitForNavigationOptions = TimeoutOptions & {
      waitUntil?: LifecycleEvent;
      url?: URLMatch;
  };
  export type ElementScreenshotOptions = {
      type?: 'png' | 'jpeg';
      path?: string;
      quality?: number;
      omitBackground?: boolean;
  };
  export type ScreenshotOptions = ElementScreenshotOptions & {
      fullPage?: boolean;
      clip?: Rect;
  };
  export type URLMatch = string | RegExp | ((url: URL) => boolean);
  export type Credentials = {
      username: string;
      password: string;
  };
  export type Geolocation = {
      longitude: number;
      latitude: number;
      accuracy?: number;
  };
  export type SelectOption = {
      value?: string;
      label?: string;
      index?: number;
  };
  export type FilePayload = {
      name: string;
      type: string;
      data: string;
  };
  export type MediaType = 'screen' | 'print';
  export const mediaTypes: Set<MediaType>;
  export type ColorScheme = 'dark' | 'light' | 'no-preference';
  export const colorSchemes: Set<ColorScheme>;
  export type DeviceDescriptor = {
      userAgent: string;
      viewport: Size;
      deviceScaleFactor: number;
      isMobile: boolean;
      hasTouch: boolean;
  };
  export type Devices = {
      [name: string]: DeviceDescriptor;
  };
  export type PDFOptions = {
      scale?: number;
      displayHeaderFooter?: boolean;
      headerTemplate?: string;
      footerTemplate?: string;
      printBackground?: boolean;
      landscape?: boolean;
      pageRanges?: string;
      format?: string;
      width?: string | number;
      height?: string | number;
      preferCSSPageSize?: boolean;
      margin?: {
          top?: string | number;
          bottom?: string | number;
          left?: string | number;
          right?: string | number;
      };
      path?: string;
  };
  export type CoverageEntry = {
      url: string;
      text: string;
      ranges: {
          start: number;
          end: number;
      }[];
  };
  export type CSSCoverageOptions = {
      resetOnNavigation?: boolean;
  };
  export type JSCoverageOptions = {
      resetOnNavigation?: boolean;
      reportAnonymousScripts?: boolean;
  };
  export {};

}
declare module 'playwright-core/usKeyboardLayout' {
  /**
   * Copyright 2017 Google Inc. All rights reserved.
   * Modifications copyright (c) Microsoft Corporation.
   *
   * Licensed under the Apache License, Version 2.0 (the 'License');
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *     http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an 'AS IS' BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  type KeyDefinition = {
      keyCode?: number;
      keyCodeWithoutLocation?: number;
      shiftKeyCode?: number;
      key?: string;
      shiftKey?: string;
      code?: string;
      text?: string;
      shiftText?: string;
      location?: number;
      windowsVirtualKeyCode?: number;
  };
  export const keypadLocation = 3;
  export const keyDefinitions: {
      [s: string]: KeyDefinition;
  };
  export const macEditingCommands: {
      [key: string]: string | string[];
  };
  export {};

}
declare module 'playwright-core/web' {
  /**
   * Copyright (c) Microsoft Corporation.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  import { CRBrowser as ChromiumBrowser } from 'playwright-core/chromium/crBrowser';
  import { FFBrowser as FirefoxBrowser } from 'playwright-core/firefox/ffBrowser';
  import { WKBrowser as WebKitBrowser } from 'playwright-core/webkit/wkBrowser';
  const connect: {
      chromium: {
          connect: (url: string) => Promise<ChromiumBrowser>;
      };
      webkit: {
          connect: (url: string) => Promise<WebKitBrowser>;
      };
      firefox: {
          connect: (url: string) => Promise<FirefoxBrowser>;
      };
  };
  export = connect;

}
declare module 'playwright-core/webkit/protocol' {
  export module Protocol {
      /**
       * Domain for tracking/modifying Web Animations, as well as CSS (declarative) animations and transitions.
       */
      module Animation {
          /**
           * Unique Web Animation identifier.
           */
          type AnimationId = string;
          type AnimationState = "ready" | "delayed" | "active" | "canceled" | "done";
          type PlaybackDirection = "normal" | "reverse" | "alternate" | "alternate-reverse";
          type FillMode = "none" | "forwards" | "backwards" | "both" | "auto";
          interface Animation {
              animationId: AnimationId;
              /**
               * Equal to the corresponding `animation-name` CSS property. Should not be provided if `transitionProperty` is also provided.
               */
              cssAnimationName?: string;
              /**
               * Equal to the corresponding `transition-property` CSS property. Should not be provided if `animationName` is also provided.
               */
              cssTransitionProperty?: string;
              effect?: Effect;
              /**
               * Backtrace that was captured when this `WebAnimation` was created.
               */
              backtrace?: Console.CallFrame[];
          }
          interface Effect {
              startDelay?: number;
              endDelay?: number;
              /**
               * Number of iterations in the animation.
               */
              iterationCount?: number;
              /**
               * Index of which iteration to start at.
               */
              iterationStart?: number;
              /**
               * Total time of each iteration, measured in milliseconds.
               */
              iterationDuration?: number;
              /**
               * CSS timing function of the overall animation.
               */
              timingFunction?: string;
              playbackDirection?: PlaybackDirection;
              fillMode?: FillMode;
              keyframes?: Keyframe[];
          }
          interface Keyframe {
              /**
               * Decimal percentage [0,1] representing where this keyframe is in the entire duration of the animation.
               */
              offset: number;
              /**
               * CSS timing function for how the `style` is applied.
               */
              easing?: string;
              /**
               * CSS style declaration of the CSS properties that will be animated.
               */
              style?: string;
          }
          interface TrackingUpdate {
              trackingAnimationId: AnimationId;
              animationState: AnimationState;
              nodeId?: DOM.NodeId;
              /**
               * Equal to the corresponding `animation-name` CSS property. Should not be provided if `transitionProperty` is also provided.
               */
              animationName?: string;
              /**
               * Equal to the corresponding `transition-property` CSS property. Should not be provided if `animationName` is also provided.
               */
              transitionProperty?: string;
          }
          /**
           * Dispatched whenever a `WebAnimation` is created.
           */
          type animationCreatedPayload = {
              animation: Animation;
          };
          /**
           * Dispatched whenever the effect of any animation is changed in any way.
           */
          type effectChangedPayload = {
              animationId: AnimationId;
              /**
               * This is omitted when the effect is removed without a replacement.
               */
              effect?: Effect;
          };
          /**
           * Dispatched whenever the target of any effect of any animation is changed in any way.
           */
          type targetChangedPayload = {
              animationId: AnimationId;
          };
          /**
           * Dispatched whenever a `WebAnimation` is destroyed.
           */
          type animationDestroyedPayload = {
              animationId: AnimationId;
          };
          /**
           * Dispatched after `startTracking` command.
           */
          type trackingStartPayload = {
              timestamp: number;
          };
          /**
           * Fired for each phase of Web Animation.
           */
          type trackingUpdatePayload = {
              timestamp: number;
              event: TrackingUpdate;
          };
          /**
           * Dispatched after `stopTracking` command.
           */
          type trackingCompletePayload = {
              timestamp: number;
          };
          /**
           * Enables Canvas domain events.
           */
          type enableParameters = {};
          type enableReturnValue = {};
          /**
           * Disables Canvas domain events.
           */
          type disableParameters = {};
          type disableReturnValue = {};
          /**
           * Gets the `DOM.NodeId` for the target of the effect of the animation with the given `AnimationId`.
           */
          type requestEffectTargetParameters = {
              animationId: AnimationId;
          };
          type requestEffectTargetReturnValue = {
              nodeId: DOM.NodeId;
          };
          /**
           * Resolves JavaScript `WebAnimation` object for given `AnimationId`.
           */
          type resolveAnimationParameters = {
              animationId: AnimationId;
              /**
               * Symbolic group name that can be used to release multiple objects.
               */
              objectGroup?: string;
          };
          type resolveAnimationReturnValue = {
              object: Runtime.RemoteObject;
          };
          /**
           * Start tracking animations. This will produce a `trackingStart` event.
           */
          type startTrackingParameters = {};
          type startTrackingReturnValue = {};
          /**
           * Stop tracking animations. This will produce a `trackingComplete` event.
           */
          type stopTrackingParameters = {};
          type stopTrackingReturnValue = {};
      }
      module ApplicationCache {
          /**
           * Detailed application cache resource information.
           */
          interface ApplicationCacheResource {
              /**
               * Resource url.
               */
              url: string;
              /**
               * Resource size.
               */
              size: number;
              /**
               * Resource type.
               */
              type: string;
          }
          /**
           * Detailed application cache information.
           */
          interface ApplicationCache {
              /**
               * Manifest URL.
               */
              manifestURL: string;
              /**
               * Application cache size.
               */
              size: number;
              /**
               * Application cache creation time.
               */
              creationTime: number;
              /**
               * Application cache update time.
               */
              updateTime: number;
              /**
               * Application cache resources.
               */
              resources: ApplicationCacheResource[];
          }
          /**
           * Frame identifier - manifest URL pair.
           */
          interface FrameWithManifest {
              /**
               * Frame identifier.
               */
              frameId: Network.FrameId;
              /**
               * Manifest URL.
               */
              manifestURL: string;
              /**
               * Application cache status.
               */
              status: number;
          }
          type applicationCacheStatusUpdatedPayload = {
              /**
               * Identifier of the frame containing document whose application cache updated status.
               */
              frameId: Network.FrameId;
              /**
               * Manifest URL.
               */
              manifestURL: string;
              /**
               * Updated application cache status.
               */
              status: number;
          };
          type networkStateUpdatedPayload = {
              isNowOnline: boolean;
          };
          /**
           * Returns array of frame identifiers with manifest urls for each frame containing a document associated with some application cache.
           */
          type getFramesWithManifestsParameters = {};
          type getFramesWithManifestsReturnValue = {
              /**
               * Array of frame identifiers with manifest urls for each frame containing a document associated with some application cache.
               */
              frameIds: FrameWithManifest[];
          };
          /**
           * Enables application cache domain notifications.
           */
          type enableParameters = {};
          type enableReturnValue = {};
          /**
           * Disable application cache domain notifications.
           */
          type disableParameters = {};
          type disableReturnValue = {};
          /**
           * Returns manifest URL for document in the given frame.
           */
          type getManifestForFrameParameters = {
              /**
               * Identifier of the frame containing document whose manifest is retrieved.
               */
              frameId: Network.FrameId;
          };
          type getManifestForFrameReturnValue = {
              /**
               * Manifest URL for document in the given frame.
               */
              manifestURL: string;
          };
          /**
           * Returns relevant application cache data for the document in given frame.
           */
          type getApplicationCacheForFrameParameters = {
              /**
               * Identifier of the frame containing document whose application cache is retrieved.
               */
              frameId: Network.FrameId;
          };
          type getApplicationCacheForFrameReturnValue = {
              /**
               * Relevant application cache data for the document in given frame.
               */
              applicationCache: ApplicationCache;
          };
      }
      module Audit {
          /**
           * Creates the `WebInspectorAudit` object that is passed to run. Must call teardown before calling setup more than once.
           */
          type setupParameters = {
              /**
               * Specifies in which isolated context to run the test. Each content script lives in an isolated context and this parameter may be used to specify one of those contexts. If the parameter is omitted or 0 the evaluation will be performed in the context of the inspected page.
               */
              contextId?: Runtime.ExecutionContextId;
          };
          type setupReturnValue = {};
          /**
           * Parses and evaluates the given test string and sends back the result. Returned values are saved to the "audit" object group. Call setup before and teardown after if the `WebInspectorAudit` object should be passed into the test.
           */
          type runParameters = {
              /**
               * Test string to parse and evaluate.
               */
              test: string;
              /**
               * Specifies in which isolated context to run the test. Each content script lives in an isolated context and this parameter may be used to specify one of those contexts. If the parameter is omitted or 0 the evaluation will be performed in the context of the inspected page.
               */
              contextId?: Runtime.ExecutionContextId;
          };
          type runReturnValue = {
              /**
               * Evaluation result.
               */
              result: Runtime.RemoteObject;
              /**
               * True if the result was thrown during the evaluation.
               */
              wasThrown?: boolean;
          };
          /**
           * Destroys the `WebInspectorAudit` object that is passed to run. Must call setup before calling teardown.
           */
          type teardownParameters = {};
          type teardownReturnValue = {};
      }
      /**
       * The Browser domain contains commands and events related to getting information about the browser
       */
      module Browser {
          /**
           * Unique extension identifier.
           */
          type ExtensionId = string;
          /**
           * Information about an extension.
           */
          interface Extension {
              /**
               * Extension identifier.
               */
              extensionId: ExtensionId;
              /**
               * The display name for the extension.
               */
              name: string;
          }
          type extensionsEnabledPayload = {
              /**
               * Information about the enabled extensions.
               */
              extensions: Extension[];
          };
          type extensionsDisabledPayload = {
              /**
               * Disabled extension identifiers.
               */
              extensionIds: ExtensionId[];
          };
          /**
           * Enables Browser domain events.
           */
          type enableParameters = {};
          type enableReturnValue = {};
          /**
           * Disables Browser domain events.
           */
          type disableParameters = {};
          type disableReturnValue = {};
      }
      /**
       * CPUProfiler domain exposes cpu usage tracking.
       */
      module CPUProfiler {
          /**
           * CPU usage for an individual thread.
           */
          interface ThreadInfo {
              /**
               * Some thread identification information.
               */
              name: string;
              /**
               * CPU usage for this thread. This should not exceed 100% for an individual thread.
               */
              usage: number;
              /**
               * Type of thread. There should be a single main thread.
               */
              type?: "main" | "webkit";
              /**
               * A thread may be associated with a target, such as a Worker, in the process.
               */
              targetId?: string;
          }
          interface Event {
              timestamp: number;
              /**
               * Percent of total cpu usage. If there are multiple cores the usage may be greater than 100%.
               */
              usage: number;
              /**
               * Per-thread CPU usage information. Does not include the main thread.
               */
              threads?: ThreadInfo[];
          }
          /**
           * Tracking started.
           */
          type trackingStartPayload = {
              timestamp: number;
          };
          /**
           * Periodic tracking updates with event data.
           */
          type trackingUpdatePayload = {
              event: Event;
          };
          /**
           * Tracking stopped.
           */
          type trackingCompletePayload = {
              timestamp: number;
          };
          /**
           * Start tracking cpu usage.
           */
          type startTrackingParameters = {};
          type startTrackingReturnValue = {};
          /**
           * Stop tracking cpu usage. This will produce a `trackingComplete` event.
           */
          type stopTrackingParameters = {};
          type stopTrackingReturnValue = {};
      }
      /**
       * This domain exposes CSS read/write operations. All CSS objects, like stylesheets, rules, and styles, have an associated <code>id</code> used in subsequent operations on the related object. Each object type has a specific <code>id</code> structure, and those are not interchangeable between objects of different kinds. CSS objects can be loaded using the <code>get*ForNode()</code> calls (which accept a DOM node id). Alternatively, a client can discover all the existing stylesheets with the <code>getAllStyleSheets()</code> method and subsequently load the required stylesheet contents using the <code>getStyleSheet[Text]()</code> methods.
       */
      module CSS {
          type StyleSheetId = string;
          /**
           * This object identifies a CSS style in a unique way.
           */
          interface CSSStyleId {
              /**
               * Enclosing stylesheet identifier.
               */
              styleSheetId: StyleSheetId;
              /**
               * The style ordinal within the stylesheet.
               */
              ordinal: number;
          }
          /**
           * Stylesheet type: "user" for user stylesheets, "user-agent" for user-agent stylesheets, "inspector" for stylesheets created by the inspector (i.e. those holding the "via inspector" rules), "regular" for regular stylesheets.
           */
          type StyleSheetOrigin = "user" | "user-agent" | "inspector" | "regular";
          /**
           * This object identifies a CSS rule in a unique way.
           */
          interface CSSRuleId {
              /**
               * Enclosing stylesheet identifier.
               */
              styleSheetId: StyleSheetId;
              /**
               * The rule ordinal within the stylesheet.
               */
              ordinal: number;
          }
          /**
           * Pseudo-style identifier (see <code>enum PseudoId</code> in <code>RenderStyleConstants.h</code>).
           */
          type PseudoId = "first-line" | "first-letter" | "highlight" | "marker" | "before" | "after" | "selection" | "scrollbar" | "scrollbar-thumb" | "scrollbar-button" | "scrollbar-track" | "scrollbar-track-piece" | "scrollbar-corner" | "resizer";
          /**
           * CSS rule collection for a single pseudo style.
           */
          interface PseudoIdMatches {
              pseudoId: PseudoId;
              /**
               * Matches of CSS rules applicable to the pseudo style.
               */
              matches: RuleMatch[];
          }
          /**
           * CSS rule collection for a single pseudo style.
           */
          interface InheritedStyleEntry {
              /**
               * The ancestor node's inline style, if any, in the style inheritance chain.
               */
              inlineStyle?: CSSStyle;
              /**
               * Matches of CSS rules matching the ancestor node in the style inheritance chain.
               */
              matchedCSSRules: RuleMatch[];
          }
          /**
           * Match data for a CSS rule.
           */
          interface RuleMatch {
              /**
               * CSS rule in the match.
               */
              rule: CSSRule;
              /**
               * Matching selector indices in the rule's selectorList selectors (0-based).
               */
              matchingSelectors: number[];
          }
          /**
           * CSS selector.
           */
          interface CSSSelector {
              /**
               * Canonicalized selector text.
               */
              text: string;
              /**
               * Specificity (a, b, c) tuple. Included if the selector is sent in response to CSS.getMatchedStylesForNode which provides a context element.
               */
              specificity?: number[];
              /**
               * Whether or not the specificity can be dynamic. Included if the selector is sent in response to CSS.getMatchedStylesForNode which provides a context element.
               */
              dynamic?: boolean;
          }
          /**
           * Selector list data.
           */
          interface SelectorList {
              /**
               * Selectors in the list.
               */
              selectors: CSSSelector[];
              /**
               * Rule selector text.
               */
              text: string;
              /**
               * Rule selector range in the underlying resource (if available).
               */
              range?: SourceRange;
          }
          /**
           * CSS style information for a DOM style attribute.
           */
          interface CSSStyleAttribute {
              /**
               * DOM attribute name (e.g. "width").
               */
              name: string;
              /**
               * CSS style generated by the respective DOM attribute.
               */
              style: CSSStyle;
          }
          /**
           * CSS stylesheet meta-information.
           */
          interface CSSStyleSheetHeader {
              /**
               * The stylesheet identifier.
               */
              styleSheetId: StyleSheetId;
              /**
               * Owner frame identifier.
               */
              frameId: Network.FrameId;
              /**
               * Stylesheet resource URL.
               */
              sourceURL: string;
              /**
               * Stylesheet origin.
               */
              origin: StyleSheetOrigin;
              /**
               * Stylesheet title.
               */
              title: string;
              /**
               * Denotes whether the stylesheet is disabled.
               */
              disabled: boolean;
              /**
               * Whether this stylesheet is a <style> tag created by the parser. This is not set for document.written <style> tags.
               */
              isInline: boolean;
              /**
               * Line offset of the stylesheet within the resource (zero based).
               */
              startLine: number;
              /**
               * Column offset of the stylesheet within the resource (zero based).
               */
              startColumn: number;
          }
          /**
           * CSS stylesheet contents.
           */
          interface CSSStyleSheetBody {
              /**
               * The stylesheet identifier.
               */
              styleSheetId: StyleSheetId;
              /**
               * Stylesheet resource URL.
               */
              rules: CSSRule[];
              /**
               * Stylesheet resource contents (if available).
               */
              text?: string;
          }
          /**
           * CSS rule representation.
           */
          interface CSSRule {
              /**
               * The CSS rule identifier (absent for user agent stylesheet and user-specified stylesheet rules).
               */
              ruleId?: CSSRuleId;
              /**
               * Rule selector data.
               */
              selectorList: SelectorList;
              /**
               * Parent stylesheet resource URL (for regular rules).
               */
              sourceURL?: string;
              /**
               * Line ordinal of the rule selector start character in the resource.
               */
              sourceLine: number;
              /**
               * Parent stylesheet's origin.
               */
              origin: StyleSheetOrigin;
              /**
               * Associated style declaration.
               */
              style: CSSStyle;
              /**
               * Grouping list array (for rules involving @media/@supports). The array enumerates CSS groupings starting with the innermost one, going outwards.
               */
              groupings?: Grouping[];
          }
          /**
           * Text range within a resource.
           */
          interface SourceRange {
              /**
               * Start line of range.
               */
              startLine: number;
              /**
               * Start column of range (inclusive).
               */
              startColumn: number;
              /**
               * End line of range
               */
              endLine: number;
              /**
               * End column of range (exclusive).
               */
              endColumn: number;
          }
          interface ShorthandEntry {
              /**
               * Shorthand name.
               */
              name: string;
              /**
               * Shorthand value.
               */
              value: string;
          }
          interface CSSPropertyInfo {
              /**
               * Property name.
               */
              name: string;
              /**
               * Other names for this property.
               */
              aliases?: string[];
              /**
               * Longhand property names.
               */
              longhands?: string[];
              /**
               * Supported values for this property.
               */
              values?: string[];
              /**
               * Whether the property is able to be inherited.
               */
              inherited?: boolean;
          }
          interface CSSComputedStyleProperty {
              /**
               * Computed style property name.
               */
              name: string;
              /**
               * Computed style property value.
               */
              value: string;
          }
          /**
           * CSS style representation.
           */
          interface CSSStyle {
              /**
               * The CSS style identifier (absent for attribute styles).
               */
              styleId?: CSSStyleId;
              /**
               * CSS properties in the style.
               */
              cssProperties: CSSProperty[];
              /**
               * Computed values for all shorthands found in the style.
               */
              shorthandEntries: ShorthandEntry[];
              /**
               * Style declaration text (if available).
               */
              cssText?: string;
              /**
               * Style declaration range in the enclosing stylesheet (if available).
               */
              range?: SourceRange;
              /**
               * The effective "width" property value from this style.
               */
              width?: string;
              /**
               * The effective "height" property value from this style.
               */
              height?: string;
          }
          /**
           * The property status: "active" if the property is effective in the style, "inactive" if the property is overridden by a same-named property in this style later on, "disabled" if the property is disabled by the user, "style" (implied if absent) if the property is reported by the browser rather than by the CSS source parser.
           */
          type CSSPropertyStatus = "active" | "inactive" | "disabled" | "style";
          /**
           * CSS style effective visual dimensions and source offsets.
           */
          interface CSSProperty {
              /**
               * The property name.
               */
              name: string;
              /**
               * The property value.
               */
              value: string;
              /**
               * The property priority (implies "" if absent).
               */
              priority?: string;
              /**
               * Whether the property is implicit (implies <code>false</code> if absent).
               */
              implicit?: boolean;
              /**
               * The full property text as specified in the style.
               */
              text?: string;
              /**
               * Whether the property is understood by the browser (implies <code>true</code> if absent).
               */
              parsedOk?: boolean;
              /**
               * Whether the property is active or disabled.
               */
              status?: CSSPropertyStatus;
              /**
               * The entire property range in the enclosing style declaration (if available).
               */
              range?: SourceRange;
          }
          /**
           * CSS @media (as well as other users of media queries, like @import, <style>, <link>, etc.) and @supports descriptor.
           */
          interface Grouping {
              /**
               * Media query text.
               */
              text: string;
              /**
               * Source of the media query: "media-rule" if specified by a @media rule, "media-import-rule" if specified by an @import rule, "media-link-node" if specified by a "media" attribute in a linked style sheet's LINK tag, "media-style-node" if specified by a "media" attribute in an inline style sheet's STYLE tag, "supports-rule" if specified by an @supports rule, .
               */
              type: "media-rule" | "media-import-rule" | "media-link-node" | "media-style-node" | "supports-rule";
              /**
               * URL of the document containing the CSS grouping.
               */
              sourceURL?: string;
          }
          /**
           * Fires whenever a MediaQuery result changes (for example, after a browser window has been resized.) The current implementation considers only viewport-dependent media features.
           */
          type mediaQueryResultChangedPayload = void;
          /**
           * Fired whenever a stylesheet is changed as a result of the client operation.
           */
          type styleSheetChangedPayload = {
              styleSheetId: StyleSheetId;
          };
          /**
           * Fired whenever an active document stylesheet is added.
           */
          type styleSheetAddedPayload = {
              /**
               * Added stylesheet metainfo.
               */
              header: CSSStyleSheetHeader;
          };
          /**
           * Fired whenever an active document stylesheet is removed.
           */
          type styleSheetRemovedPayload = {
              /**
               * Identifier of the removed stylesheet.
               */
              styleSheetId: StyleSheetId;
          };
          /**
           * Enables the CSS agent for the given page. Clients should not assume that the CSS agent has been enabled until the result of this command is received.
           */
          type enableParameters = {};
          type enableReturnValue = {};
          /**
           * Disables the CSS agent for the given page.
           */
          type disableParameters = {};
          type disableReturnValue = {};
          /**
           * Returns requested styles for a DOM node identified by <code>nodeId</code>.
           */
          type getMatchedStylesForNodeParameters = {
              nodeId: DOM.NodeId;
              /**
               * Whether to include pseudo styles (default: true).
               */
              includePseudo?: boolean;
              /**
               * Whether to include inherited styles (default: true).
               */
              includeInherited?: boolean;
          };
          type getMatchedStylesForNodeReturnValue = {
              /**
               * CSS rules matching this node, from all applicable stylesheets.
               */
              matchedCSSRules?: RuleMatch[];
              /**
               * Pseudo style matches for this node.
               */
              pseudoElements?: PseudoIdMatches[];
              /**
               * A chain of inherited styles (from the immediate node parent up to the DOM tree root).
               */
              inherited?: InheritedStyleEntry[];
          };
          /**
           * Returns the styles defined inline (explicitly in the "style" attribute and implicitly, using DOM attributes) for a DOM node identified by <code>nodeId</code>.
           */
          type getInlineStylesForNodeParameters = {
              nodeId: DOM.NodeId;
          };
          type getInlineStylesForNodeReturnValue = {
              /**
               * Inline style for the specified DOM node.
               */
              inlineStyle?: CSSStyle;
              /**
               * Attribute-defined element style (e.g. resulting from "width=20 height=100%").
               */
              attributesStyle?: CSSStyle;
          };
          /**
           * Returns the computed style for a DOM node identified by <code>nodeId</code>.
           */
          type getComputedStyleForNodeParameters = {
              nodeId: DOM.NodeId;
          };
          type getComputedStyleForNodeReturnValue = {
              /**
               * Computed style for the specified DOM node.
               */
              computedStyle: CSSComputedStyleProperty[];
          };
          /**
           * Returns metainfo entries for all known stylesheets.
           */
          type getAllStyleSheetsParameters = {};
          type getAllStyleSheetsReturnValue = {
              /**
               * Descriptor entries for all available stylesheets.
               */
              headers: CSSStyleSheetHeader[];
          };
          /**
           * Returns stylesheet data for the specified <code>styleSheetId</code>.
           */
          type getStyleSheetParameters = {
              styleSheetId: StyleSheetId;
          };
          type getStyleSheetReturnValue = {
              /**
               * Stylesheet contents for the specified <code>styleSheetId</code>.
               */
              styleSheet: CSSStyleSheetBody;
          };
          /**
           * Returns the current textual content and the URL for a stylesheet.
           */
          type getStyleSheetTextParameters = {
              styleSheetId: StyleSheetId;
          };
          type getStyleSheetTextReturnValue = {
              /**
               * The stylesheet text.
               */
              text: string;
          };
          /**
           * Sets the new stylesheet text, thereby invalidating all existing <code>CSSStyleId</code>'s and <code>CSSRuleId</code>'s contained by this stylesheet.
           */
          type setStyleSheetTextParameters = {
              styleSheetId: StyleSheetId;
              text: string;
          };
          type setStyleSheetTextReturnValue = {};
          /**
           * Sets the new <code>text</code> for the respective style.
           */
          type setStyleTextParameters = {
              styleId: CSSStyleId;
              text: string;
          };
          type setStyleTextReturnValue = {
              /**
               * The resulting style after the text modification.
               */
              style: CSSStyle;
          };
          /**
           * Modifies the rule selector.
           */
          type setRuleSelectorParameters = {
              ruleId: CSSRuleId;
              selector: string;
          };
          type setRuleSelectorReturnValue = {
              /**
               * The resulting rule after the selector modification.
               */
              rule: CSSRule;
          };
          /**
           * Creates a new special "inspector" stylesheet in the frame with given <code>frameId</code>.
           */
          type createStyleSheetParameters = {
              /**
               * Identifier of the frame where the new "inspector" stylesheet should be created.
               */
              frameId: Network.FrameId;
          };
          type createStyleSheetReturnValue = {
              /**
               * Identifier of the created "inspector" stylesheet.
               */
              styleSheetId: StyleSheetId;
          };
          /**
           * Creates a new empty rule with the given <code>selector</code> in a stylesheet with given <code>styleSheetId</code>.
           */
          type addRuleParameters = {
              styleSheetId: StyleSheetId;
              selector: string;
          };
          type addRuleReturnValue = {
              /**
               * The newly created rule.
               */
              rule: CSSRule;
          };
          /**
           * Returns all supported CSS property names.
           */
          type getSupportedCSSPropertiesParameters = {};
          type getSupportedCSSPropertiesReturnValue = {
              /**
               * Supported property metainfo.
               */
              cssProperties: CSSPropertyInfo[];
          };
          /**
           * Returns all supported system font family names.
           */
          type getSupportedSystemFontFamilyNamesParameters = {};
          type getSupportedSystemFontFamilyNamesReturnValue = {
              /**
               * Supported system font families.
               */
              fontFamilyNames: string[];
          };
          /**
           * Ensures that the given node will have specified pseudo-classes whenever its style is computed by the browser.
           */
          type forcePseudoStateParameters = {
              /**
               * The element id for which to force the pseudo state.
               */
              nodeId: DOM.NodeId;
              /**
               * Element pseudo classes to force when computing the element's style.
               */
              forcedPseudoClasses: "active" | "focus" | "hover" | "visited"[];
          };
          type forcePseudoStateReturnValue = {};
      }
      /**
       * Canvas domain allows tracking of canvases that have an associated graphics context. Tracks canvases in the DOM and CSS canvases created with -webkit-canvas.
       */
      module Canvas {
          /**
           * Unique canvas identifier.
           */
          type CanvasId = string;
          /**
           * Unique shader program identifier.
           */
          type ProgramId = string;
          /**
           * The type of rendering context backing the canvas element.
           */
          type ContextType = "canvas-2d" | "bitmaprenderer" | "webgl" | "webgl2" | "webgpu";
          type ProgramType = "compute" | "render";
          type ShaderType = "compute" | "fragment" | "vertex";
          /**
           * Drawing surface attributes.
           */
          interface ContextAttributes {
              /**
               * WebGL, WebGL2, ImageBitmapRenderingContext
               */
              alpha?: boolean;
              /**
               * WebGL, WebGL2
               */
              depth?: boolean;
              /**
               * WebGL, WebGL2
               */
              stencil?: boolean;
              /**
               * WebGL, WebGL2
               */
              antialias?: boolean;
              /**
               * WebGL, WebGL2
               */
              premultipliedAlpha?: boolean;
              /**
               * WebGL, WebGL2
               */
              preserveDrawingBuffer?: boolean;
              /**
               * WebGL, WebGL2
               */
              failIfMajorPerformanceCaveat?: boolean;
              /**
               * WebGL, WebGL2, WebGPU
               */
              powerPreference?: string;
          }
          /**
           * Information about a canvas for which a rendering context has been created.
           */
          interface Canvas {
              /**
               * Canvas identifier.
               */
              canvasId: CanvasId;
              /**
               * The type of rendering context backing the canvas.
               */
              contextType: ContextType;
              /**
               * The corresponding DOM node id.
               */
              nodeId?: DOM.NodeId;
              /**
               * The CSS canvas identifier, for canvases created with <code>document.getCSSCanvasContext</code>.
               */
              cssCanvasName?: string;
              /**
               * Context attributes for rendering contexts.
               */
              contextAttributes?: ContextAttributes;
              /**
               * Memory usage of the canvas in bytes.
               */
              memoryCost?: number;
              /**
               * Backtrace that was captured when this canvas context was created.
               */
              backtrace?: Console.CallFrame[];
          }
          /**
           * Information about a WebGL/WebGL2 shader program or WebGPU shader pipeline.
           */
          interface ShaderProgram {
              programId: ProgramId;
              programType: ProgramType;
              canvasId: CanvasId;
              /**
               * Indicates whether the vertex and fragment shader modules are the same object for a render shader pipleine for a WebGPU device.
               */
              sharesVertexFragmentShader?: boolean;
          }
          type canvasAddedPayload = {
              /**
               * Canvas object.
               */
              canvas: Canvas;
          };
          type canvasRemovedPayload = {
              /**
               * Removed canvas identifier.
               */
              canvasId: CanvasId;
          };
          type canvasMemoryChangedPayload = {
              /**
               * Identifier of canvas that changed.
               */
              canvasId: CanvasId;
              /**
               * New memory cost value for the canvas in bytes.
               */
              memoryCost: number;
          };
          type extensionEnabledPayload = {
              canvasId: CanvasId;
              /**
               * Name of the extension that was enabled.
               */
              extension: string;
          };
          type clientNodesChangedPayload = {
              /**
               * Identifier of canvas that changed.
               */
              canvasId: CanvasId;
          };
          type recordingStartedPayload = {
              canvasId: CanvasId;
              initiator: Recording.Initiator;
          };
          type recordingProgressPayload = {
              canvasId: CanvasId;
              frames: Recording.Frame[];
              /**
               * Total memory size in bytes of all data recorded since the recording began.
               */
              bufferUsed: number;
          };
          type recordingFinishedPayload = {
              canvasId: CanvasId;
              recording?: Recording.Recording;
          };
          type programCreatedPayload = {
              shaderProgram: ShaderProgram;
          };
          type programDeletedPayload = {
              programId: ProgramId;
          };
          /**
           * Enables Canvas domain events.
           */
          type enableParameters = {};
          type enableReturnValue = {};
          /**
           * Disables Canvas domain events.
           */
          type disableParameters = {};
          type disableReturnValue = {};
          /**
           * Gets the NodeId for the canvas node with the given CanvasId.
           */
          type requestNodeParameters = {
              /**
               * Canvas identifier.
               */
              canvasId: CanvasId;
          };
          type requestNodeReturnValue = {
              /**
               * Node identifier for given canvas.
               */
              nodeId: DOM.NodeId;
          };
          /**
           * Gets the data for the canvas node with the given CanvasId.
           */
          type requestContentParameters = {
              /**
               * Canvas identifier.
               */
              canvasId: CanvasId;
          };
          type requestContentReturnValue = {
              /**
               * Base64-encoded data of the canvas' contents.
               */
              content: string;
          };
          /**
           * Gets all <code>-webkit-canvas</code> nodes or active <code>HTMLCanvasElement</code> for a <code>WebGPUDevice</code>.
           */
          type requestClientNodesParameters = {
              canvasId: CanvasId;
          };
          type requestClientNodesReturnValue = {
              clientNodeIds: DOM.NodeId[];
          };
          /**
           * Resolves JavaScript canvas/device context object for given canvasId.
           */
          type resolveContextParameters = {
              /**
               * Canvas identifier.
               */
              canvasId: CanvasId;
              /**
               * Symbolic group name that can be used to release multiple objects.
               */
              objectGroup?: string;
          };
          type resolveContextReturnValue = {
              /**
               * JavaScript object wrapper for given canvas context.
               */
              object: Runtime.RemoteObject;
          };
          /**
           * Tells the backend to record `count` frames whenever a new context is created.
           */
          type setRecordingAutoCaptureFrameCountParameters = {
              /**
               * Number of frames to record (0 means don't record anything).
               */
              count: number;
          };
          type setRecordingAutoCaptureFrameCountReturnValue = {};
          /**
           * Record the next frame, or up to the given number of bytes of data, for the given canvas.
           */
          type startRecordingParameters = {
              canvasId: CanvasId;
              /**
               * Number of frames to record (unlimited when not specified).
               */
              frameCount?: number;
              /**
               * Memory limit of recorded data (100MB when not specified).
               */
              memoryLimit?: number;
          };
          type startRecordingReturnValue = {};
          /**
           * Stop recording the given canvas.
           */
          type stopRecordingParameters = {
              canvasId: CanvasId;
          };
          type stopRecordingReturnValue = {};
          /**
           * Requests the source of the shader of the given type from the program with the given id.
           */
          type requestShaderSourceParameters = {
              programId: ProgramId;
              shaderType: ShaderType;
          };
          type requestShaderSourceReturnValue = {
              source: string;
          };
          /**
           * Compiles and links the shader with identifier and type with the given source code.
           */
          type updateShaderParameters = {
              programId: ProgramId;
              shaderType: ShaderType;
              source: string;
          };
          type updateShaderReturnValue = {};
          /**
           * Enable/disable the visibility of the given shader program.
           */
          type setShaderProgramDisabledParameters = {
              programId: ProgramId;
              disabled: boolean;
          };
          type setShaderProgramDisabledReturnValue = {};
          /**
           * Enable/disable highlighting of the given shader program.
           */
          type setShaderProgramHighlightedParameters = {
              programId: ProgramId;
              highlighted: boolean;
          };
          type setShaderProgramHighlightedReturnValue = {};
      }
      /**
       * Console domain defines methods and events for interaction with the JavaScript console. Console collects messages created by means of the <a href='http://getfirebug.com/wiki/index.php/Console_API'>JavaScript Console API</a>. One needs to enable this domain using <code>enable</code> command in order to start receiving the console messages. Browser collects messages issued while console domain is not enabled as well and reports them using <code>messageAdded</code> notification upon enabling.
       */
      module Console {
          /**
           * Channels for different types of log messages.
           */
          type ChannelSource = "xml" | "javascript" | "network" | "console-api" | "storage" | "appcache" | "rendering" | "css" | "security" | "content-blocker" | "media" | "mediasource" | "webrtc" | "other";
          /**
           * Level of logging.
           */
          type ChannelLevel = "off" | "basic" | "verbose";
          /**
           * Logging channel.
           */
          interface Channel {
              source: ChannelSource;
              level: ChannelLevel;
          }
          /**
           * Console message.
           */
          interface ConsoleMessage {
              source: ChannelSource;
              /**
               * Message severity.
               */
              level: "log" | "info" | "warning" | "error" | "debug";
              /**
               * Message text.
               */
              text: string;
              /**
               * Console message type.
               */
              type?: "log" | "dir" | "dirxml" | "table" | "trace" | "clear" | "startGroup" | "startGroupCollapsed" | "endGroup" | "assert" | "timing" | "profile" | "profileEnd" | "image";
              /**
               * URL of the message origin.
               */
              url?: string;
              /**
               * Line number in the resource that generated this message.
               */
              line?: number;
              /**
               * Column number on the line in the resource that generated this message.
               */
              column?: number;
              /**
               * Repeat count for repeated messages.
               */
              repeatCount?: number;
              /**
               * Message parameters in case of the formatted message.
               */
              parameters?: Runtime.RemoteObject[];
              /**
               * JavaScript stack trace for assertions and error messages.
               */
              stackTrace?: CallFrame[];
              /**
               * Identifier of the network request associated with this message.
               */
              networkRequestId?: Network.RequestId;
          }
          /**
           * Stack entry for console errors and assertions.
           */
          interface CallFrame {
              /**
               * JavaScript function name.
               */
              functionName: string;
              /**
               * JavaScript script name or url.
               */
              url: string;
              /**
               * Script identifier.
               */
              scriptId: Debugger.ScriptId;
              /**
               * JavaScript script line number.
               */
              lineNumber: number;
              /**
               * JavaScript script column number.
               */
              columnNumber: number;
          }
          /**
           * Call frames for async function calls, console assertions, and error messages.
           */
          interface StackTrace {
              callFrames: CallFrame[];
              /**
               * Whether the first item in <code>callFrames</code> is the native function that scheduled the asynchronous operation (e.g. setTimeout).
               */
              topCallFrameIsBoundary?: boolean;
              /**
               * Whether one or more frames have been truncated from the bottom of the stack.
               */
              truncated?: boolean;
              /**
               * Parent StackTrace.
               */
              parentStackTrace?: StackTrace;
          }
          /**
           * Issued when new console message is added.
           */
          type messageAddedPayload = {
              /**
               * Console message that has been added.
               */
              message: ConsoleMessage;
          };
          /**
           * Issued when subsequent message(s) are equal to the previous one(s).
           */
          type messageRepeatCountUpdatedPayload = {
              /**
               * New repeat count value.
               */
              count: number;
          };
          /**
           * Issued when console is cleared. This happens either upon <code>clearMessages</code> command or after page navigation.
           */
          type messagesClearedPayload = void;
          /**
           * Issued from console.takeHeapSnapshot.
           */
          type heapSnapshotPayload = {
              timestamp: number;
              /**
               * Snapshot at the end of tracking.
               */
              snapshotData: Heap.HeapSnapshotData;
              /**
               * Optional title provided to console.takeHeapSnapshot.
               */
              title?: string;
          };
          /**
           * Enables console domain, sends the messages collected so far to the client by means of the <code>messageAdded</code> notification.
           */
          type enableParameters = {};
          type enableReturnValue = {};
          /**
           * Disables console domain, prevents further console messages from being reported to the client.
           */
          type disableParameters = {};
          type disableReturnValue = {};
          /**
           * Clears console messages collected in the browser.
           */
          type clearMessagesParameters = {};
          type clearMessagesReturnValue = {};
          /**
           * List of the different message sources that are non-default logging channels.
           */
          type getLoggingChannelsParameters = {};
          type getLoggingChannelsReturnValue = {
              /**
               * Logging channels.
               */
              channels: Channel[];
          };
          /**
           * Modify the level of a channel.
           */
          type setLoggingChannelLevelParameters = {
              /**
               * Logging channel to modify.
               */
              source: ChannelSource;
              /**
               * New level.
               */
              level: ChannelLevel;
          };
          type setLoggingChannelLevelReturnValue = {};
      }
      /**
       * This domain exposes DOM read/write operations. Each DOM Node is represented with its mirror object that has an <code>id</code>. This <code>id</code> can be used to get additional information on the Node, resolve it into the JavaScript object wrapper, etc. It is important that client receives DOM events only for the nodes that are known to the client. Backend keeps track of the nodes that were sent to the client and never sends the same node twice. It is client's responsibility to collect information about the nodes that were sent to the client.<p>Note that <code>iframe</code> owner elements will return corresponding document elements as their child nodes.</p>
       */
      module DOM {
          /**
           * Unique DOM node identifier.
           */
          type NodeId = number;
          /**
           * Unique event listener identifier.
           */
          type EventListenerId = number;
          /**
           * Pseudo element type.
           */
          type PseudoType = "before" | "after";
          /**
           * Shadow root type.
           */
          type ShadowRootType = "user-agent" | "open" | "closed";
          /**
           * Custom element state.
           */
          type CustomElementState = "builtin" | "custom" | "waiting" | "failed";
          /**
           * Token values of @aria-relevant attribute.
           */
          type LiveRegionRelevant = "additions" | "removals" | "text";
          /**
           * DOM interaction is implemented in terms of mirror objects that represent the actual DOM nodes. DOMNode is a base node mirror type.
           */
          interface Node {
              /**
               * Node identifier that is passed into the rest of the DOM messages as the <code>nodeId</code>. Backend will only push node with given <code>id</code> once. It is aware of all requested nodes and will only fire DOM events for nodes known to the client.
               */
              nodeId: NodeId;
              /**
               * <code>Node</code>'s nodeType.
               */
              nodeType: number;
              /**
               * <code>Node</code>'s nodeName.
               */
              nodeName: string;
              /**
               * <code>Node</code>'s localName.
               */
              localName: string;
              /**
               * <code>Node</code>'s nodeValue.
               */
              nodeValue: string;
              /**
               * Identifier of the containing frame.
               */
              frameId?: Network.FrameId;
              /**
               * Child count for <code>Container</code> nodes.
               */
              childNodeCount?: number;
              /**
               * Child nodes of this node when requested with children.
               */
              children?: Node[];
              /**
               * Attributes of the <code>Element</code> node in the form of flat array <code>[name1, value1, name2, value2]</code>.
               */
              attributes?: string[];
              /**
               * Document URL that <code>Document</code> or <code>FrameOwner</code> node points to.
               */
              documentURL?: string;
              /**
               * Base URL that <code>Document</code> or <code>FrameOwner</code> node uses for URL completion.
               */
              baseURL?: string;
              /**
               * <code>DocumentType</code>'s publicId.
               */
              publicId?: string;
              /**
               * <code>DocumentType</code>'s systemId.
               */
              systemId?: string;
              /**
               * <code>Document</code>'s XML version in case of XML documents.
               */
              xmlVersion?: string;
              /**
               * <code>Attr</code>'s name.
               */
              name?: string;
              /**
               * <code>Attr</code>'s value.
               */
              value?: string;
              /**
               * Pseudo element type for this node.
               */
              pseudoType?: PseudoType;
              /**
               * Shadow root type.
               */
              shadowRootType?: ShadowRootType;
              /**
               * Custom element state.
               */
              customElementState?: CustomElementState;
              /**
               * Content document for frame owner elements.
               */
              contentDocument?: Node;
              /**
               * Shadow root list for given element host.
               */
              shadowRoots?: Node[];
              /**
               * Content document fragment for template elements
               */
              templateContent?: Node;
              /**
               * Pseudo elements associated with this node.
               */
              pseudoElements?: Node[];
              /**
               * Computed SHA-256 Content Security Policy hash source for given element.
               */
              contentSecurityPolicyHash?: string;
          }
          /**
           * Relationship between data that is associated with a node and the node itself.
           */
          interface DataBinding {
              /**
               * The binding key that is specified.
               */
              binding: string;
              /**
               * A more descriptive name for the type of binding that represents this paritcular data relationship
               */
              type?: string;
              /**
               * The value that is resolved to with this data binding relationship.
               */
              value: string;
          }
          interface Rect {
              /**
               * X coordinate
               */
              x: number;
              /**
               * Y coordinate
               */
              y: number;
              /**
               * Rectangle width
               */
              width: number;
              /**
               * Rectangle height
               */
              height: number;
          }
          /**
           * A structure holding event listener properties.
           */
          interface EventListener {
              eventListenerId: EventListenerId;
              /**
               * <code>EventListener</code>'s type.
               */
              type: string;
              /**
               * <code>EventListener</code>'s useCapture.
               */
              useCapture: boolean;
              /**
               * <code>EventListener</code>'s isAttribute.
               */
              isAttribute: boolean;
              /**
               * The target <code>DOMNode</code> id if the event listener is for a node.
               */
              nodeId?: NodeId;
              /**
               * True if the event listener was added to the window.
               */
              onWindow?: boolean;
              /**
               * Handler code location.
               */
              location?: Debugger.Location;
              /**
               * Event handler function name.
               */
              handlerName?: string;
              /**
               * <code>EventListener</code>'s passive.
               */
              passive?: boolean;
              /**
               * <code>EventListener</code>'s once.
               */
              once?: boolean;
              disabled?: boolean;
              hasBreakpoint?: boolean;
          }
          /**
           * A structure holding accessibility properties.
           */
          interface AccessibilityProperties {
              /**
               * <code>DOMNode</code> id of the accessibility object referenced by aria-activedescendant.
               */
              activeDescendantNodeId?: NodeId;
              /**
               * Value of @aria-busy on current or ancestor node.
               */
              busy?: boolean;
              /**
               * Checked state of certain form controls.
               */
              checked?: "true" | "false" | "mixed";
              /**
               * Array of <code>DOMNode</code> ids of the accessibility tree children if available.
               */
              childNodeIds?: NodeId[];
              /**
               * Array of <code>DOMNode</code> ids of any nodes referenced via @aria-controls.
               */
              controlledNodeIds?: NodeId[];
              /**
               * Current item within a container or set of related elements.
               */
              current?: "true" | "false" | "page" | "step" | "location" | "date" | "time";
              /**
               * Disabled state of form controls.
               */
              disabled?: boolean;
              /**
               * Heading level of a heading element.
               */
              headingLevel?: number;
              /**
               * The hierarchical level of an element.
               */
              hierarchyLevel?: number;
              /**
               * Whether an element is a popup button.
               */
              isPopUpButton?: boolean;
              /**
               * Indicates whether there is an existing AX object for the DOM node. If this is false, all the other properties will be default values.
               */
              exists: boolean;
              /**
               * Expanded state.
               */
              expanded?: boolean;
              /**
               * Array of <code>DOMNode</code> ids of any nodes referenced via @aria-flowto.
               */
              flowedNodeIds?: NodeId[];
              /**
               * Focused state. Only defined on focusable elements.
               */
              focused?: boolean;
              /**
               * Indicates whether the accessibility of the associated AX object node is ignored, whether heuristically or explicitly.
               */
              ignored?: boolean;
              /**
               * State indicating whether the accessibility of the associated AX object node is ignored by default for node type.
               */
              ignoredByDefault?: boolean;
              /**
               * Invalid status of form controls.
               */
              invalid?: "true" | "false" | "grammar" | "spelling";
              /**
               * Hidden state. True if node or an ancestor is hidden via CSS or explicit @aria-hidden, to clarify why the element is ignored.
               */
              hidden?: boolean;
              /**
               * Computed label value for the node, sometimes calculated by referencing other nodes.
               */
              label: string;
              /**
               * Value of @aria-atomic.
               */
              liveRegionAtomic?: boolean;
              /**
               * Token value(s) of element's @aria-relevant attribute. Array of string values matching $ref LiveRegionRelevant. FIXME: Enum values blocked by http://webkit.org/b/133711
               */
              liveRegionRelevant?: string[];
              /**
               * Value of element's @aria-live attribute.
               */
              liveRegionStatus?: "assertive" | "polite" | "off";
              /**
               * <code>DOMNode</code> id of node or closest ancestor node that has a mousedown, mouseup, or click event handler.
               */
              mouseEventNodeId?: NodeId;
              /**
               * Target <code>DOMNode</code> id.
               */
              nodeId: NodeId;
              /**
               * Array of <code>DOMNode</code> ids of any nodes referenced via @aria-owns.
               */
              ownedNodeIds?: NodeId[];
              /**
               * <code>DOMNode</code> id of the accessibility tree parent object if available.
               */
              parentNodeId?: NodeId;
              /**
               * Pressed state for toggle buttons.
               */
              pressed?: boolean;
              /**
               * Readonly state of text controls.
               */
              readonly?: boolean;
              /**
               * Required state of form controls.
               */
              required?: boolean;
              /**
               * Computed value for first recognized role token, default role per element, or overridden role.
               */
              role: string;
              /**
               * Selected state of certain form controls.
               */
              selected?: boolean;
              /**
               * Array of <code>DOMNode</code> ids of any children marked as selected.
               */
              selectedChildNodeIds?: NodeId[];
          }
          /**
           * A structure holding an RGBA color.
           */
          interface RGBAColor {
              /**
               * The red component, in the [0-255] range.
               */
              r: number;
              /**
               * The green component, in the [0-255] range.
               */
              g: number;
              /**
               * The blue component, in the [0-255] range.
               */
              b: number;
              /**
               * The alpha component, in the [0-1] range (default: 1).
               */
              a?: number;
          }
          /**
           * An array of quad vertices, x immediately followed by y for each point, points clock-wise.
           */
          type Quad = number[];
          /**
           * Configuration data for the highlighting of page elements.
           */
          interface HighlightConfig {
              /**
               * Whether the node info tooltip should be shown (default: false).
               */
              showInfo?: boolean;
              /**
               * The content box highlight fill color (default: transparent).
               */
              contentColor?: RGBAColor;
              /**
               * The padding highlight fill color (default: transparent).
               */
              paddingColor?: RGBAColor;
              /**
               * The border highlight fill color (default: transparent).
               */
              borderColor?: RGBAColor;
              /**
               * The margin highlight fill color (default: transparent).
               */
              marginColor?: RGBAColor;
          }
          /**
           * Data to construct File object.
           */
          interface FilePayload {
              /**
               * File name.
               */
              name: string;
              /**
               * File type.
               */
              type: string;
              /**
               * Base64-encoded file data.
               */
              data: string;
          }
          /**
           * Fired when <code>Document</code> has been totally updated. Node ids are no longer valid.
           */
          type documentUpdatedPayload = void;
          /**
           * Inspect a particular node.
           */
          type inspectPayload = {
              /**
               * Equivalent of Inspector.inspect but with a nodeId instead of a RemoteObject. Useful for augmented contexts.
               */
              nodeId: NodeId;
          };
          /**
           * Fired when backend wants to provide client with the missing DOM structure. This happens upon most of the calls requesting node ids.
           */
          type setChildNodesPayload = {
              /**
               * Parent node id to populate with children.
               */
              parentId: NodeId;
              /**
               * Child nodes array.
               */
              nodes: Node[];
          };
          /**
           * Fired when <code>Element</code>'s attribute is modified.
           */
          type attributeModifiedPayload = {
              /**
               * Id of the node that has changed.
               */
              nodeId: NodeId;
              /**
               * Attribute name.
               */
              name: string;
              /**
               * Attribute value.
               */
              value: string;
          };
          /**
           * Fired when <code>Element</code>'s attribute is removed.
           */
          type attributeRemovedPayload = {
              /**
               * Id of the node that has changed.
               */
              nodeId: NodeId;
              /**
               * Attribute name.
               */
              name: string;
          };
          /**
           * Fired when <code>Element</code>'s inline style is modified via a CSS property modification.
           */
          type inlineStyleInvalidatedPayload = {
              /**
               * Ids of the nodes for which the inline styles have been invalidated.
               */
              nodeIds: NodeId[];
          };
          /**
           * Mirrors <code>DOMCharacterDataModified</code> event.
           */
          type characterDataModifiedPayload = {
              /**
               * Id of the node that has changed.
               */
              nodeId: NodeId;
              /**
               * New text value.
               */
              characterData: string;
          };
          /**
           * Fired when <code>Container</code>'s child node count has changed.
           */
          type childNodeCountUpdatedPayload = {
              /**
               * Id of the node that has changed.
               */
              nodeId: NodeId;
              /**
               * New node count.
               */
              childNodeCount: number;
          };
          /**
           * Mirrors <code>DOMNodeInserted</code> event.
           */
          type childNodeInsertedPayload = {
              /**
               * Id of the node that has changed.
               */
              parentNodeId: NodeId;
              /**
               * Id of the previous sibling.
               */
              previousNodeId: NodeId;
              /**
               * Inserted node data.
               */
              node: Node;
          };
          /**
           * Mirrors <code>DOMNodeRemoved</code> event.
           */
          type childNodeRemovedPayload = {
              /**
               * Parent id.
               */
              parentNodeId: NodeId;
              /**
               * Id of the node that has been removed.
               */
              nodeId: NodeId;
          };
          /**
           * Called when shadow root is pushed into the element.
           */
          type shadowRootPushedPayload = {
              /**
               * Host element id.
               */
              hostId: NodeId;
              /**
               * Shadow root.
               */
              root: Node;
          };
          /**
           * Called when shadow root is popped from the element.
           */
          type shadowRootPoppedPayload = {
              /**
               * Host element id.
               */
              hostId: NodeId;
              /**
               * Shadow root id.
               */
              rootId: NodeId;
          };
          /**
           * Called when the custom element state is changed.
           */
          type customElementStateChangedPayload = {
              /**
               * Element id.
               */
              nodeId: NodeId;
              /**
               * Custom element state.
               */
              customElementState: CustomElementState;
          };
          /**
           * Called when a pseudo element is added to an element.
           */
          type pseudoElementAddedPayload = {
              /**
               * Pseudo element's parent element id.
               */
              parentId: NodeId;
              /**
               * The added pseudo element.
               */
              pseudoElement: Node;
          };
          /**
           * Called when a pseudo element is removed from an element.
           */
          type pseudoElementRemovedPayload = {
              /**
               * Pseudo element's parent element id.
               */
              parentId: NodeId;
              /**
               * The removed pseudo element id.
               */
              pseudoElementId: NodeId;
          };
          /**
           * Called when an event listener is added to a node.
           */
          type didAddEventListenerPayload = {
              nodeId: NodeId;
          };
          /**
           * Called after a request has been made to remove an event listener from a node.
           */
          type willRemoveEventListenerPayload = {
              nodeId: NodeId;
          };
          /**
           * Called when an event is fired on a node.
           */
          type didFireEventPayload = {
              nodeId: NodeId;
              eventName: string;
              /**
               * Time when the event was fired
               */
              timestamp: Network.Timestamp;
              /**
               * Holds ancillary information about the event or its target.
               */
              data?: {
                  [key: string]: string;
              };
          };
          /**
           * Called when an element enters/exits a power efficient playback state.
           */
          type powerEfficientPlaybackStateChangedPayload = {
              nodeId: NodeId;
              timestamp: Network.Timestamp;
              isPowerEfficient: boolean;
          };
          /**
           * Returns the root DOM node to the caller.
           */
          type getDocumentParameters = {};
          type getDocumentReturnValue = {
              /**
               * Resulting node.
               */
              root: Node;
          };
          /**
           * Requests that children of the node with given id are returned to the caller in form of <code>setChildNodes</code> events where not only immediate children are retrieved, but all children down to the specified depth.
           */
          type requestChildNodesParameters = {
              /**
               * Id of the node to get children for.
               */
              nodeId: NodeId;
              /**
               * The maximum depth at which children should be retrieved, defaults to 1. Use -1 for the entire subtree or provide an integer larger than 0.
               */
              depth?: number;
          };
          type requestChildNodesReturnValue = {};
          /**
           * Executes <code>querySelector</code> on a given node.
           */
          type querySelectorParameters = {
              /**
               * Id of the node to query upon.
               */
              nodeId: NodeId;
              /**
               * Selector string.
               */
              selector: string;
          };
          type querySelectorReturnValue = {
              /**
               * Query selector result.
               */
              nodeId: NodeId;
          };
          /**
           * Executes <code>querySelectorAll</code> on a given node.
           */
          type querySelectorAllParameters = {
              /**
               * Id of the node to query upon.
               */
              nodeId: NodeId;
              /**
               * Selector string.
               */
              selector: string;
          };
          type querySelectorAllReturnValue = {
              /**
               * Query selector result.
               */
              nodeIds: NodeId[];
          };
          /**
           * Sets node name for a node with given id.
           */
          type setNodeNameParameters = {
              /**
               * Id of the node to set name for.
               */
              nodeId: NodeId;
              /**
               * New node's name.
               */
              name: string;
          };
          type setNodeNameReturnValue = {
              /**
               * New node's id.
               */
              nodeId: NodeId;
          };
          /**
           * Sets node value for a node with given id.
           */
          type setNodeValueParameters = {
              /**
               * Id of the node to set value for.
               */
              nodeId: NodeId;
              /**
               * New node's value.
               */
              value: string;
          };
          type setNodeValueReturnValue = {};
          /**
           * Removes node with given id.
           */
          type removeNodeParameters = {
              /**
               * Id of the node to remove.
               */
              nodeId: NodeId;
          };
          type removeNodeReturnValue = {};
          /**
           * Sets attribute for an element with given id.
           */
          type setAttributeValueParameters = {
              /**
               * Id of the element to set attribute for.
               */
              nodeId: NodeId;
              /**
               * Attribute name.
               */
              name: string;
              /**
               * Attribute value.
               */
              value: string;
          };
          type setAttributeValueReturnValue = {};
          /**
           * Sets attributes on element with given id. This method is useful when user edits some existing attribute value and types in several attribute name/value pairs.
           */
          type setAttributesAsTextParameters = {
              /**
               * Id of the element to set attributes for.
               */
              nodeId: NodeId;
              /**
               * Text with a number of attributes. Will parse this text using HTML parser.
               */
              text: string;
              /**
               * Attribute name to replace with new attributes derived from text in case text parsed successfully.
               */
              name?: string;
          };
          type setAttributesAsTextReturnValue = {};
          /**
           * Removes attribute with given name from an element with given id.
           */
          type removeAttributeParameters = {
              /**
               * Id of the element to remove attribute from.
               */
              nodeId: NodeId;
              /**
               * Name of the attribute to remove.
               */
              name: string;
          };
          type removeAttributeReturnValue = {};
          /**
           * Gets the list of builtin DOM event names.
           */
          type getSupportedEventNamesParameters = {};
          type getSupportedEventNamesReturnValue = {
              eventNames: string[];
          };
          /**
           * Returns all data binding relationships between data that is associated with the node and the node itself.
           */
          type getDataBindingsForNodeParameters = {
              /**
               * Id of the node to get data bindings for.
               */
              nodeId: NodeId;
          };
          type getDataBindingsForNodeReturnValue = {
              /**
               * Array of binding relationships between data and node
               */
              dataBindings: DataBinding[];
          };
          /**
           * Returns all data that has been associated with the node and is available for data binding.
           */
          type getAssociatedDataForNodeParameters = {
              /**
               * Id of the node to get associated data for.
               */
              nodeId: NodeId;
          };
          type getAssociatedDataForNodeReturnValue = {
              /**
               * Associated data bound to this node. Sent as a JSON string.
               */
              associatedData?: string;
          };
          /**
           * Returns event listeners relevant to the node.
           */
          type getEventListenersForNodeParameters = {
              /**
               * Id of the node to get listeners for.
               */
              nodeId: NodeId;
          };
          type getEventListenersForNodeReturnValue = {
              /**
               * Array of relevant listeners.
               */
              listeners: EventListener[];
          };
          /**
           * Enable/disable the given event listener. A disabled event listener will not fire.
           */
          type setEventListenerDisabledParameters = {
              eventListenerId: EventListenerId;
              disabled: boolean;
          };
          type setEventListenerDisabledReturnValue = {};
          /**
           * Set a breakpoint on the given event listener.
           */
          type setBreakpointForEventListenerParameters = {
              eventListenerId: EventListenerId;
          };
          type setBreakpointForEventListenerReturnValue = {};
          /**
           * Remove any breakpoints on the given event listener.
           */
          type removeBreakpointForEventListenerParameters = {
              eventListenerId: EventListenerId;
          };
          type removeBreakpointForEventListenerReturnValue = {};
          /**
           * Returns a dictionary of accessibility properties for the node.
           */
          type getAccessibilityPropertiesForNodeParameters = {
              /**
               * Id of the node for which to get accessibility properties.
               */
              nodeId: NodeId;
          };
          type getAccessibilityPropertiesForNodeReturnValue = {
              /**
               * Dictionary of relevant accessibility properties.
               */
              properties: AccessibilityProperties;
          };
          /**
           * Returns node's HTML markup.
           */
          type getOuterHTMLParameters = {
              /**
               * Id of the node to get markup for.
               */
              nodeId: NodeId;
          };
          type getOuterHTMLReturnValue = {
              /**
               * Outer HTML markup.
               */
              outerHTML: string;
          };
          /**
           * Sets node HTML markup, returns new node id.
           */
          type setOuterHTMLParameters = {
              /**
               * Id of the node to set markup for.
               */
              nodeId: NodeId;
              /**
               * Outer HTML markup to set.
               */
              outerHTML: string;
          };
          type setOuterHTMLReturnValue = {};
          type insertAdjacentHTMLParameters = {
              nodeId: NodeId;
              position: string;
              html: string;
          };
          type insertAdjacentHTMLReturnValue = {};
          /**
           * Searches for a given string in the DOM tree. Use <code>getSearchResults</code> to access search results or <code>cancelSearch</code> to end this search session.
           */
          type performSearchParameters = {
              /**
               * Plain text or query selector or XPath search query.
               */
              query: string;
              /**
               * Ids of nodes to use as starting points for the search.
               */
              nodeIds?: NodeId[];
              /**
               * If true, search is case sensitive.
               */
              caseSensitive?: boolean;
          };
          type performSearchReturnValue = {
              /**
               * Unique search session identifier.
               */
              searchId: string;
              /**
               * Number of search results.
               */
              resultCount: number;
          };
          /**
           * Returns search results from given <code>fromIndex</code> to given <code>toIndex</code> from the sarch with the given identifier.
           */
          type getSearchResultsParameters = {
              /**
               * Unique search session identifier.
               */
              searchId: string;
              /**
               * Start index of the search result to be returned.
               */
              fromIndex: number;
              /**
               * End index of the search result to be returned.
               */
              toIndex: number;
          };
          type getSearchResultsReturnValue = {
              /**
               * Ids of the search result nodes.
               */
              nodeIds: NodeId[];
          };
          /**
           * Discards search results from the session with the given id. <code>getSearchResults</code> should no longer be called for that search.
           */
          type discardSearchResultsParameters = {
              /**
               * Unique search session identifier.
               */
              searchId: string;
          };
          type discardSearchResultsReturnValue = {};
          /**
           * Requests that the node is sent to the caller given the JavaScript node object reference. All nodes that form the path from the node to the root are also sent to the client as a series of <code>setChildNodes</code> notifications.
           */
          type requestNodeParameters = {
              /**
               * JavaScript object id to convert into node.
               */
              objectId: Runtime.RemoteObjectId;
          };
          type requestNodeReturnValue = {
              /**
               * Node id for given object.
               */
              nodeId: NodeId;
          };
          /**
           * Enters the 'inspect' mode. In this mode, elements that user is hovering over are highlighted. Backend then generates 'inspect' command upon element selection.
           */
          type setInspectModeEnabledParameters = {
              /**
               * True to enable inspection mode, false to disable it.
               */
              enabled: boolean;
              /**
               * A descriptor for the highlight appearance of hovered-over nodes. May be omitted if <code>enabled == false</code>.
               */
              highlightConfig?: HighlightConfig;
              /**
               * Whether the rulers should be shown during element selection. This overrides Page.setShowRulers.
               */
              showRulers?: boolean;
          };
          type setInspectModeEnabledReturnValue = {};
          /**
           * Highlights given rectangle. Coordinates are absolute with respect to the main frame viewport.
           */
          type highlightRectParameters = {
              /**
               * X coordinate
               */
              x: number;
              /**
               * Y coordinate
               */
              y: number;
              /**
               * Rectangle width
               */
              width: number;
              /**
               * Rectangle height
               */
              height: number;
              /**
               * The highlight fill color (default: transparent).
               */
              color?: RGBAColor;
              /**
               * The highlight outline color (default: transparent).
               */
              outlineColor?: RGBAColor;
              /**
               * Indicates whether the provided parameters are in page coordinates or in viewport coordinates (the default).
               */
              usePageCoordinates?: boolean;
          };
          type highlightRectReturnValue = {};
          /**
           * Highlights given quad. Coordinates are absolute with respect to the main frame viewport.
           */
          type highlightQuadParameters = {
              /**
               * Quad to highlight
               */
              quad: Quad;
              /**
               * The highlight fill color (default: transparent).
               */
              color?: RGBAColor;
              /**
               * The highlight outline color (default: transparent).
               */
              outlineColor?: RGBAColor;
              /**
               * Indicates whether the provided parameters are in page coordinates or in viewport coordinates (the default).
               */
              usePageCoordinates?: boolean;
          };
          type highlightQuadReturnValue = {};
          /**
           * Highlights all DOM nodes that match a given selector. A string containing a CSS selector must be specified.
           */
          type highlightSelectorParameters = {
              /**
               * A descriptor for the highlight appearance.
               */
              highlightConfig: HighlightConfig;
              /**
               * A CSS selector for finding matching nodes to highlight.
               */
              selectorString: string;
              /**
               * Identifier of the frame which will be searched using the selector.  If not provided, the main frame will be used.
               */
              frameId?: string;
          };
          type highlightSelectorReturnValue = {};
          /**
           * Highlights DOM node with given id or with the given JavaScript object wrapper. Either nodeId or objectId must be specified.
           */
          type highlightNodeParameters = {
              /**
               * A descriptor for the highlight appearance.
               */
              highlightConfig: HighlightConfig;
              /**
               * Identifier of the node to highlight.
               */
              nodeId?: NodeId;
              /**
               * JavaScript object id of the node to be highlighted.
               */
              objectId?: Runtime.RemoteObjectId;
          };
          type highlightNodeReturnValue = {};
          /**
           * Highlights each DOM node in the given list.
           */
          type highlightNodeListParameters = {
              nodeIds: NodeId[];
              highlightConfig: HighlightConfig;
          };
          type highlightNodeListReturnValue = {};
          /**
           * Hides DOM node highlight.
           */
          type hideHighlightParameters = {};
          type hideHighlightReturnValue = {};
          /**
           * Highlights owner element of the frame with given id.
           */
          type highlightFrameParameters = {
              /**
               * Identifier of the frame to highlight.
               */
              frameId: Network.FrameId;
              /**
               * The content box highlight fill color (default: transparent).
               */
              contentColor?: RGBAColor;
              /**
               * The content box highlight outline color (default: transparent).
               */
              contentOutlineColor?: RGBAColor;
          };
          type highlightFrameReturnValue = {};
          /**
           * Requests that the node is sent to the caller given its path.
           */
          type pushNodeByPathToFrontendParameters = {
              /**
               * Path to node in the proprietary format.
               */
              path: string;
          };
          type pushNodeByPathToFrontendReturnValue = {
              /**
               * Id of the node for given path.
               */
              nodeId: NodeId;
          };
          /**
           * Resolves JavaScript node object for given node id.
           */
          type resolveNodeParameters = {
              /**
               * Id of the node to resolve.
               */
              nodeId?: NodeId;
              /**
               * Source element handle.
               */
              objectId?: Runtime.RemoteObjectId;
              /**
               * Specifies in which execution context to adopt to.
               */
              executionContextId?: Runtime.ExecutionContextId;
              /**
               * Symbolic group name that can be used to release multiple objects.
               */
              objectGroup?: string;
          };
          type resolveNodeReturnValue = {
              /**
               * JavaScript object wrapper for given node.
               */
              object: Runtime.RemoteObject;
          };
          /**
           * Returns attributes for the specified node.
           */
          type getAttributesParameters = {
              /**
               * Id of the node to retrieve attributes for.
               */
              nodeId: NodeId;
          };
          type getAttributesReturnValue = {
              /**
               * An interleaved array of node attribute names and values.
               */
              attributes: string[];
          };
          /**
           * Moves node into the new container, places it before the given anchor.
           */
          type moveToParameters = {
              /**
               * Id of the node to drop.
               */
              nodeId: NodeId;
              /**
               * Id of the element to drop into.
               */
              targetNodeId: NodeId;
              /**
               * Drop node before given one.
               */
              insertBeforeNodeId?: NodeId;
          };
          type moveToReturnValue = {
              /**
               * New id of the moved node.
               */
              nodeId: NodeId;
          };
          /**
           * Undoes the last performed action.
           */
          type undoParameters = {};
          type undoReturnValue = {};
          /**
           * Re-does the last undone action.
           */
          type redoParameters = {};
          type redoReturnValue = {};
          /**
           * Marks last undoable state.
           */
          type markUndoableStateParameters = {};
          type markUndoableStateReturnValue = {};
          /**
           * Focuses the given element.
           */
          type focusParameters = {
              /**
               * Id of the node to focus.
               */
              nodeId: NodeId;
          };
          type focusReturnValue = {};
          /**
           * Enables console to refer to the node with given id via $0 (see Command Line API for more details).
           */
          type setInspectedNodeParameters = {
              /**
               * DOM node id to be accessible by means of $0 command line API.
               */
              nodeId: NodeId;
          };
          type setInspectedNodeReturnValue = {};
          /**
           * Controls whether any DOM commands work for nodes inside a UserAgent shadow tree.
           */
          type setAllowEditingUserAgentShadowTreesParameters = {
              allow: boolean;
          };
          type setAllowEditingUserAgentShadowTreesReturnValue = {};
          /**
           * Returns node description.
           */
          type describeNodeParameters = {
              /**
               * JavaScript object id of the node wrapper.
               */
              objectId: Runtime.RemoteObjectId;
          };
          type describeNodeReturnValue = {
              /**
               * Frame ID for frame owner elements.
               */
              contentFrameId?: Network.FrameId;
              /**
               * ID of the owning frame element.
               */
              ownerFrameId?: Network.FrameId;
          };
          /**
           * Scrolls the given rect into view if not already in the viewport.
           */
          type scrollIntoViewIfNeededParameters = {
              /**
               * JavaScript object id of the node wrapper.
               */
              objectId: Runtime.RemoteObjectId;
              /**
               * Rect relative to the node's border box, in CSS pixels.
               */
              rect?: Rect;
          };
          type scrollIntoViewIfNeededReturnValue = {};
          /**
           * Returns quads that describe node position on the page. This method
      might return multiple quads for inline nodes.
           */
          type getContentQuadsParameters = {
              /**
               * JavaScript object id of the node wrapper.
               */
              objectId: Runtime.RemoteObjectId;
          };
          type getContentQuadsReturnValue = {
              /**
               * Quads that describe node layout relative to viewport.
               */
              quads: Quad[];
          };
          /**
           * Sets input files for given <input type=file>
           */
          type setInputFilesParameters = {
              /**
               * Input element handle.
               */
              objectId: Runtime.RemoteObjectId;
              /**
               * Files to set
               */
              files: FilePayload[];
          };
          type setInputFilesReturnValue = {};
      }
      /**
       * DOM debugging allows setting breakpoints on particular DOM operations and events. JavaScript execution will stop on these operations as if there was a regular breakpoint set.
       */
      module DOMDebugger {
          /**
           * DOM breakpoint type.
           */
          type DOMBreakpointType = "subtree-modified" | "attribute-modified" | "node-removed";
          /**
           * Event breakpoint type.
           */
          type EventBreakpointType = "animation-frame" | "interval" | "listener" | "timeout";
          /**
           * Sets breakpoint on particular operation with DOM.
           */
          type setDOMBreakpointParameters = {
              /**
               * Identifier of the node to set breakpoint on.
               */
              nodeId: DOM.NodeId;
              /**
               * Type of the operation to stop upon.
               */
              type: DOMBreakpointType;
          };
          type setDOMBreakpointReturnValue = {};
          /**
           * Removes DOM breakpoint that was set using <code>setDOMBreakpoint</code>.
           */
          type removeDOMBreakpointParameters = {
              /**
               * Identifier of the node to remove breakpoint from.
               */
              nodeId: DOM.NodeId;
              /**
               * Type of the breakpoint to remove.
               */
              type: DOMBreakpointType;
          };
          type removeDOMBreakpointReturnValue = {};
          /**
           * Sets breakpoint on particular event of given type.
           */
          type setEventBreakpointParameters = {
              breakpointType: EventBreakpointType;
              /**
               * The name of the specific event to stop on.
               */
              eventName?: string;
          };
          type setEventBreakpointReturnValue = {};
          /**
           * Removes breakpoint on particular event of given type.
           */
          type removeEventBreakpointParameters = {
              breakpointType: EventBreakpointType;
              /**
               * The name of the specific event to stop on.
               */
              eventName?: string;
          };
          type removeEventBreakpointReturnValue = {};
          /**
           * Sets breakpoint on network activity for the given URL.
           */
          type setURLBreakpointParameters = {
              /**
               * Resource URL substring or regular expression. All requests having this substring in the URL will get stopped upon. An empty string will pause on all requests.
               */
              url: string;
              /**
               * Whether the URL string is a regular expression.
               */
              isRegex?: boolean;
          };
          type setURLBreakpointReturnValue = {};
          /**
           * Removes breakpoint from network activity for the given URL.
           */
          type removeURLBreakpointParameters = {
              /**
               * Resource URL substring. An empty string will stop pausing on all requests.
               */
              url: string;
          };
          type removeURLBreakpointReturnValue = {};
      }
      /**
       * Query and modify DOM storage.
       */
      module DOMStorage {
          /**
           * DOM Storage identifier.
           */
          interface StorageId {
              /**
               * Security origin for the storage.
               */
              securityOrigin: string;
              /**
               * Whether the storage is local storage (not session storage).
               */
              isLocalStorage: boolean;
          }
          /**
           * DOM Storage item.
           */
          type Item = string[];
          type domStorageItemsClearedPayload = {
              storageId: StorageId;
          };
          type domStorageItemRemovedPayload = {
              storageId: StorageId;
              key: string;
          };
          type domStorageItemAddedPayload = {
              storageId: StorageId;
              key: string;
              newValue: string;
          };
          type domStorageItemUpdatedPayload = {
              storageId: StorageId;
              key: string;
              oldValue: string;
              newValue: string;
          };
          /**
           * Enables storage tracking, storage events will now be delivered to the client.
           */
          type enableParameters = {};
          type enableReturnValue = {};
          /**
           * Disables storage tracking, prevents storage events from being sent to the client.
           */
          type disableParameters = {};
          type disableReturnValue = {};
          type getDOMStorageItemsParameters = {
              storageId: StorageId;
          };
          type getDOMStorageItemsReturnValue = {
              entries: Item[];
          };
          type setDOMStorageItemParameters = {
              storageId: StorageId;
              key: string;
              value: string;
          };
          type setDOMStorageItemReturnValue = {};
          type removeDOMStorageItemParameters = {
              storageId: StorageId;
              key: string;
          };
          type removeDOMStorageItemReturnValue = {};
      }
      module Database {
          /**
           * Unique identifier of Database object.
           */
          type DatabaseId = string;
          /**
           * Database object.
           */
          interface Database {
              /**
               * Database ID.
               */
              id: DatabaseId;
              /**
               * Database domain.
               */
              domain: string;
              /**
               * Database name.
               */
              name: string;
              /**
               * Database version.
               */
              version: string;
          }
          /**
           * Database error.
           */
          interface Error {
              /**
               * Error message.
               */
              message: string;
              /**
               * Error code.
               */
              code: number;
          }
          type addDatabasePayload = {
              database: Database;
          };
          /**
           * Enables database tracking, database events will now be delivered to the client.
           */
          type enableParameters = {};
          type enableReturnValue = {};
          /**
           * Disables database tracking, prevents database events from being sent to the client.
           */
          type disableParameters = {};
          type disableReturnValue = {};
          type getDatabaseTableNamesParameters = {
              databaseId: DatabaseId;
          };
          type getDatabaseTableNamesReturnValue = {
              tableNames: string[];
          };
          type executeSQLParameters = {
              databaseId: DatabaseId;
              query: string;
          };
          type executeSQLReturnValue = {
              columnNames?: string[];
              values?: any[];
              sqlError?: Error;
          };
      }
      /**
       * Debugger domain exposes JavaScript debugging capabilities. It allows setting and removing breakpoints, stepping through execution, exploring stack traces, etc.
       */
      module Debugger {
          /**
           * Breakpoint identifier.
           */
          type BreakpointId = string;
          /**
           * Breakpoint action identifier.
           */
          type BreakpointActionIdentifier = number;
          /**
           * Unique script identifier.
           */
          type ScriptId = string;
          /**
           * Call frame identifier.
           */
          type CallFrameId = string;
          /**
           * Location in the source code.
           */
          interface Location {
              /**
               * Script identifier as reported in the <code>Debugger.scriptParsed</code>.
               */
              scriptId: ScriptId;
              /**
               * Line number in the script (0-based).
               */
              lineNumber: number;
              /**
               * Column number in the script (0-based).
               */
              columnNumber?: number;
          }
          /**
           * Action to perform when a breakpoint is triggered.
           */
          interface BreakpointAction {
              /**
               * Different kinds of breakpoint actions.
               */
              type: "log" | "evaluate" | "sound" | "probe";
              /**
               * Data associated with this breakpoint type (e.g. for type "eval" this is the JavaScript string to evaluate).
               */
              data?: string;
              /**
               * A frontend-assigned identifier for this breakpoint action.
               */
              id?: BreakpointActionIdentifier;
          }
          /**
           * Extra options that modify breakpoint behavior.
           */
          interface BreakpointOptions {
              /**
               * Expression to use as a breakpoint condition. When specified, debugger will only stop on the breakpoint if this expression evaluates to true.
               */
              condition?: string;
              /**
               * Actions to perform automatically when the breakpoint is triggered.
               */
              actions?: BreakpointAction[];
              /**
               * Automatically continue after hitting this breakpoint and running actions.
               */
              autoContinue?: boolean;
              /**
               * Number of times to ignore this breakpoint, before stopping on the breakpoint and running actions.
               */
              ignoreCount?: number;
          }
          /**
           * Information about the function.
           */
          interface FunctionDetails {
              /**
               * Location of the function.
               */
              location: Location;
              /**
               * Name of the function. Not present for anonymous functions.
               */
              name?: string;
              /**
               * Display name of the function(specified in 'displayName' property on the function object).
               */
              displayName?: string;
              /**
               * Scope chain for this closure.
               */
              scopeChain?: Scope[];
          }
          /**
           * JavaScript call frame. Array of call frames form the call stack.
           */
          interface CallFrame {
              /**
               * Call frame identifier. This identifier is only valid while the virtual machine is paused.
               */
              callFrameId: CallFrameId;
              /**
               * Name of the JavaScript function called on this call frame.
               */
              functionName: string;
              /**
               * Location in the source code.
               */
              location: Location;
              /**
               * Scope chain for this call frame.
               */
              scopeChain: Scope[];
              /**
               * <code>this</code> object for this call frame.
               */
              this: Runtime.RemoteObject;
              /**
               * Is the current frame tail deleted from a tail call.
               */
              isTailDeleted: boolean;
          }
          /**
           * Scope description.
           */
          interface Scope {
              /**
               * Object representing the scope. For <code>global</code> and <code>with</code> scopes it represents the actual object; for the rest of the scopes, it is artificial transient object enumerating scope variables as its properties.
               */
              object: Runtime.RemoteObject;
              /**
               * Scope type.
               */
              type: "global" | "with" | "closure" | "catch" | "functionName" | "globalLexicalEnvironment" | "nestedLexical";
              /**
               * Name associated with the scope.
               */
              name?: string;
              /**
               * Location if available of the scope definition.
               */
              location?: Location;
              /**
               * Whether the scope has any variables.
               */
              empty?: boolean;
          }
          /**
           * A sample collected by evaluating a probe breakpoint action.
           */
          interface ProbeSample {
              /**
               * Identifier of the probe breakpoint action that created the sample.
               */
              probeId: BreakpointActionIdentifier;
              /**
               * Unique identifier for this sample.
               */
              sampleId: number;
              /**
               * A batch identifier which is the same for all samples taken at the same breakpoint hit.
               */
              batchId: number;
              /**
               * Timestamp of when the sample was taken.
               */
              timestamp: number;
              /**
               * Contents of the sample.
               */
              payload: Runtime.RemoteObject;
          }
          /**
           * The pause reason auxiliary data when paused because of an assertion.
           */
          interface AssertPauseReason {
              /**
               * The console.assert message string if provided.
               */
              message?: string;
          }
          /**
           * The pause reason auxiliary data when paused because of hitting a breakpoint.
           */
          interface BreakpointPauseReason {
              /**
               * The identifier of the breakpoint causing the pause.
               */
              breakpointId: string;
          }
          /**
           * The pause reason auxiliary data when paused because of a Content Security Policy directive.
           */
          interface CSPViolationPauseReason {
              /**
               * The CSP directive that blocked script execution.
               */
              directive: string;
          }
          /**
           * Called when global has been cleared and debugger client should reset its state. Happens upon navigation or reload.
           */
          type globalObjectClearedPayload = void;
          /**
           * Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger.
           */
          type scriptParsedPayload = {
              /**
               * Identifier of the script parsed.
               */
              scriptId: ScriptId;
              /**
               * URL of the script parsed (if any).
               */
              url: string;
              /**
               * Line offset of the script within the resource with given URL (for script tags).
               */
              startLine: number;
              /**
               * Column offset of the script within the resource with given URL.
               */
              startColumn: number;
              /**
               * Last line of the script.
               */
              endLine: number;
              /**
               * Length of the last line of the script.
               */
              endColumn: number;
              /**
               * Determines whether this script is a user extension script.
               */
              isContentScript?: boolean;
              /**
               * sourceURL name of the script (if any).
               */
              sourceURL?: string;
              /**
               * URL of source map associated with script (if any).
               */
              sourceMapURL?: string;
              /**
               * True if this script was parsed as a module.
               */
              module?: boolean;
          };
          /**
           * Fired when virtual machine fails to parse the script.
           */
          type scriptFailedToParsePayload = {
              /**
               * URL of the script that failed to parse.
               */
              url: string;
              /**
               * Source text of the script that failed to parse.
               */
              scriptSource: string;
              /**
               * Line offset of the script within the resource.
               */
              startLine: number;
              /**
               * Line with error.
               */
              errorLine: number;
              /**
               * Parse error message.
               */
              errorMessage: string;
          };
          /**
           * Fired when breakpoint is resolved to an actual script and location.
           */
          type breakpointResolvedPayload = {
              /**
               * Breakpoint unique identifier.
               */
              breakpointId: BreakpointId;
              /**
               * Actual breakpoint location.
               */
              location: Location;
          };
          /**
           * Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria.
           */
          type pausedPayload = {
              /**
               * Call stack the virtual machine stopped on.
               */
              callFrames: CallFrame[];
              /**
               * Pause reason.
               */
              reason: "XHR" | "Fetch" | "DOM" | "AnimationFrame" | "Interval" | "Listener" | "Timeout" | "exception" | "assert" | "CSPViolation" | "DebuggerStatement" | "Breakpoint" | "PauseOnNextStatement" | "Microtask" | "BlackboxedScript" | "other";
              /**
               * Object containing break-specific auxiliary properties.
               */
              data?: {
                  [key: string]: string;
              };
              /**
               * Linked list of asynchronous StackTraces.
               */
              asyncStackTrace?: Console.StackTrace;
          };
          /**
           * Fired when the virtual machine resumed execution.
           */
          type resumedPayload = void;
          /**
           * Fires when a new probe sample is collected.
           */
          type didSampleProbePayload = {
              /**
               * A collected probe sample.
               */
              sample: ProbeSample;
          };
          /**
           * Fired when a "sound" breakpoint action is triggered on a breakpoint.
           */
          type playBreakpointActionSoundPayload = {
              /**
               * Breakpoint action identifier.
               */
              breakpointActionId: BreakpointActionIdentifier;
          };
          /**
           * Enables debugger for the given page. Clients should not assume that the debugging has been enabled until the result for this command is received.
           */
          type enableParameters = {};
          type enableReturnValue = {};
          /**
           * Disables debugger for given page.
           */
          type disableParameters = {};
          type disableReturnValue = {};
          /**
           * Set the async stack trace depth for the page. A value of zero disables recording of async stack traces.
           */
          type setAsyncStackTraceDepthParameters = {
              /**
               * Async stack trace depth.
               */
              depth: number;
          };
          type setAsyncStackTraceDepthReturnValue = {};
          /**
           * Activates / deactivates all breakpoints on the page.
           */
          type setBreakpointsActiveParameters = {
              /**
               * New value for breakpoints active state.
               */
              active: boolean;
          };
          type setBreakpointsActiveReturnValue = {};
          /**
           * Sets JavaScript breakpoint at given location specified either by URL or URL regex. Once this command is issued, all existing parsed scripts will have breakpoints resolved and returned in <code>locations</code> property. Further matching script parsing will result in subsequent <code>breakpointResolved</code> events issued. This logical breakpoint will survive page reloads.
           */
          type setBreakpointByUrlParameters = {
              /**
               * Line number to set breakpoint at.
               */
              lineNumber: number;
              /**
               * URL of the resources to set breakpoint on.
               */
              url?: string;
              /**
               * Regex pattern for the URLs of the resources to set breakpoints on. Either <code>url</code> or <code>urlRegex</code> must be specified.
               */
              urlRegex?: string;
              /**
               * Offset in the line to set breakpoint at.
               */
              columnNumber?: number;
              /**
               * Options to apply to this breakpoint to modify its behavior.
               */
              options?: BreakpointOptions;
          };
          type setBreakpointByUrlReturnValue = {
              /**
               * Id of the created breakpoint for further reference.
               */
              breakpointId: BreakpointId;
              /**
               * List of the locations this breakpoint resolved into upon addition.
               */
              locations: Location[];
          };
          /**
           * Sets JavaScript breakpoint at a given location.
           */
          type setBreakpointParameters = {
              /**
               * Location to set breakpoint in.
               */
              location: Location;
              /**
               * Options to apply to this breakpoint to modify its behavior.
               */
              options?: BreakpointOptions;
          };
          type setBreakpointReturnValue = {
              /**
               * Id of the created breakpoint for further reference.
               */
              breakpointId: BreakpointId;
              /**
               * Location this breakpoint resolved into.
               */
              actualLocation: Location;
          };
          /**
           * Removes JavaScript breakpoint.
           */
          type removeBreakpointParameters = {
              breakpointId: BreakpointId;
          };
          type removeBreakpointReturnValue = {};
          /**
           * Continues execution until the current evaluation completes. This will trigger either a Debugger.paused or Debugger.resumed event.
           */
          type continueUntilNextRunLoopParameters = {};
          type continueUntilNextRunLoopReturnValue = {};
          /**
           * Continues execution until specific location is reached. This will trigger either a Debugger.paused or Debugger.resumed event.
           */
          type continueToLocationParameters = {
              /**
               * Location to continue to.
               */
              location: Location;
          };
          type continueToLocationReturnValue = {};
          /**
           * Steps over the statement. This will trigger either a Debugger.paused or Debugger.resumed event.
           */
          type stepOverParameters = {};
          type stepOverReturnValue = {};
          /**
           * Steps into the function call. This will trigger either a Debugger.paused or Debugger.resumed event.
           */
          type stepIntoParameters = {};
          type stepIntoReturnValue = {};
          /**
           * Steps out of the function call. This will trigger either a Debugger.paused or Debugger.resumed event.
           */
          type stepOutParameters = {};
          type stepOutReturnValue = {};
          /**
           * Stops on the next JavaScript statement.
           */
          type pauseParameters = {};
          type pauseReturnValue = {};
          /**
           * Resumes JavaScript execution. This will trigger a Debugger.resumed event.
           */
          type resumeParameters = {};
          type resumeReturnValue = {};
          /**
           * Searches for given string in script content.
           */
          type searchInContentParameters = {
              /**
               * Id of the script to search in.
               */
              scriptId: ScriptId;
              /**
               * String to search for.
               */
              query: string;
              /**
               * If true, search is case sensitive.
               */
              caseSensitive?: boolean;
              /**
               * If true, treats string parameter as regex.
               */
              isRegex?: boolean;
          };
          type searchInContentReturnValue = {
              /**
               * List of search matches.
               */
              result: GenericTypes.SearchMatch[];
          };
          /**
           * Returns source for the script with given id.
           */
          type getScriptSourceParameters = {
              /**
               * Id of the script to get source for.
               */
              scriptId: ScriptId;
          };
          type getScriptSourceReturnValue = {
              /**
               * Script source.
               */
              scriptSource: string;
          };
          /**
           * Returns detailed information on given function.
           */
          type getFunctionDetailsParameters = {
              /**
               * Id of the function to get location for.
               */
              functionId: Runtime.RemoteObjectId;
          };
          type getFunctionDetailsReturnValue = {
              /**
               * Information about the function.
               */
              details: FunctionDetails;
          };
          /**
           * Control whether the debugger pauses execution before `debugger` statements.
           */
          type setPauseOnDebuggerStatementsParameters = {
              enabled: boolean;
          };
          type setPauseOnDebuggerStatementsReturnValue = {};
          /**
           * Defines pause on exceptions state. Can be set to stop on all exceptions, uncaught exceptions or no exceptions. Initial pause on exceptions state is <code>none</code>.
           */
          type setPauseOnExceptionsParameters = {
              /**
               * Pause on exceptions mode.
               */
              state: "none" | "uncaught" | "all";
          };
          type setPauseOnExceptionsReturnValue = {};
          /**
           * Set pause on assertions state. Assertions are console.assert assertions.
           */
          type setPauseOnAssertionsParameters = {
              enabled: boolean;
          };
          type setPauseOnAssertionsReturnValue = {};
          /**
           * Pause when running the next JavaScript microtask.
           */
          type setPauseOnMicrotasksParameters = {
              enabled: boolean;
          };
          type setPauseOnMicrotasksReturnValue = {};
          /**
           * Change whether to pause in the debugger for internal scripts. The default value is false.
           */
          type setPauseForInternalScriptsParameters = {
              shouldPause: boolean;
          };
          type setPauseForInternalScriptsReturnValue = {};
          /**
           * Evaluates expression on a given call frame.
           */
          type evaluateOnCallFrameParameters = {
              /**
               * Call frame identifier to evaluate on.
               */
              callFrameId: CallFrameId;
              /**
               * Expression to evaluate.
               */
              expression: string;
              /**
               * String object group name to put result into (allows rapid releasing resulting object handles using <code>releaseObjectGroup</code>).
               */
              objectGroup?: string;
              /**
               * Specifies whether command line API should be available to the evaluated expression, defaults to false.
               */
              includeCommandLineAPI?: boolean;
              /**
               * Specifies whether evaluation should stop on exceptions and mute console. Overrides setPauseOnException state.
               */
              doNotPauseOnExceptionsAndMuteConsole?: boolean;
              /**
               * Whether the result is expected to be a JSON object that should be sent by value.
               */
              returnByValue?: boolean;
              /**
               * Whether preview should be generated for the result.
               */
              generatePreview?: boolean;
              /**
               * Whether the resulting value should be considered for saving in the $n history.
               */
              saveResult?: boolean;
              /**
               * Whether the expression should be considered to be in a user gesture or not.
               */
              emulateUserGesture?: boolean;
          };
          type evaluateOnCallFrameReturnValue = {
              /**
               * Object wrapper for the evaluation result.
               */
              result: Runtime.RemoteObject;
              /**
               * True if the result was thrown during the evaluation.
               */
              wasThrown?: boolean;
              /**
               * If the result was saved, this is the $n index that can be used to access the value.
               */
              savedResultIndex?: number;
          };
          /**
           * Sets whether the given URL should be in the list of blackboxed scripts, which are ignored when pausing/stepping/debugging.
           */
          type setShouldBlackboxURLParameters = {
              url: string;
              shouldBlackbox: boolean;
              /**
               * If true, <code>url</code> is case sensitive.
               */
              caseSensitive?: boolean;
              /**
               * If true, treat <code>url</code> as regular expression.
               */
              isRegex?: boolean;
          };
          type setShouldBlackboxURLReturnValue = {};
      }
      /**
       * Actions and events related to alert boxes.
       */
      module Dialog {
          /**
           * Fired when a JavaScript initiated dialog (alert, confirm, prompt, or onbeforeunload) is about to open.
           */
          type javascriptDialogOpeningPayload = {
              /**
               * Dialog type.
               */
              type: string;
              /**
               * Message that will be displayed by the dialog.
               */
              message: string;
              /**
               * Default dialog prompt.
               */
              defaultPrompt?: string;
          };
          /**
           * Enables dialog domain notifications.
           */
          type enableParameters = {};
          type enableReturnValue = {};
          /**
           * Disables dialog domain notifications.
           */
          type disableParameters = {};
          type disableReturnValue = {};
          /**
           * Accepts or dismisses a JavaScript initiated dialog (alert, confirm, prompt, or onbeforeunload).
           */
          type handleJavaScriptDialogParameters = {
              /**
               * Whether to accept or dismiss the dialog.
               */
              accept: boolean;
              /**
               * The text to enter into the dialog prompt before accepting. Used only if this is a prompt dialog.
               */
              promptText?: string;
          };
          type handleJavaScriptDialogReturnValue = {};
      }
      module Emulation {
          /**
           * Overrides device metrics with provided values.
           */
          type setDeviceMetricsOverrideParameters = {
              width: number;
              height: number;
              deviceScaleFactor: number;
              fixedLayout: boolean;
          };
          type setDeviceMetricsOverrideReturnValue = {};
          /**
           * Allows to disable script execution for the page.
           */
          type setJavaScriptEnabledParameters = {
              enabled: boolean;
          };
          type setJavaScriptEnabledReturnValue = {};
          /**
           * Credentials to use during HTTP authentication.
           */
          type setAuthCredentialsParameters = {
              username?: string;
              password?: string;
          };
          type setAuthCredentialsReturnValue = {};
          /**
           * Makes page focused for test.
           */
          type setActiveAndFocusedParameters = {
              active?: boolean;
          };
          type setActiveAndFocusedReturnValue = {};
          /**
           * Overrides the permissions.
           */
          type grantPermissionsParameters = {
              origin: string;
              permissions: string[];
          };
          type grantPermissionsReturnValue = {};
          /**
           * Clears permission overrides.
           */
          type resetPermissionsParameters = {};
          type resetPermissionsReturnValue = {};
      }
      /**
       * Exposes generic types to be used by any domain.
       */
      module GenericTypes {
          /**
           * Search match in a resource.
           */
          interface SearchMatch {
              /**
               * Line number in resource content.
               */
              lineNumber: number;
              /**
               * Line with match content.
               */
              lineContent: string;
          }
      }
      /**
       * Heap domain exposes JavaScript heap attributes and capabilities.
       */
      module Heap {
          /**
           * Information about a garbage collection.
           */
          interface GarbageCollection {
              /**
               * The type of garbage collection.
               */
              type: "full" | "partial";
              startTime: number;
              endTime: number;
          }
          /**
           * JavaScriptCore HeapSnapshot JSON data.
           */
          type HeapSnapshotData = string;
          /**
           * Information about the garbage collection.
           */
          type garbageCollectedPayload = {
              collection: GarbageCollection;
          };
          /**
           * Tracking started.
           */
          type trackingStartPayload = {
              timestamp: number;
              /**
               * Snapshot at the start of tracking.
               */
              snapshotData: HeapSnapshotData;
          };
          /**
           * Tracking stopped.
           */
          type trackingCompletePayload = {
              timestamp: number;
              /**
               * Snapshot at the end of tracking.
               */
              snapshotData: HeapSnapshotData;
          };
          /**
           * Enables Heap domain events.
           */
          type enableParameters = {};
          type enableReturnValue = {};
          /**
           * Disables Heap domain events.
           */
          type disableParameters = {};
          type disableReturnValue = {};
          /**
           * Trigger a full garbage collection.
           */
          type gcParameters = {};
          type gcReturnValue = {};
          /**
           * Take a heap snapshot.
           */
          type snapshotParameters = {};
          type snapshotReturnValue = {
              timestamp: number;
              snapshotData: HeapSnapshotData;
          };
          /**
           * Start tracking heap changes. This will produce a `trackingStart` event.
           */
          type startTrackingParameters = {};
          type startTrackingReturnValue = {};
          /**
           * Stop tracking heap changes. This will produce a `trackingComplete` event.
           */
          type stopTrackingParameters = {};
          type stopTrackingReturnValue = {};
          /**
           * Returns a preview (string, Debugger.FunctionDetails, or Runtime.ObjectPreview) for a Heap.HeapObjectId.
           */
          type getPreviewParameters = {
              /**
               * Identifier of the heap object within the snapshot.
               */
              heapObjectId: number;
          };
          type getPreviewReturnValue = {
              /**
               * String value.
               */
              string?: string;
              /**
               * Function details.
               */
              functionDetails?: Debugger.FunctionDetails;
              /**
               * Object preview.
               */
              preview?: Runtime.ObjectPreview;
          };
          /**
           * Returns the strongly referenced Runtime.RemoteObject for a Heap.HeapObjectId.
           */
          type getRemoteObjectParameters = {
              /**
               * Identifier of the heap object within the snapshot.
               */
              heapObjectId: number;
              /**
               * Symbolic group name that can be used to release multiple objects.
               */
              objectGroup?: string;
          };
          type getRemoteObjectReturnValue = {
              /**
               * Resulting object.
               */
              result: Runtime.RemoteObject;
          };
      }
      module IndexedDB {
          /**
           * Database with an array of object stores.
           */
          interface DatabaseWithObjectStores {
              /**
               * Database name.
               */
              name: string;
              /**
               * Database version.
               */
              version: number;
              /**
               * Object stores in this database.
               */
              objectStores: ObjectStore[];
          }
          /**
           * Object store.
           */
          interface ObjectStore {
              /**
               * Object store name.
               */
              name: string;
              /**
               * Object store key path.
               */
              keyPath: KeyPath;
              /**
               * If true, object store has auto increment flag set.
               */
              autoIncrement: boolean;
              /**
               * Indexes in this object store.
               */
              indexes: ObjectStoreIndex[];
          }
          /**
           * Object store index.
           */
          interface ObjectStoreIndex {
              /**
               * Index name.
               */
              name: string;
              /**
               * Index key path.
               */
              keyPath: KeyPath;
              /**
               * If true, index is unique.
               */
              unique: boolean;
              /**
               * If true, index allows multiple entries for a key.
               */
              multiEntry: boolean;
          }
          /**
           * Key.
           */
          interface Key {
              /**
               * Key type.
               */
              type: "number" | "string" | "date" | "array";
              /**
               * Number value.
               */
              number?: number;
              /**
               * String value.
               */
              string?: string;
              /**
               * Date value.
               */
              date?: number;
              /**
               * Array value.
               */
              array?: Key[];
          }
          /**
           * Key range.
           */
          interface KeyRange {
              /**
               * Lower bound.
               */
              lower?: Key;
              /**
               * Upper bound.
               */
              upper?: Key;
              /**
               * If true lower bound is open.
               */
              lowerOpen: boolean;
              /**
               * If true upper bound is open.
               */
              upperOpen: boolean;
          }
          /**
           * Data entry.
           */
          interface DataEntry {
              /**
               * Key.
               */
              key: Runtime.RemoteObject;
              /**
               * Primary key.
               */
              primaryKey: Runtime.RemoteObject;
              /**
               * Value.
               */
              value: Runtime.RemoteObject;
          }
          /**
           * Key path.
           */
          interface KeyPath {
              /**
               * Key path type.
               */
              type: "null" | "string" | "array";
              /**
               * String value.
               */
              string?: string;
              /**
               * Array value.
               */
              array?: string[];
          }
          /**
           * Enables events from backend.
           */
          type enableParameters = {};
          type enableReturnValue = {};
          /**
           * Disables events from backend.
           */
          type disableParameters = {};
          type disableReturnValue = {};
          /**
           * Requests database names for given security origin.
           */
          type requestDatabaseNamesParameters = {
              /**
               * Security origin.
               */
              securityOrigin: string;
          };
          type requestDatabaseNamesReturnValue = {
              /**
               * Database names for origin.
               */
              databaseNames: string[];
          };
          /**
           * Requests database with given name in given frame.
           */
          type requestDatabaseParameters = {
              /**
               * Security origin.
               */
              securityOrigin: string;
              /**
               * Database name.
               */
              databaseName: string;
          };
          type requestDatabaseReturnValue = {
              /**
               * Database with an array of object stores.
               */
              databaseWithObjectStores: DatabaseWithObjectStores;
          };
          /**
           * Requests data from object store or index.
           */
          type requestDataParameters = {
              /**
               * Security origin.
               */
              securityOrigin: string;
              /**
               * Database name.
               */
              databaseName: string;
              /**
               * Object store name.
               */
              objectStoreName: string;
              /**
               * Index name, empty string for object store data requests.
               */
              indexName: string;
              /**
               * Number of records to skip.
               */
              skipCount: number;
              /**
               * Number of records to fetch.
               */
              pageSize: number;
              /**
               * Key range.
               */
              keyRange?: KeyRange;
          };
          type requestDataReturnValue = {
              /**
               * Array of object store data entries.
               */
              objectStoreDataEntries: DataEntry[];
              /**
               * If true, there are more entries to fetch in the given range.
               */
              hasMore: boolean;
          };
          /**
           * Clears all entries from an object store.
           */
          type clearObjectStoreParameters = {
              /**
               * Security origin.
               */
              securityOrigin: string;
              /**
               * Database name.
               */
              databaseName: string;
              /**
               * Object store name.
               */
              objectStoreName: string;
          };
          type clearObjectStoreReturnValue = {};
      }
      module Input {
          /**
           * UTC time in seconds, counted from January 1, 1970.
           */
          type TimeSinceEpoch = number;
          /**
           * Dispatches a key event to the page.
           */
          type dispatchKeyEventParameters = {
              /**
               * Type of the key event.
               */
              type: "keyDown" | "keyUp";
              /**
               * Bit field representing pressed modifier keys. (default: 0).
               */
              modifiers?: number;
              /**
               * Text as generated by processing a virtual key code with a keyboard layout. Not needed for
        for `keyUp` and `rawKeyDown` events (default: "")
               */
              text?: string;
              /**
               * Text that would have been generated by the keyboard if no modifiers were pressed (except for
        shift). Useful for shortcut (accelerator) key handling (default: "").
               */
              unmodifiedText?: string;
              /**
               * Unique DOM defined string value for each physical key (e.g., 'KeyA') (default: "").
               */
              code?: string;
              /**
               * Unique DOM defined string value describing the meaning of the key in the context of active
        modifiers, keyboard layout, etc (e.g., 'AltGr') (default: "").
               */
              key?: string;
              /**
               * Windows virtual key code (default: 0).
               */
              windowsVirtualKeyCode?: number;
              /**
               * Native virtual key code (default: 0).
               */
              nativeVirtualKeyCode?: number;
              /**
               * Whether the event was generated from auto repeat (default: false).
               */
              autoRepeat?: boolean;
              /**
               * Whether the event was generated from the keypad (default: false).
               */
              isKeypad?: boolean;
              /**
               * Whether the event was a system key event (default: false).
               */
              isSystemKey?: boolean;
              /**
               * Mac editing commands associated with this key
               */
              macCommands?: string[];
          };
          type dispatchKeyEventReturnValue = {};
          /**
           * Dispatches a mouse event to the page.
           */
          type dispatchMouseEventParameters = {
              /**
               * Type of the mouse event.
               */
              type: "move" | "down" | "up" | "wheel";
              /**
               * X coordinate of the event relative to the main frame's viewport in CSS pixels.
               */
              x: number;
              /**
               * Y coordinate of the event relative to the main frame's viewport in CSS pixels. 0 refers to
        the top of the viewport and Y increases as it proceeds towards the bottom of the viewport.
               */
              y: number;
              /**
               * Bit field representing pressed modifier keys. Alt=1, Ctrl=2, Meta/Command=4, Shift=8
        (default: 0).
               */
              modifiers?: number;
              /**
               * Mouse button (default: "none").
               */
              button?: "none" | "left" | "middle" | "right" | "back" | "forward";
              /**
               * A number indicating which buttons are pressed on the mouse when a mouse event is triggered.
        Left=1, Right=2, Middle=4, Back=8, Forward=16, None=0.
               */
              buttons?: number;
              /**
               * Number of times the mouse button was clicked (default: 0).
               */
              clickCount?: number;
              /**
               * X delta in CSS pixels for mouse wheel event (default: 0).
               */
              deltaX?: number;
              /**
               * Y delta in CSS pixels for mouse wheel event (default: 0).
               */
              deltaY?: number;
          };
          type dispatchMouseEventReturnValue = {};
      }
      module Inspector {
          type evaluateForTestInFrontendPayload = {
              script: string;
          };
          type inspectPayload = {
              object: Runtime.RemoteObject;
              hints: {
                  [key: string]: string;
              };
          };
          /**
           * Fired when the backend has alternate domains that need to be activated.
           */
          type activateExtraDomainsPayload = {
              /**
               * Domain names that need activation
               */
              domains: string[];
          };
          /**
           * Enables inspector domain notifications.
           */
          type enableParameters = {};
          type enableReturnValue = {};
          /**
           * Disables inspector domain notifications.
           */
          type disableParameters = {};
          type disableReturnValue = {};
          /**
           * Sent by the frontend after all initialization messages have been sent.
           */
          type initializedParameters = {};
          type initializedReturnValue = {};
      }
      module LayerTree {
          /**
           * Unique RenderLayer identifier.
           */
          type LayerId = string;
          /**
           * Unique PseudoElement identifier.
           */
          type PseudoElementId = string;
          /**
           * A rectangle.
           */
          interface IntRect {
              /**
               * The x position.
               */
              x: number;
              /**
               * The y position.
               */
              y: number;
              /**
               * The width metric.
               */
              width: number;
              /**
               * The height metric.
               */
              height: number;
          }
          /**
           * Information about a compositing layer.
           */
          interface Layer {
              /**
               * The unique id for this layer.
               */
              layerId: LayerId;
              /**
               * The id for the node associated with this layer.
               */
              nodeId: DOM.NodeId;
              /**
               * Bounds of the layer in absolute page coordinates.
               */
              bounds: IntRect;
              /**
               * Indicates how many time this layer has painted.
               */
              paintCount: number;
              /**
               * Estimated memory used by this layer.
               */
              memory: number;
              /**
               * The bounds of the composited layer.
               */
              compositedBounds: IntRect;
              /**
               * Indicates whether this layer is associated with an element hosted in a shadow tree.
               */
              isInShadowTree?: boolean;
              /**
               * Indicates whether this layer was used to provide a reflection for the element.
               */
              isReflection?: boolean;
              /**
               * Indicates whether the layer is attached to a pseudo element that is CSS generated content.
               */
              isGeneratedContent?: boolean;
              /**
               * Indicates whether the layer was created for a CSS anonymous block or box.
               */
              isAnonymous?: boolean;
              /**
               * The id for the pseudo element associated with this layer.
               */
              pseudoElementId?: PseudoElementId;
              /**
               * The name of the CSS pseudo-element that prompted the layer to be generated.
               */
              pseudoElement?: string;
          }
          /**
           * An object containing the reasons why the layer was composited as properties.
           */
          interface CompositingReasons {
              /**
               * Composition due to association with an element with a CSS 3D transform.
               */
              transform3D?: boolean;
              /**
               * Composition due to association with a <video> element.
               */
              video?: boolean;
              /**
               * Composition due to the element being a <canvas> element.
               */
              canvas?: boolean;
              /**
               * Composition due to association with a plugin.
               */
              plugin?: boolean;
              /**
               * Composition due to association with an <iframe> element.
               */
              iFrame?: boolean;
              /**
               * Composition due to association with an element with a "backface-visibility: hidden" style.
               */
              backfaceVisibilityHidden?: boolean;
              /**
               * Composition due to association with an element clipping compositing descendants.
               */
              clipsCompositingDescendants?: boolean;
              /**
               * Composition due to association with an animated element.
               */
              animation?: boolean;
              /**
               * Composition due to association with an element with CSS filters applied.
               */
              filters?: boolean;
              /**
               * Composition due to association with an element with a "position: fixed" style.
               */
              positionFixed?: boolean;
              /**
               * Composition due to association with an element with a "position: sticky" style.
               */
              positionSticky?: boolean;
              /**
               * Composition due to association with an element with a "overflow-scrolling: touch" style.
               */
              overflowScrollingTouch?: boolean;
              /**
               * Composition due to association with an element establishing a stacking context.
               */
              stacking?: boolean;
              /**
               * Composition due to association with an element overlapping other composited elements.
               */
              overlap?: boolean;
              /**
               * Composition due to association with an element with descendants that have a negative z-index.
               */
              negativeZIndexChildren?: boolean;
              /**
               * Composition due to association with an element with composited descendants.
               */
              transformWithCompositedDescendants?: boolean;
              /**
               * Composition due to association with an element with opacity applied and composited descendants.
               */
              opacityWithCompositedDescendants?: boolean;
              /**
               * Composition due to association with a masked element and composited descendants.
               */
              maskWithCompositedDescendants?: boolean;
              /**
               * Composition due to association with an element with a reflection and composited descendants.
               */
              reflectionWithCompositedDescendants?: boolean;
              /**
               * Composition due to association with an element with CSS filters applied and composited descendants.
               */
              filterWithCompositedDescendants?: boolean;
              /**
               * Composition due to association with an element with CSS blending applied and composited descendants.
               */
              blendingWithCompositedDescendants?: boolean;
              /**
               * Composition due to association with an element isolating compositing descendants having CSS blending applied.
               */
              isolatesCompositedBlendingDescendants?: boolean;
              /**
               * Composition due to association with an element with perspective applied.
               */
              perspective?: boolean;
              /**
               * Composition due to association with an element with a "transform-style: preserve-3d" style.
               */
              preserve3D?: boolean;
              /**
               * Composition due to association with an element with a "will-change" style.
               */
              willChange?: boolean;
              /**
               * Composition due to association with the root element.
               */
              root?: boolean;
              /**
               * Composition due to association with an element with a "blend-mode" style.
               */
              blending?: boolean;
          }
          type layerTreeDidChangePayload = void;
          /**
           * Enables compositing tree inspection.
           */
          type enableParameters = {};
          type enableReturnValue = {};
          /**
           * Disables compositing tree inspection.
           */
          type disableParameters = {};
          type disableReturnValue = {};
          /**
           * Returns the layer tree structure of the current page.
           */
          type layersForNodeParameters = {
              /**
               * Root of the subtree for which we want to gather layers.
               */
              nodeId: DOM.NodeId;
          };
          type layersForNodeReturnValue = {
              /**
               * Child layers.
               */
              layers: Layer[];
          };
          /**
           * Provides the reasons why the given layer was composited.
           */
          type reasonsForCompositingLayerParameters = {
              /**
               * The id of the layer for which we want to get the reasons it was composited.
               */
              layerId: LayerId;
          };
          type reasonsForCompositingLayerReturnValue = {
              /**
               * An object containing the reasons why the layer was composited as properties.
               */
              compositingReasons: CompositingReasons;
          };
      }
      /**
       * Memory domain exposes page memory tracking.
       */
      module Memory {
          interface Event {
              timestamp: number;
              /**
               * Breakdown of memory in categories.
               */
              categories: CategoryData[];
          }
          interface CategoryData {
              /**
               * Category type.
               */
              type: "javascript" | "jit" | "images" | "layers" | "page" | "other";
              /**
               * Category size in bytes.
               */
              size: number;
          }
          /**
           * Memory pressure was encountered.
           */
          type memoryPressurePayload = {
              timestamp: number;
              /**
               * The severity of the memory pressure event.
               */
              severity: "critical" | "non-critical";
          };
          /**
           * Tracking started.
           */
          type trackingStartPayload = {
              timestamp: number;
          };
          /**
           * Periodic tracking updates with event data.
           */
          type trackingUpdatePayload = {
              event: Event;
          };
          /**
           * Tracking stopped.
           */
          type trackingCompletePayload = {
              timestamp: number;
          };
          /**
           * Enables Memory domain events.
           */
          type enableParameters = {};
          type enableReturnValue = {};
          /**
           * Disables Memory domain events.
           */
          type disableParameters = {};
          type disableReturnValue = {};
          /**
           * Start tracking memory. This will produce a `trackingStart` event.
           */
          type startTrackingParameters = {};
          type startTrackingReturnValue = {};
          /**
           * Stop tracking memory. This will produce a `trackingComplete` event.
           */
          type stopTrackingParameters = {};
          type stopTrackingReturnValue = {};
      }
      /**
       * Network domain allows tracking network activities of the page. It exposes information about http, file, data and other requests and responses, their headers, bodies, timing, etc.
       */
      module Network {
          /**
           * Unique loader identifier.
           */
          type LoaderId = string;
          /**
           * Unique frame identifier.
           */
          type FrameId = string;
          /**
           * Unique request identifier.
           */
          type RequestId = string;
          /**
           * Elapsed seconds since frontend connected.
           */
          type Timestamp = number;
          /**
           * Number of seconds since epoch.
           */
          type Walltime = number;
          /**
           * Request / response headers as keys / values of JSON object.
           */
          type Headers = {
              [key: string]: string;
          };
          /**
           * Timing information for the request.
           */
          interface ResourceTiming {
              /**
               * Request is initiated
               */
              startTime: Timestamp;
              /**
               * Started redirect resolution.
               */
              redirectStart: Timestamp;
              /**
               * Finished redirect resolution.
               */
              redirectEnd: Timestamp;
              /**
               * Resource fetching started.
               */
              fetchStart: Timestamp;
              /**
               * Started DNS address resolve in milliseconds relative to fetchStart.
               */
              domainLookupStart: number;
              /**
               * Finished DNS address resolve in milliseconds relative to fetchStart.
               */
              domainLookupEnd: number;
              /**
               * Started connecting to the remote host in milliseconds relative to fetchStart.
               */
              connectStart: number;
              /**
               * Connected to the remote host in milliseconds relative to fetchStart.
               */
              connectEnd: number;
              /**
               * Started SSL handshake in milliseconds relative to fetchStart.
               */
              secureConnectionStart: number;
              /**
               * Started sending request in milliseconds relative to fetchStart.
               */
              requestStart: number;
              /**
               * Started receiving response headers in milliseconds relative to fetchStart.
               */
              responseStart: number;
              /**
               * Finished receiving response headers in milliseconds relative to fetchStart.
               */
              responseEnd: number;
          }
          /**
           * HTTP request data.
           */
          interface Request {
              /**
               * Request URL.
               */
              url: string;
              /**
               * HTTP request method.
               */
              method: string;
              /**
               * HTTP request headers.
               */
              headers: Headers;
              /**
               * HTTP POST request data.
               */
              postData?: string;
          }
          /**
           * HTTP response data.
           */
          interface Response {
              /**
               * Response URL. This URL can be different from CachedResource.url in case of redirect.
               */
              url: string;
              /**
               * HTTP response status code.
               */
              status: number;
              /**
               * HTTP response status text.
               */
              statusText: string;
              /**
               * HTTP response headers.
               */
              headers: Headers;
              /**
               * Resource mimeType as determined by the browser.
               */
              mimeType: string;
              /**
               * Specifies where the response came from.
               */
              source: "unknown" | "network" | "memory-cache" | "disk-cache" | "service-worker" | "inspector-override";
              /**
               * Refined HTTP request headers that were actually transmitted over the network.
               */
              requestHeaders?: Headers;
              /**
               * Timing information for the given request.
               */
              timing?: ResourceTiming;
              /**
               * The security information for the given request.
               */
              security?: Security.Security;
          }
          /**
           * Network load metrics.
           */
          interface Metrics {
              /**
               * Network protocol. ALPN Protocol ID Identification Sequence, as per RFC 7301 (for example, http/2, http/1.1, spdy/3.1)
               */
              protocol?: string;
              /**
               * Network priority.
               */
              priority?: "low" | "medium" | "high";
              /**
               * Connection identifier.
               */
              connectionIdentifier?: string;
              /**
               * Remote IP address.
               */
              remoteAddress?: string;
              /**
               * Refined HTTP request headers that were actually transmitted over the network.
               */
              requestHeaders?: Headers;
              /**
               * Total HTTP request header bytes sent over the network.
               */
              requestHeaderBytesSent?: number;
              /**
               * Total HTTP request body bytes sent over the network.
               */
              requestBodyBytesSent?: number;
              /**
               * Total HTTP response header bytes received over the network.
               */
              responseHeaderBytesReceived?: number;
              /**
               * Total HTTP response body bytes received over the network.
               */
              responseBodyBytesReceived?: number;
              /**
               * Total decoded response body size in bytes.
               */
              responseBodyDecodedSize?: number;
              /**
               * Connection information for the completed request.
               */
              securityConnection?: Security.Connection;
          }
          /**
           * WebSocket request data.
           */
          interface WebSocketRequest {
              /**
               * HTTP response headers.
               */
              headers: Headers;
          }
          /**
           * WebSocket response data.
           */
          interface WebSocketResponse {
              /**
               * HTTP response status code.
               */
              status: number;
              /**
               * HTTP response status text.
               */
              statusText: string;
              /**
               * HTTP response headers.
               */
              headers: Headers;
          }
          /**
           * WebSocket frame data.
           */
          interface WebSocketFrame {
              /**
               * WebSocket frame opcode.
               */
              opcode: number;
              /**
               * WebSocket frame mask.
               */
              mask: boolean;
              /**
               * WebSocket frame payload data, binary frames (opcode = 2) are base64-encoded.
               */
              payloadData: string;
              /**
               * WebSocket frame payload length in bytes.
               */
              payloadLength: number;
          }
          /**
           * Information about the cached resource.
           */
          interface CachedResource {
              /**
               * Resource URL. This is the url of the original network request.
               */
              url: string;
              /**
               * Type of this resource.
               */
              type: Page.ResourceType;
              /**
               * Cached response data.
               */
              response?: Response;
              /**
               * Cached response body size.
               */
              bodySize: number;
              /**
               * URL of source map associated with this resource (if any).
               */
              sourceMapURL?: string;
          }
          /**
           * Information about the request initiator.
           */
          interface Initiator {
              /**
               * Type of this initiator.
               */
              type: "parser" | "script" | "other";
              /**
               * Initiator JavaScript stack trace, set for Script only.
               */
              stackTrace?: Console.CallFrame[];
              /**
               * Initiator URL, set for Parser type only.
               */
              url?: string;
              /**
               * Initiator line number, set for Parser type only.
               */
              lineNumber?: number;
              /**
               * Set if the load was triggered by a DOM node, in addition to the other initiator information.
               */
              nodeId?: DOM.NodeId;
          }
          /**
           * Different stages of a network request.
           */
          type NetworkStage = "response";
          /**
           * Fired when page is about to send HTTP request.
           */
          type requestWillBeSentPayload = {
              /**
               * Request identifier.
               */
              requestId: RequestId;
              /**
               * Frame identifier.
               */
              frameId: FrameId;
              /**
               * Loader identifier.
               */
              loaderId: LoaderId;
              /**
               * URL of the document this request is loaded for.
               */
              documentURL: string;
              /**
               * Request data.
               */
              request: Request;
              timestamp: Timestamp;
              walltime: Walltime;
              /**
               * Request initiator.
               */
              initiator: Initiator;
              /**
               * Redirect response data.
               */
              redirectResponse?: Response;
              /**
               * Resource type.
               */
              type?: Page.ResourceType;
              /**
               * Identifier for the context of where the load originated. In general this is the target identifier. For Workers this will be the workerId.
               */
              targetId?: string;
          };
          /**
           * Fired when HTTP response is available.
           */
          type responseReceivedPayload = {
              /**
               * Request identifier.
               */
              requestId: RequestId;
              /**
               * Frame identifier.
               */
              frameId: FrameId;
              /**
               * Loader identifier.
               */
              loaderId: LoaderId;
              /**
               * Timestamp.
               */
              timestamp: Timestamp;
              /**
               * Resource type.
               */
              type: Page.ResourceType;
              /**
               * Response data.
               */
              response: Response;
          };
          /**
           * Fired when data chunk was received over the network.
           */
          type dataReceivedPayload = {
              /**
               * Request identifier.
               */
              requestId: RequestId;
              /**
               * Timestamp.
               */
              timestamp: Timestamp;
              /**
               * Data chunk length.
               */
              dataLength: number;
              /**
               * Actual bytes received (might be less than dataLength for compressed encodings).
               */
              encodedDataLength: number;
          };
          /**
           * Fired when HTTP request has finished loading.
           */
          type loadingFinishedPayload = {
              /**
               * Request identifier.
               */
              requestId: RequestId;
              /**
               * Timestamp.
               */
              timestamp: Timestamp;
              /**
               * URL of source map associated with this resource (if any).
               */
              sourceMapURL?: string;
              /**
               * Network metrics.
               */
              metrics?: Metrics;
          };
          /**
           * Fired when HTTP request has failed to load.
           */
          type loadingFailedPayload = {
              /**
               * Request identifier.
               */
              requestId: RequestId;
              /**
               * Timestamp.
               */
              timestamp: Timestamp;
              /**
               * User friendly error message.
               */
              errorText: string;
              /**
               * True if loading was canceled.
               */
              canceled?: boolean;
          };
          /**
           * Fired when HTTP request has been served from memory cache.
           */
          type requestServedFromMemoryCachePayload = {
              /**
               * Request identifier.
               */
              requestId: RequestId;
              /**
               * Frame identifier.
               */
              frameId: FrameId;
              /**
               * Loader identifier.
               */
              loaderId: LoaderId;
              /**
               * URL of the document this request is loaded for.
               */
              documentURL: string;
              /**
               * Timestamp.
               */
              timestamp: Timestamp;
              /**
               * Request initiator.
               */
              initiator: Initiator;
              /**
               * Cached resource data.
               */
              resource: CachedResource;
          };
          /**
           * Fired when HTTP response has been intercepted. The frontend must response with <code>Network.interceptContinue</code> or <code>Network.interceptWithRespons</code>` to continue this response.
           */
          type responseInterceptedPayload = {
              /**
               * Identifier for this intercepted network. Corresponds with an earlier <code>Network.requestWillBeSent</code>.
               */
              requestId: RequestId;
              /**
               * Original response content that would proceed if this is continued.
               */
              response: Response;
          };
          /**
           * Fired when HTTP request has been intercepted. The frontend must response with <code>Network.interceptContinue</code> or <code>Network.interceptWithRespons</code>` to continue this response.
           */
          type requestInterceptedPayload = {
              /**
               * Identifier for this intercepted network. Corresponds with an earlier <code>Network.requestWillBeSent</code>.
               */
              requestId: RequestId;
              /**
               * Original request content that would proceed if this is continued.
               */
              request: Request;
          };
          /**
           * Fired when WebSocket is about to initiate handshake.
           */
          type webSocketWillSendHandshakeRequestPayload = {
              /**
               * Request identifier.
               */
              requestId: RequestId;
              timestamp: Timestamp;
              walltime: Walltime;
              /**
               * WebSocket request data.
               */
              request: WebSocketRequest;
          };
          /**
           * Fired when WebSocket handshake response becomes available.
           */
          type webSocketHandshakeResponseReceivedPayload = {
              /**
               * Request identifier.
               */
              requestId: RequestId;
              timestamp: Timestamp;
              /**
               * WebSocket response data.
               */
              response: WebSocketResponse;
          };
          /**
           * Fired upon WebSocket creation.
           */
          type webSocketCreatedPayload = {
              /**
               * Request identifier.
               */
              requestId: RequestId;
              /**
               * WebSocket request URL.
               */
              url: string;
          };
          /**
           * Fired when WebSocket is closed.
           */
          type webSocketClosedPayload = {
              /**
               * Request identifier.
               */
              requestId: RequestId;
              /**
               * Timestamp.
               */
              timestamp: Timestamp;
          };
          /**
           * Fired when WebSocket frame is received.
           */
          type webSocketFrameReceivedPayload = {
              /**
               * Request identifier.
               */
              requestId: RequestId;
              /**
               * Timestamp.
               */
              timestamp: Timestamp;
              /**
               * WebSocket response data.
               */
              response: WebSocketFrame;
          };
          /**
           * Fired when WebSocket frame error occurs.
           */
          type webSocketFrameErrorPayload = {
              /**
               * Request identifier.
               */
              requestId: RequestId;
              /**
               * Timestamp.
               */
              timestamp: Timestamp;
              /**
               * WebSocket frame error message.
               */
              errorMessage: string;
          };
          /**
           * Fired when WebSocket frame is sent.
           */
          type webSocketFrameSentPayload = {
              /**
               * Request identifier.
               */
              requestId: RequestId;
              /**
               * Timestamp.
               */
              timestamp: Timestamp;
              /**
               * WebSocket response data.
               */
              response: WebSocketFrame;
          };
          /**
           * Enables network tracking, network events will now be delivered to the client.
           */
          type enableParameters = {};
          type enableReturnValue = {};
          /**
           * Disables network tracking, prevents network events from being sent to the client.
           */
          type disableParameters = {};
          type disableReturnValue = {};
          /**
           * Specifies whether to always send extra HTTP headers with the requests from this page.
           */
          type setExtraHTTPHeadersParameters = {
              /**
               * Map with extra HTTP headers.
               */
              headers: Headers;
          };
          type setExtraHTTPHeadersReturnValue = {};
          /**
           * Returns content served for the given request.
           */
          type getResponseBodyParameters = {
              /**
               * Identifier of the network request to get content for.
               */
              requestId: RequestId;
          };
          type getResponseBodyReturnValue = {
              /**
               * Response body.
               */
              body: string;
              /**
               * True, if content was sent as base64.
               */
              base64Encoded: boolean;
          };
          /**
           * Toggles whether the resource cache may be used when loading resources in the inspected page. If <code>true</code>, the resource cache will not be used when loading resources.
           */
          type setResourceCachingDisabledParameters = {
              /**
               * Whether to prevent usage of the resource cache.
               */
              disabled: boolean;
          };
          type setResourceCachingDisabledReturnValue = {};
          /**
           * Loads a resource in the context of a frame on the inspected page without cross origin checks.
           */
          type loadResourceParameters = {
              /**
               * Frame to load the resource from.
               */
              frameId: FrameId;
              /**
               * URL of the resource to load.
               */
              url: string;
          };
          type loadResourceReturnValue = {
              /**
               * Resource content.
               */
              content: string;
              /**
               * Resource mimeType.
               */
              mimeType: string;
              /**
               * HTTP response status code.
               */
              status: number;
          };
          /**
           * Fetches a serialized secure certificate for the given requestId to be displayed via InspectorFrontendHost.showCertificate.
           */
          type getSerializedCertificateParameters = {
              requestId: RequestId;
          };
          type getSerializedCertificateReturnValue = {
              /**
               * Represents a base64 encoded WebCore::CertificateInfo object.
               */
              serializedCertificate: string;
          };
          /**
           * Resolves JavaScript WebSocket object for given request id.
           */
          type resolveWebSocketParameters = {
              /**
               * Identifier of the WebSocket resource to resolve.
               */
              requestId: RequestId;
              /**
               * Symbolic group name that can be used to release multiple objects.
               */
              objectGroup?: string;
          };
          type resolveWebSocketReturnValue = {
              /**
               * JavaScript object wrapper for given node.
               */
              object: Runtime.RemoteObject;
          };
          /**
           * Enable interception of network requests.
           */
          type setInterceptionEnabledParameters = {
              enabled: boolean;
              interceptRequests?: boolean;
          };
          type setInterceptionEnabledReturnValue = {};
          /**
           * Add an interception.
           */
          type addInterceptionParameters = {
              url: string;
              /**
               * If false, ignores letter casing of `url` parameter.
               */
              caseSensitive?: boolean;
              /**
               * If true, treats `url` parameter as a regular expression.
               */
              isRegex?: boolean;
              /**
               * If not present this applies to all network stages.
               */
              stage?: NetworkStage;
          };
          type addInterceptionReturnValue = {};
          /**
           * Remove an interception.
           */
          type removeInterceptionParameters = {
              url: string;
              /**
               * If false, ignores letter casing of `url` parameter.
               */
              caseSensitive?: boolean;
              /**
               * If true, treats `url` parameter as a regular expression.
               */
              isRegex?: boolean;
              /**
               * If not present this applies to all network stages.
               */
              stage?: NetworkStage;
          };
          type removeInterceptionReturnValue = {};
          /**
           * Continue an interception with no modifications.
           */
          type interceptContinueParameters = {
              /**
               * Identifier for the intercepted Network request or response to continue.
               */
              requestId: RequestId;
              /**
               * HTTP request method.
               */
              method?: string;
              /**
               * HTTP response headers. Pass through original values if unmodified.
               */
              headers?: Headers;
              /**
               * HTTP POST request data.
               */
              postData?: string;
          };
          type interceptContinueReturnValue = {};
          /**
           * Abort the intercepted request with given reason.
           */
          type interceptAsErrorParameters = {
              /**
               * Identifier for the intercepted Network request.
               */
              requestId: RequestId;
              /**
               * Deliver error reason for the request.
               */
              reason: string;
          };
          type interceptAsErrorReturnValue = {};
          /**
           * Provide response content for an intercepted response.
           */
          type interceptWithResponseParameters = {
              /**
               * Identifier for the intercepted Network response to modify.
               */
              requestId: RequestId;
              content?: string;
              /**
               * True, if content was sent as base64.
               */
              base64Encoded?: boolean;
              /**
               * MIME Type for the data.
               */
              mimeType?: string;
              /**
               * HTTP response status code. Pass through original values if unmodified.
               */
              status?: number;
              /**
               * HTTP response status text. Pass through original values if unmodified.
               */
              statusText?: string;
              /**
               * HTTP response headers. Pass through original values if unmodified.
               */
              headers?: Headers;
          };
          type interceptWithResponseReturnValue = {};
          /**
           * Emulate offline state overriding the actual state.
           */
          type setEmulateOfflineStateParameters = {
              /**
               * True to emulate offline.
               */
              offline: boolean;
          };
          type setEmulateOfflineStateReturnValue = {};
      }
      /**
       * Actions and events related to the inspected page belong to the page domain.
       */
      module Page {
          /**
           * List of settings able to be overridden by WebInspector. Keep this in sync with FOR_EACH_INSPECTOR_OVERRIDE_SETTING.
           */
          type Setting = "AuthorAndUserStylesEnabled" | "ICECandidateFilteringEnabled" | "ImagesEnabled" | "MediaCaptureRequiresSecureConnection" | "MockCaptureDevicesEnabled" | "NeedsSiteSpecificQuirks" | "ScriptEnabled" | "ShowDebugBorders" | "ShowRepaintCounter" | "WebRTCEncryptionEnabled" | "WebSecurityEnabled";
          /**
           * Resource type as it was perceived by the rendering engine.
           */
          type ResourceType = "Document" | "StyleSheet" | "Image" | "Font" | "Script" | "XHR" | "Fetch" | "Ping" | "Beacon" | "WebSocket" | "Other";
          /**
           * Coordinate system used by supplied coordinates.
           */
          type CoordinateSystem = "Viewport" | "Page";
          /**
           * Same-Site policy of a cookie.
           */
          type CookieSameSitePolicy = "None" | "Lax" | "Strict";
          /**
           * Page appearance name.
           */
          type Appearance = "Light" | "Dark";
          /**
           * Information about the Frame on the page.
           */
          interface Frame {
              /**
               * Frame unique identifier.
               */
              id: string;
              /**
               * Parent frame identifier.
               */
              parentId?: string;
              /**
               * Identifier of the loader associated with this frame.
               */
              loaderId: Network.LoaderId;
              /**
               * Frame's name as specified in the tag.
               */
              name?: string;
              /**
               * Frame document's URL.
               */
              url: string;
              /**
               * Frame document's security origin.
               */
              securityOrigin: string;
              /**
               * Frame document's mimeType as determined by the browser.
               */
              mimeType: string;
          }
          interface FrameResource {
              /**
               * Resource URL.
               */
              url: string;
              /**
               * Type of this resource.
               */
              type: ResourceType;
              /**
               * Resource mimeType as determined by the browser.
               */
              mimeType: string;
              /**
               * True if the resource failed to load.
               */
              failed?: boolean;
              /**
               * True if the resource was canceled during loading.
               */
              canceled?: boolean;
              /**
               * URL of source map associated with this resource (if any).
               */
              sourceMapURL?: string;
              /**
               * Identifier for the context of where the load originated. In general this is the target identifier. For Workers this will be the workerId.
               */
              targetId?: string;
          }
          /**
           * Information about the Frame hierarchy along with their cached resources.
           */
          interface FrameResourceTree {
              /**
               * Frame information for this tree item.
               */
              frame: Frame;
              /**
               * Child frames.
               */
              childFrames?: FrameResourceTree[];
              /**
               * Information about frame resources.
               */
              resources: FrameResource[];
          }
          /**
           * Search result for resource.
           */
          interface SearchResult {
              /**
               * Resource URL.
               */
              url: string;
              /**
               * Resource frame id.
               */
              frameId: Network.FrameId;
              /**
               * Number of matches in the resource content.
               */
              matchesCount: number;
              /**
               * Network request id.
               */
              requestId?: Network.RequestId;
          }
          /**
           * Cookie object
           */
          interface Cookie {
              /**
               * Cookie name.
               */
              name: string;
              /**
               * Cookie value.
               */
              value: string;
              /**
               * Cookie domain.
               */
              domain: string;
              /**
               * Cookie path.
               */
              path: string;
              /**
               * Cookie expires.
               */
              expires: number;
              /**
               * Cookie size.
               */
              size: number;
              /**
               * True if cookie is http-only.
               */
              httpOnly: boolean;
              /**
               * True if cookie is secure.
               */
              secure: boolean;
              /**
               * True in case of session cookie.
               */
              session: boolean;
              /**
               * Cookie Same-Site policy.
               */
              sameSite: CookieSameSitePolicy;
          }
          /**
           * Accessibility Node
           */
          interface AXNode {
              /**
               * The role.
               */
              role: string;
              /**
               * A human readable name for the node.
               */
              name?: string;
              /**
               * The current value of the node.
               */
              value?: any;
              /**
               * An additional human readable description of the node.
               */
              description?: string;
              /**
               * Keyboard shortcuts associated with this node.
               */
              keyshortcuts?: string;
              /**
               * A human readable alternative to the role.
               */
              roledescription?: string;
              /**
               * A description of the current value.
               */
              valuetext?: string;
              /**
               * Whether the node is disabled.
               */
              disabled?: boolean;
              /**
               * Whether the node is expanded or collapsed.
               */
              expanded?: boolean;
              /**
               * Whether the node is focused.
               */
              focused?: boolean;
              /**
               * Whether the node is modal.
               */
              modal?: boolean;
              /**
               * Whether the node text input supports multiline.
               */
              multiline?: boolean;
              /**
               * Whether more than one child can be selected.
               */
              multiselectable?: boolean;
              /**
               * Whether the node is read only.
               */
              readonly?: boolean;
              /**
               * Whether the node is required.
               */
              required?: boolean;
              /**
               * Whether the node is selected in its parent node.
               */
              selected?: boolean;
              /**
               * Whether the checkbox is checked, or "mixed".
               */
              checked?: "true" | "false" | "mixed";
              /**
               * Whether the toggle button is checked, or "mixed".
               */
              pressed?: "true" | "false" | "mixed";
              /**
               * The level of a heading.
               */
              level?: number;
              /**
               * The minimum value in a node.
               */
              valuemin?: number;
              /**
               * The maximum value in a node.
               */
              valuemax?: number;
              /**
               * What kind of autocomplete is supported by a control.
               */
              autocomplete?: string;
              /**
               * What kind of popup is currently being shown for a node.
               */
              haspopup?: string;
              /**
               * Whether and in what way this node's value is invalid.
               */
              invalid?: "true" | "false" | "grammar" | "spelling";
              /**
               * Whether the node is oriented horizontally or vertically.
               */
              orientation?: string;
              /**
               * Whether the node is focusable.
               */
              focusable?: boolean;
              /**
               * Child AXNodes of this node, if any.
               */
              children?: AXNode[];
              /**
               * True if this AXNode corresponds with the ObjectId passed into acessibilitySnapshot.
               */
              found?: boolean;
          }
          type domContentEventFiredPayload = {
              timestamp: number;
              /**
               * Id of the frame that has fired DOMContentLoaded event.
               */
              frameId: Network.FrameId;
          };
          type loadEventFiredPayload = {
              timestamp: number;
              /**
               * Id of the frame that has fired load event.
               */
              frameId: Network.FrameId;
          };
          /**
           * Fired once navigation of the frame has completed. Frame is now associated with the new loader.
           */
          type frameNavigatedPayload = {
              /**
               * Frame object.
               */
              frame: Frame;
          };
          /**
           * Fired when frame has been attached to its parent.
           */
          type frameAttachedPayload = {
              /**
               * Id of the frame that has been detached.
               */
              frameId: Network.FrameId;
              /**
               * Parent frame id if non-root.
               */
              parentFrameId?: Network.FrameId;
          };
          /**
           * Fired when frame has been detached from its parent.
           */
          type frameDetachedPayload = {
              /**
               * Id of the frame that has been detached.
               */
              frameId: Network.FrameId;
          };
          /**
           * Fired when frame has started loading.
           */
          type frameStartedLoadingPayload = {
              /**
               * Id of the frame that has started loading.
               */
              frameId: Network.FrameId;
          };
          /**
           * Fired when frame has stopped loading.
           */
          type frameStoppedLoadingPayload = {
              /**
               * Id of the frame that has stopped loading.
               */
              frameId: Network.FrameId;
          };
          /**
           * Fired when frame schedules a potential navigation.
           */
          type frameScheduledNavigationPayload = {
              /**
               * Id of the frame that has scheduled a navigation.
               */
              frameId: Network.FrameId;
              /**
               * Delay (in seconds) until the navigation is scheduled to begin. The navigation is not guaranteed to start.
               */
              delay: number;
          };
          /**
           * Fired when frame no longer has a scheduled navigation.
           */
          type frameClearedScheduledNavigationPayload = {
              /**
               * Id of the frame that has cleared its scheduled navigation.
               */
              frameId: Network.FrameId;
          };
          /**
           * Fired when same-document navigation happens, e.g. due to history API usage or anchor navigation.
           */
          type navigatedWithinDocumentPayload = {
              /**
               * Id of the frame.
               */
              frameId: Network.FrameId;
              /**
               * Frame's new url.
               */
              url: string;
          };
          /**
           * Fired when page's default appearance changes, even if there is a forced appearance.
           */
          type defaultAppearanceDidChangePayload = {
              /**
               * Name of the appearance that is active (not considering any forced appearance.)
               */
              appearance: Appearance;
          };
          /**
           * Fired when the page shows file chooser for it's <input type=file>.
           */
          type fileChooserOpenedPayload = {
              /**
               * Frame where file chooser is opened.
               */
              frameId: Network.FrameId;
              /**
               * Input element.
               */
              element: Runtime.RemoteObject;
          };
          /**
           * Enables page domain notifications.
           */
          type enableParameters = {};
          type enableReturnValue = {};
          /**
           * Disables page domain notifications.
           */
          type disableParameters = {};
          type disableReturnValue = {};
          /**
           * Reloads the main frame of the inspected page.
           */
          type reloadParameters = {
              /**
               * If true, the page is reloaded from its origin without using cached resources.
               */
              ignoreCache?: boolean;
              /**
               * If true, all cached subresources will be revalidated when the main resource loads. Otherwise, only expired cached subresources will be revalidated (the default behavior for most WebKit clients).
               */
              revalidateAllResources?: boolean;
          };
          type reloadReturnValue = {};
          /**
           * Goes back in the history.
           */
          type goBackParameters = {};
          type goBackReturnValue = {};
          /**
           * Goes forward in the history.
           */
          type goForwardParameters = {};
          type goForwardReturnValue = {};
          /**
           * Navigates current page to the given URL.
           */
          type navigateParameters = {
              /**
               * URL to navigate the page to.
               */
              url: string;
              /**
               * Id of the frame to navigate.
               */
              frameId?: Network.FrameId;
              /**
               * Referrer URL.
               */
              referrer?: string;
          };
          type navigateReturnValue = {};
          /**
           * Override's the user agent of the inspected page
           */
          type overrideUserAgentParameters = {
              /**
               * Value to override the user agent with. If this value is not provided, the override is removed. Overrides are removed when Web Inspector closes/disconnects.
               */
              value?: string;
          };
          type overrideUserAgentReturnValue = {};
          /**
           * Allows the frontend to override the inspected page's settings.
           */
          type overrideSettingParameters = {
              setting: Setting;
              /**
               * Value to override the setting with. If this value is not provided, the override is removed. Overrides are removed when Web Inspector closes/disconnects.
               */
              value?: boolean;
          };
          type overrideSettingReturnValue = {};
          /**
           * Returns all browser cookies. Depending on the backend support, will return detailed cookie information in the <code>cookies</code> field.
           */
          type getCookiesParameters = {};
          type getCookiesReturnValue = {
              /**
               * Array of cookie objects.
               */
              cookies: Cookie[];
          };
          /**
           * Deletes browser cookie with given name, domain and path.
           */
          type deleteCookieParameters = {
              /**
               * Name of the cookie to remove.
               */
              cookieName: string;
              /**
               * URL to match cookie domain and path.
               */
              url: string;
          };
          type deleteCookieReturnValue = {};
          /**
           * Returns present frame / resource tree structure.
           */
          type getResourceTreeParameters = {};
          type getResourceTreeReturnValue = {
              /**
               * Present frame / resource tree structure.
               */
              frameTree: FrameResourceTree;
          };
          /**
           * Returns content of the given resource.
           */
          type getResourceContentParameters = {
              /**
               * Frame id to get resource for.
               */
              frameId: Network.FrameId;
              /**
               * URL of the resource to get content for.
               */
              url: string;
          };
          type getResourceContentReturnValue = {
              /**
               * Resource content.
               */
              content: string;
              /**
               * True, if content was served as base64.
               */
              base64Encoded: boolean;
          };
          type setBootstrapScriptParameters = {
              /**
               * If `source` is provided (and not empty), it will be injected into all future global objects as soon as they're created. Omitting `source` will stop this from happening.
               */
              source?: string;
          };
          type setBootstrapScriptReturnValue = {};
          /**
           * Searches for given string in resource content.
           */
          type searchInResourceParameters = {
              /**
               * Frame id for resource to search in.
               */
              frameId: Network.FrameId;
              /**
               * URL of the resource to search in.
               */
              url: string;
              /**
               * String to search for.
               */
              query: string;
              /**
               * If true, search is case sensitive.
               */
              caseSensitive?: boolean;
              /**
               * If true, treats string parameter as regex.
               */
              isRegex?: boolean;
              /**
               * Request id for resource to search in.
               */
              requestId?: Network.RequestId;
          };
          type searchInResourceReturnValue = {
              /**
               * List of search matches.
               */
              result: GenericTypes.SearchMatch[];
          };
          /**
           * Searches for given string in frame / resource tree structure.
           */
          type searchInResourcesParameters = {
              /**
               * String to search for.
               */
              text: string;
              /**
               * If true, search is case sensitive.
               */
              caseSensitive?: boolean;
              /**
               * If true, treats string parameter as regex.
               */
              isRegex?: boolean;
          };
          type searchInResourcesReturnValue = {
              /**
               * List of search results.
               */
              result: SearchResult[];
          };
          /**
           * Requests that backend draw rulers in the inspector overlay
           */
          type setShowRulersParameters = {
              /**
               * True for showing rulers
               */
              result: boolean;
          };
          type setShowRulersReturnValue = {};
          /**
           * Requests that backend shows paint rectangles
           */
          type setShowPaintRectsParameters = {
              /**
               * True for showing paint rectangles
               */
              result: boolean;
          };
          type setShowPaintRectsReturnValue = {};
          /**
           * Emulates the given media for CSS media queries.
           */
          type setEmulatedMediaParameters = {
              /**
               * Media type to emulate. Empty string disables the override.
               */
              media: string;
          };
          type setEmulatedMediaReturnValue = {};
          /**
           * Forces the given appearance for the page.
           */
          type setForcedAppearanceParameters = {
              /**
               * Appearance name to force. Empty string disables the override.
               */
              appearance: Appearance;
          };
          type setForcedAppearanceReturnValue = {};
          /**
           * Enables time zone emulation.
           */
          type setTimeZoneParameters = {
              timeZone?: string;
          };
          type setTimeZoneReturnValue = {};
          /**
           * Enables touch events on platforms that lack them.
           */
          type setTouchEmulationEnabledParameters = {
              /**
               * Whether touch should be enabled.
               */
              enabled: boolean;
          };
          type setTouchEmulationEnabledReturnValue = {};
          /**
           * Capture a snapshot of the specified node that does not include unrelated layers.
           */
          type snapshotNodeParameters = {
              /**
               * Id of the node to snapshot.
               */
              nodeId: DOM.NodeId;
          };
          type snapshotNodeReturnValue = {
              /**
               * Base64-encoded image data (PNG).
               */
              dataURL: string;
          };
          /**
           * Capture a snapshot of the page within the specified rectangle and coordinate system.
           */
          type snapshotRectParameters = {
              /**
               * X coordinate
               */
              x: number;
              /**
               * Y coordinate
               */
              y: number;
              /**
               * Rectangle width
               */
              width: number;
              /**
               * Rectangle height
               */
              height: number;
              /**
               * Indicates the coordinate system of the supplied rectangle.
               */
              coordinateSystem: CoordinateSystem;
          };
          type snapshotRectReturnValue = {
              /**
               * Base64-encoded image data (PNG).
               */
              dataURL: string;
          };
          /**
           * Grab an archive of the page.
           */
          type archiveParameters = {};
          type archiveReturnValue = {
              /**
               * Base64-encoded web archive.
               */
              data: string;
          };
          /**
           * Insert text into the current selection of the page.
           */
          type insertTextParameters = {
              /**
               * Text to insert.
               */
              text: string;
          };
          type insertTextReturnValue = {};
          /**
           * Serializes and returns all of the accessibility nodes of the page.
           */
          type accessibilitySnapshotParameters = {
              /**
               * Object Id of a node to find in the accessibility tree.
               */
              objectId?: string;
          };
          type accessibilitySnapshotReturnValue = {
              /**
               * The root AXNode.
               */
              axNode: AXNode;
          };
          /**
           * Intercepts file chooser dialog
           */
          type setInterceptFileChooserDialogParameters = {
              /**
               * True to enable.
               */
              enabled: boolean;
          };
          type setInterceptFileChooserDialogReturnValue = {};
          /**
           * Sets or clears an override of the default background color of the frame. This override is used if the content does not specify one.
           */
          type setDefaultBackgroundColorOverrideParameters = {
              /**
               * RGBA of the default background color. If not specified, any existing override will be cleared.
               */
              color?: DOM.RGBAColor;
          };
          type setDefaultBackgroundColorOverrideReturnValue = {};
          /**
           * Creates an user world for every loaded frame.
           */
          type createUserWorldParameters = {
              /**
               * Isolated world name, will be used as an execution context name.
               */
              name: string;
          };
          type createUserWorldReturnValue = {};
          /**
           * Enable page Content Security Policy by-passing.
           */
          type setBypassCSPParameters = {
              /**
               * Whether to bypass page CSP.
               */
              enabled: boolean;
          };
          type setBypassCSPReturnValue = {};
          /**
           * Crashes the page process
           */
          type crashParameters = {};
          type crashReturnValue = {};
          /**
           * Overrides screen size with provided values.
           */
          type setScreenSizeOverrideParameters = {
              width: number;
              height: number;
          };
          type setScreenSizeOverrideReturnValue = {};
      }
      module Playwright {
          /**
           * Id of Browser context.
           */
          type ContextID = string;
          /**
           * Id of WebPageProxy.
           */
          type PageProxyID = string;
          /**
           * Tab info object
           */
          interface PageProxyInfo {
              pageProxyId: PageProxyID;
              /**
               * Unique identifier of the context.
               */
              browserContextId: ContextID;
              /**
               * Unique identifier of the opening page. Only set for pages created by window.open().
               */
              openerId?: PageProxyID;
          }
          /**
           * Same-Site policy of a cookie.
           */
          type CookieSameSitePolicy = "None" | "Lax" | "Strict";
          /**
           * Cookie object
           */
          interface Cookie {
              /**
               * Cookie name.
               */
              name: string;
              /**
               * Cookie value.
               */
              value: string;
              /**
               * Cookie domain.
               */
              domain: string;
              /**
               * Cookie path.
               */
              path: string;
              /**
               * Cookie expires.
               */
              expires: number;
              /**
               * True if cookie is http-only.
               */
              httpOnly: boolean;
              /**
               * True if cookie is secure.
               */
              secure: boolean;
              /**
               * True if cookie is session cookie.
               */
              session: boolean;
              /**
               * Cookie Same-Site policy.
               */
              sameSite: CookieSameSitePolicy;
          }
          /**
           * Cookie object
           */
          interface SetCookieParam {
              /**
               * Cookie name.
               */
              name: string;
              /**
               * Cookie value.
               */
              value: string;
              /**
               * Cookie domain.
               */
              domain: string;
              /**
               * Cookie path.
               */
              path: string;
              /**
               * Cookie expires.
               */
              expires?: number;
              /**
               * True if cookie is http-only.
               */
              httpOnly?: boolean;
              /**
               * True if cookie is secure.
               */
              secure?: boolean;
              /**
               * True if cookie is session cookie.
               */
              session?: boolean;
              /**
               * Cookie Same-Site policy.
               */
              sameSite?: CookieSameSitePolicy;
          }
          /**
           * Geolocation
           */
          interface Geolocation {
              /**
               * Mock latitude
               */
              timestamp: number;
              /**
               * Mock latitude
               */
              latitude: number;
              /**
               * Mock longitude
               */
              longitude: number;
              /**
               * Mock accuracy
               */
              accuracy: number;
          }
          type pageProxyCreatedPayload = {
              pageProxyInfo: PageProxyInfo;
          };
          type pageProxyDestroyedPayload = {
              pageProxyId: PageProxyID;
          };
          /**
           * Fired when page opens a new window.
           */
          type windowOpenPayload = {
              /**
               * Unique identifier of the page proxy.
               */
              pageProxyId: PageProxyID;
              url: string;
              windowFeatures: string[];
          };
          /**
           * Fired when provisional load fails.
           */
          type provisionalLoadFailedPayload = {
              /**
               * Unique identifier of the page proxy.
               */
              pageProxyId: PageProxyID;
              /**
               * Identifier of the loader associated with the navigation.
               */
              loaderId: Network.LoaderId;
              /**
               * Localized error string.
               */
              error: string;
          };
          /**
           * Close browser.
           */
          type closeParameters = {};
          type closeReturnValue = {};
          /**
           * Creates new ephemeral browser context.
           */
          type createContextParameters = {};
          type createContextReturnValue = {
              /**
               * Unique identifier of the context.
               */
              browserContextId: ContextID;
          };
          /**
           * Deletes browser context previously created with createContect. The command will automatically close all pages that use the context.
           */
          type deleteContextParameters = {
              /**
               * Identifier of the context to delete.
               */
              browserContextId: ContextID;
          };
          type deleteContextReturnValue = {};
          type createPageParameters = {
              /**
               * JSON Inspector Protocol message (command) to be dispatched on the backend.
               */
              browserContextId?: ContextID;
          };
          type createPageReturnValue = {
              /**
               * Unique identifier of the page proxy.
               */
              pageProxyId: PageProxyID;
          };
          /**
           * Navigates current page to the given URL.
           */
          type navigateParameters = {
              /**
               * URL to navigate the page to.
               */
              url: string;
              /**
               * Unique identifier of the page proxy.
               */
              pageProxyId: PageProxyID;
              /**
               * Id of the frame to navigate.
               */
              frameId?: Network.FrameId;
              /**
               * Referrer URL.
               */
              referrer?: string;
          };
          type navigateReturnValue = {
              /**
               * Identifier of the loader associated with the navigation.
               */
              loaderId?: Network.LoaderId;
          };
          /**
           * Change whether all certificate errors should be ignored.
           */
          type setIgnoreCertificateErrorsParameters = {
              /**
               * Browser context id.
               */
              browserContextId?: ContextID;
              ignore: boolean;
          };
          type setIgnoreCertificateErrorsReturnValue = {};
          /**
           * Returns all cookies in the given browser context.
           */
          type getAllCookiesParameters = {
              /**
               * Browser context id.
               */
              browserContextId?: ContextID;
          };
          type getAllCookiesReturnValue = {
              /**
               * Cookies.
               */
              cookies: Cookie[];
          };
          /**
           * Sets cookies in the given browser context.
           */
          type setCookiesParameters = {
              /**
               * Browser context id.
               */
              browserContextId?: ContextID;
              /**
               * Cookies.
               */
              cookies: SetCookieParam[];
          };
          type setCookiesReturnValue = {};
          /**
           * Deletes cookies in the given browser context.
           */
          type deleteAllCookiesParameters = {
              /**
               * Browser context id.
               */
              browserContextId?: ContextID;
          };
          type deleteAllCookiesReturnValue = {};
          /**
           * Overrides the geolocation position or error.
           */
          type setGeolocationOverrideParameters = {
              /**
               * Browser context id.
               */
              browserContextId?: ContextID;
              /**
               * Geolocation to set, if missing emulates position unavailable.
               */
              geolocation?: Geolocation;
          };
          type setGeolocationOverrideReturnValue = {};
          /**
           * Allows to set locale language for context.
           */
          type setLanguagesParameters = {
              languages: string[];
              /**
               * Browser context id.
               */
              browserContextId?: ContextID;
          };
          type setLanguagesReturnValue = {};
      }
      /**
       * General types used for recordings of actions performed in the inspected page.
       */
      module Recording {
          /**
           * The type of the recording.
           */
          type Type = "canvas-2d" | "canvas-bitmaprenderer" | "canvas-webgl" | "canvas-webgl2";
          type Initiator = "frontend" | "console" | "auto-capture";
          /**
           * Information about the initial state of the recorded object.
           */
          interface InitialState {
              /**
               * Key-value map for each attribute of the state.
               */
              attributes?: {
                  [key: string]: string;
              };
              /**
               * Array of saved states of the context.
               */
              states?: {
                  [key: string]: string;
              }[];
              /**
               * Array of values that were used to construct the recorded object.
               */
              parameters?: any[];
              /**
               * Current content at the start of the recording.
               */
              content?: string;
          }
          /**
           * Container object for a single frame of the recording.
           */
          interface Frame {
              /**
               * Information about an action made to the recorded object. Follows the structure [name, parameters, swizzleTypes, trace], where name is a string, parameters is an array, swizzleTypes is an array, and trace is an array.
               */
              actions: any[];
              /**
               * Total execution time of all actions recorded in this frame in milliseconds.
               */
              duration?: number;
              /**
               * Flag indicating if the recording was stopped before this frame ended.
               */
              incomplete?: boolean;
          }
          interface Recording {
              /**
               * Used for future/backwards compatibility.
               */
              version: number;
              type: Type;
              /**
               * JSON data of inital state of object before recording.
               */
              initialState: InitialState;
              /**
               * Array of objects that can be referenced by index. Used to avoid duplicating objects.
               */
              data: any[];
              name?: string;
          }
      }
      /**
       * Runtime domain exposes JavaScript runtime by means of remote evaluation and mirror objects. Evaluation results are returned as mirror object that expose object type, string representation and unique identifier that can be used for further object reference. Original objects are maintained in memory unless they are either explicitly released or are released along with the other objects in their object group.
       */
      module Runtime {
          /**
           * Unique object identifier.
           */
          type RemoteObjectId = string;
          /**
           * Mirror object referencing original JavaScript object.
           */
          interface RemoteObject {
              /**
               * Object type.
               */
              type: "object" | "function" | "undefined" | "string" | "number" | "boolean" | "symbol" | "bigint";
              /**
               * Object subtype hint. Specified for <code>object</code> <code>function</code> (for class) type values only.
               */
              subtype?: "array" | "null" | "node" | "regexp" | "date" | "error" | "map" | "set" | "weakmap" | "weakset" | "iterator" | "class" | "proxy";
              /**
               * Object class (constructor) name. Specified for <code>object</code> type values only.
               */
              className?: string;
              /**
               * Remote object value (in case of primitive values or JSON values if it was requested).
               */
              value?: any;
              /**
               * String representation of the object.
               */
              description?: string;
              /**
               * Unique object identifier (for non-primitive values).
               */
              objectId?: RemoteObjectId;
              /**
               * Size of the array/collection. Specified for array/map/set/weakmap/weakset object type values only.
               */
              size?: number;
              /**
               * Remote object for the class prototype. Specified for class object type values only.
               */
              classPrototype?: RemoteObject;
              /**
               * Preview containing abbreviated property values. Specified for <code>object</code> type values only.
               */
              preview?: ObjectPreview;
          }
          /**
           * Object containing abbreviated remote object value.
           */
          interface ObjectPreview {
              /**
               * Object type.
               */
              type: "object" | "function" | "undefined" | "string" | "number" | "boolean" | "symbol" | "bigint";
              /**
               * Object subtype hint. Specified for <code>object</code> type values only.
               */
              subtype?: "array" | "null" | "node" | "regexp" | "date" | "error" | "map" | "set" | "weakmap" | "weakset" | "iterator" | "class" | "proxy";
              /**
               * String representation of the object.
               */
              description?: string;
              /**
               * Determines whether preview is lossless (contains all information of the original object).
               */
              lossless: boolean;
              /**
               * True iff some of the properties of the original did not fit.
               */
              overflow?: boolean;
              /**
               * List of the properties.
               */
              properties?: PropertyPreview[];
              /**
               * List of the entries. Specified for <code>map</code> and <code>set</code> subtype values only.
               */
              entries?: EntryPreview[];
              /**
               * Size of the array/collection. Specified for array/map/set/weakmap/weakset object type values only.
               */
              size?: number;
          }
          interface PropertyPreview {
              /**
               * Property name.
               */
              name: string;
              /**
               * Object type.
               */
              type: "object" | "function" | "undefined" | "string" | "number" | "boolean" | "symbol" | "bigint" | "accessor";
              /**
               * Object subtype hint. Specified for <code>object</code> type values only.
               */
              subtype?: "array" | "null" | "node" | "regexp" | "date" | "error" | "map" | "set" | "weakmap" | "weakset" | "iterator" | "class" | "proxy";
              /**
               * User-friendly property value string.
               */
              value?: string;
              /**
               * Nested value preview.
               */
              valuePreview?: ObjectPreview;
              /**
               * True if this is an internal property.
               */
              internal?: boolean;
          }
          interface EntryPreview {
              /**
               * Entry key. Specified for map-like collection entries.
               */
              key?: ObjectPreview;
              /**
               * Entry value.
               */
              value: ObjectPreview;
          }
          interface CollectionEntry {
              /**
               * Entry key of a map-like collection, otherwise not provided.
               */
              key?: Runtime.RemoteObject;
              /**
               * Entry value.
               */
              value: Runtime.RemoteObject;
          }
          /**
           * Object property descriptor.
           */
          interface PropertyDescriptor {
              /**
               * Property name or symbol description.
               */
              name: string;
              /**
               * The value associated with the property.
               */
              value?: RemoteObject;
              /**
               * True if the value associated with the property may be changed (data descriptors only).
               */
              writable?: boolean;
              /**
               * A function which serves as a getter for the property, or <code>undefined</code> if there is no getter (accessor descriptors only).
               */
              get?: RemoteObject;
              /**
               * A function which serves as a setter for the property, or <code>undefined</code> if there is no setter (accessor descriptors only).
               */
              set?: RemoteObject;
              /**
               * True if the result was thrown during the evaluation.
               */
              wasThrown?: boolean;
              /**
               * True if the type of this property descriptor may be changed and if the property may be deleted from the corresponding object.
               */
              configurable?: boolean;
              /**
               * True if this property shows up during enumeration of the properties on the corresponding object.
               */
              enumerable?: boolean;
              /**
               * True if the property is owned for the object.
               */
              isOwn?: boolean;
              /**
               * Property symbol object, if the property is a symbol.
               */
              symbol?: Runtime.RemoteObject;
              /**
               * True if the property value came from a native getter.
               */
              nativeGetter?: boolean;
          }
          /**
           * Object internal property descriptor. This property isn't normally visible in JavaScript code.
           */
          interface InternalPropertyDescriptor {
              /**
               * Conventional property name.
               */
              name: string;
              /**
               * The value associated with the property.
               */
              value?: RemoteObject;
          }
          /**
           * Represents function call argument. Either remote object id <code>objectId</code> or primitive <code>value</code> or neither of (for undefined) them should be specified.
           */
          interface CallArgument {
              /**
               * Primitive value.
               */
              value?: any;
              /**
               * Remote object handle.
               */
              objectId?: RemoteObjectId;
          }
          /**
           * Id of an execution context.
           */
          type ExecutionContextId = number;
          /**
           * Type of the execution context.
           */
          type ExecutionContextType = "normal" | "user" | "internal";
          /**
           * Description of an isolated world.
           */
          interface ExecutionContextDescription {
              /**
               * Unique id of the execution context. It can be used to specify in which execution context script evaluation should be performed.
               */
              id: ExecutionContextId;
              type: ExecutionContextType;
              /**
               * Human readable name describing given context.
               */
              name: string;
              /**
               * Id of the owning frame.
               */
              frameId: Network.FrameId;
          }
          /**
           * Syntax error type: "none" for no error, "irrecoverable" for unrecoverable errors, "unterminated-literal" for when there is an unterminated literal, "recoverable" for when the expression is unfinished but valid so far.
           */
          type SyntaxErrorType = "none" | "irrecoverable" | "unterminated-literal" | "recoverable";
          /**
           * Range of an error in source code.
           */
          interface ErrorRange {
              /**
               * Start offset of range (inclusive).
               */
              startOffset: number;
              /**
               * End offset of range (exclusive).
               */
              endOffset: number;
          }
          interface StructureDescription {
              /**
               * Array of strings, where the strings represent object properties.
               */
              fields?: string[];
              /**
               * Array of strings, where the strings represent optional object properties.
               */
              optionalFields?: string[];
              /**
               * Name of the constructor.
               */
              constructorName?: string;
              /**
               * Pointer to the StructureRepresentation of the protoype if one exists.
               */
              prototypeStructure?: StructureDescription;
              /**
               * If true, it indicates that the fields in this StructureDescription may be inaccurate. I.e, there might have been fields that have been deleted before it was profiled or it has fields we haven't profiled.
               */
              isImprecise?: boolean;
          }
          interface TypeSet {
              /**
               * Indicates if this type description has been type Function.
               */
              isFunction: boolean;
              /**
               * Indicates if this type description has been type Undefined.
               */
              isUndefined: boolean;
              /**
               * Indicates if this type description has been type Null.
               */
              isNull: boolean;
              /**
               * Indicates if this type description has been type Boolean.
               */
              isBoolean: boolean;
              /**
               * Indicates if this type description has been type Integer.
               */
              isInteger: boolean;
              /**
               * Indicates if this type description has been type Number.
               */
              isNumber: boolean;
              /**
               * Indicates if this type description has been type String.
               */
              isString: boolean;
              /**
               * Indicates if this type description has been type Object.
               */
              isObject: boolean;
              /**
               * Indicates if this type description has been type Symbol.
               */
              isSymbol: boolean;
              /**
               * Indicates if this type description has been type BigInt.
               */
              isBigInt: boolean;
          }
          /**
           * Container for type information that has been gathered.
           */
          interface TypeDescription {
              /**
               * If true, we were able to correlate the offset successfuly with a program location. If false, the offset may be bogus or the offset may be from a CodeBlock that hasn't executed.
               */
              isValid: boolean;
              /**
               * Least common ancestor of all Constructors if the TypeDescription has seen any structures. This string is the display name of the shared constructor function.
               */
              leastCommonAncestor?: string;
              /**
               * Set of booleans for determining the aggregate type of this type description.
               */
              typeSet?: TypeSet;
              /**
               * Array of descriptions for all structures seen for this variable.
               */
              structures?: StructureDescription[];
              /**
               * If true, this indicates that no more structures are being profiled because some maximum threshold has been reached and profiling has stopped because of memory pressure.
               */
              isTruncated?: boolean;
          }
          /**
           * Describes the location of an expression we want type information for.
           */
          interface TypeLocation {
              /**
               * What kind of type information do we want (normal, function return values, 'this' statement).
               */
              typeInformationDescriptor: number;
              /**
               * sourceID uniquely identifying a script
               */
              sourceID: string;
              /**
               * character offset for assignment range
               */
              divot: number;
          }
          /**
           * From Wikipedia: a basic block is a portion of the code within a program with only one entry point and only one exit point. This type gives the location of a basic block and if that basic block has executed.
           */
          interface BasicBlock {
              /**
               * Start offset of the basic block.
               */
              startOffset: number;
              /**
               * End offset of the basic block.
               */
              endOffset: number;
              /**
               * Indicates if the basic block has executed before.
               */
              hasExecuted: boolean;
              /**
               * Indicates how many times the basic block has executed.
               */
              executionCount: number;
          }
          /**
           * Issued when new execution context is created.
           */
          type executionContextCreatedPayload = {
              /**
               * A newly created execution context.
               */
              context: ExecutionContextDescription;
          };
          /**
           * Parses JavaScript source code for errors.
           */
          type parseParameters = {
              /**
               * Source code to parse.
               */
              source: string;
          };
          type parseReturnValue = {
              /**
               * Parse result.
               */
              result: SyntaxErrorType;
              /**
               * Parse error message.
               */
              message?: string;
              /**
               * Range in the source where the error occurred.
               */
              range?: ErrorRange;
          };
          /**
           * Evaluates expression on global object.
           */
          type evaluateParameters = {
              /**
               * Expression to evaluate.
               */
              expression: string;
              /**
               * Symbolic group name that can be used to release multiple objects.
               */
              objectGroup?: string;
              /**
               * Determines whether Command Line API should be available during the evaluation.
               */
              includeCommandLineAPI?: boolean;
              /**
               * Specifies whether evaluation should stop on exceptions and mute console. Overrides setPauseOnException state.
               */
              doNotPauseOnExceptionsAndMuteConsole?: boolean;
              /**
               * Specifies in which isolated context to perform evaluation. Each content script lives in an isolated context and this parameter may be used to specify one of those contexts. If the parameter is omitted or 0 the evaluation will be performed in the context of the inspected page.
               */
              contextId?: Runtime.ExecutionContextId;
              /**
               * Whether the result is expected to be a JSON object that should be sent by value.
               */
              returnByValue?: boolean;
              /**
               * Whether preview should be generated for the result.
               */
              generatePreview?: boolean;
              /**
               * Whether the resulting value should be considered for saving in the $n history.
               */
              saveResult?: boolean;
              /**
               * Whether the expression should be considered to be in a user gesture or not.
               */
              emulateUserGesture?: boolean;
          };
          type evaluateReturnValue = {
              /**
               * Evaluation result.
               */
              result: RemoteObject;
              /**
               * True if the result was thrown during the evaluation.
               */
              wasThrown?: boolean;
              /**
               * If the result was saved, this is the $n index that can be used to access the value.
               */
              savedResultIndex?: number;
          };
          /**
           * Calls the async callback when the promise with the given ID gets settled.
           */
          type awaitPromiseParameters = {
              /**
               * Identifier of the promise.
               */
              promiseObjectId: RemoteObjectId;
              /**
               * Whether the result is expected to be a JSON object that should be sent by value.
               */
              returnByValue?: boolean;
              /**
               * Whether preview should be generated for the result.
               */
              generatePreview?: boolean;
              /**
               * Whether the resulting value should be considered for saving in the $n history.
               */
              saveResult?: boolean;
          };
          type awaitPromiseReturnValue = {
              /**
               * Evaluation result.
               */
              result: RemoteObject;
              /**
               * True if the result was thrown during the evaluation.
               */
              wasThrown?: boolean;
              /**
               * If the result was saved, this is the $n index that can be used to access the value.
               */
              savedResultIndex?: number;
          };
          /**
           * Calls function with given declaration on the given object. Object group of the result is inherited from the target object.
           */
          type callFunctionOnParameters = {
              /**
               * Identifier of the object to call function on.
               */
              objectId: RemoteObjectId;
              /**
               * Declaration of the function to call.
               */
              functionDeclaration: string;
              /**
               * Call arguments. All call arguments must belong to the same JavaScript world as the target object.
               */
              arguments?: CallArgument[];
              /**
               * Specifies whether function call should stop on exceptions and mute console. Overrides setPauseOnException state.
               */
              doNotPauseOnExceptionsAndMuteConsole?: boolean;
              /**
               * Whether the result is expected to be a JSON object which should be sent by value.
               */
              returnByValue?: boolean;
              /**
               * Whether preview should be generated for the result.
               */
              generatePreview?: boolean;
              /**
               * Whether the expression should be considered to be in a user gesture or not.
               */
              emulateUserGesture?: boolean;
          };
          type callFunctionOnReturnValue = {
              /**
               * Call result.
               */
              result: RemoteObject;
              /**
               * True if the result was thrown during the evaluation.
               */
              wasThrown?: boolean;
          };
          /**
           * Returns a preview for the given object.
           */
          type getPreviewParameters = {
              /**
               * Identifier of the object to return a preview for.
               */
              objectId: RemoteObjectId;
          };
          type getPreviewReturnValue = {
              preview: ObjectPreview;
          };
          /**
           * Returns properties of a given object. Object group of the result is inherited from the target object.
           */
          type getPropertiesParameters = {
              /**
               * Identifier of the object to return properties for.
               */
              objectId: RemoteObjectId;
              /**
               * If true, returns properties belonging only to the object itself, not to its prototype chain.
               */
              ownProperties?: boolean;
              /**
               * If provided skip to this value before collecting values. Otherwise, start at the beginning. Has no effect when the `objectId` is for a `iterator`/`WeakMap`/`WeakSet` object.
               */
              fetchStart?: number;
              /**
               * If provided only return `fetchCount` values. Otherwise, return values all the way to the end.
               */
              fetchCount?: number;
              /**
               * Whether preview should be generated for property values.
               */
              generatePreview?: boolean;
          };
          type getPropertiesReturnValue = {
              /**
               * Object properties.
               */
              properties: PropertyDescriptor[];
              /**
               * Internal object properties. Only included if `fetchStart` is 0.
               */
              internalProperties?: InternalPropertyDescriptor[];
          };
          /**
           * Returns displayable properties of a given object. Object group of the result is inherited from the target object. Displayable properties are own properties, internal properties, and native getters in the prototype chain (assumed to be bindings and treated like own properties for the frontend).
           */
          type getDisplayablePropertiesParameters = {
              /**
               * Identifier of the object to return properties for.
               */
              objectId: RemoteObjectId;
              /**
               * If provided skip to this value before collecting values. Otherwise, start at the beginning. Has no effect when the `objectId` is for a `iterator`/`WeakMap`/`WeakSet` object.
               */
              fetchStart?: number;
              /**
               * If provided only return `fetchCount` values. Otherwise, return values all the way to the end.
               */
              fetchCount?: number;
              /**
               * Whether preview should be generated for property values.
               */
              generatePreview?: boolean;
          };
          type getDisplayablePropertiesReturnValue = {
              /**
               * Object properties.
               */
              properties: PropertyDescriptor[];
              /**
               * Internal object properties. Only included if `fetchStart` is 0.
               */
              internalProperties?: InternalPropertyDescriptor[];
          };
          /**
           * Returns entries of given Map / Set collection.
           */
          type getCollectionEntriesParameters = {
              /**
               * Id of the collection to get entries for.
               */
              objectId: Runtime.RemoteObjectId;
              /**
               * Symbolic group name that can be used to release multiple. If not provided, it will be the same objectGroup as the RemoteObject determined from <code>objectId</code>. This is useful for WeakMap to release the collection entries.
               */
              objectGroup?: string;
              /**
               * If provided skip to this value before collecting values. Otherwise, start at the beginning. Has no effect when the `objectId<` is for a `iterator<`/`WeakMap<`/`WeakSet<` object.
               */
              fetchStart?: number;
              /**
               * If provided only return `fetchCount` values. Otherwise, return values all the way to the end.
               */
              fetchCount?: number;
          };
          type getCollectionEntriesReturnValue = {
              /**
               * Array of collection entries.
               */
              entries: CollectionEntry[];
          };
          /**
           * Assign a saved result index to this value.
           */
          type saveResultParameters = {
              /**
               * Id or value of the object to save.
               */
              value: CallArgument;
              /**
               * Unique id of the execution context. To specify in which execution context script evaluation should be performed. If not provided, determine from the CallArgument's objectId.
               */
              contextId?: ExecutionContextId;
          };
          type saveResultReturnValue = {
              /**
               * If the value was saved, this is the $n index that can be used to access the value.
               */
              savedResultIndex?: number;
          };
          /**
           * Creates an additional reference to all saved values in the Console using the the given string as a prefix instead of $.
           */
          type setSavedResultAliasParameters = {
              /**
               * Passing an empty/null string will clear the alias.
               */
              alias?: string;
          };
          type setSavedResultAliasReturnValue = {};
          /**
           * Releases remote object with given id.
           */
          type releaseObjectParameters = {
              /**
               * Identifier of the object to release.
               */
              objectId: RemoteObjectId;
          };
          type releaseObjectReturnValue = {};
          /**
           * Releases all remote objects that belong to a given group.
           */
          type releaseObjectGroupParameters = {
              /**
               * Symbolic object group name.
               */
              objectGroup: string;
          };
          type releaseObjectGroupReturnValue = {};
          /**
           * Enables reporting of execution contexts creation by means of <code>executionContextCreated</code> event. When the reporting gets enabled the event will be sent immediately for each existing execution context.
           */
          type enableParameters = {};
          type enableReturnValue = {};
          /**
           * Disables reporting of execution contexts creation.
           */
          type disableParameters = {};
          type disableReturnValue = {};
          /**
           * Returns detailed information on the given function.
           */
          type getRuntimeTypesForVariablesAtOffsetsParameters = {
              /**
               * An array of type locations we're requesting information for. Results are expected in the same order they're sent in.
               */
              locations: TypeLocation[];
          };
          type getRuntimeTypesForVariablesAtOffsetsReturnValue = {
              types: TypeDescription[];
          };
          /**
           * Enables type profiling on the VM.
           */
          type enableTypeProfilerParameters = {};
          type enableTypeProfilerReturnValue = {};
          /**
           * Disables type profiling on the VM.
           */
          type disableTypeProfilerParameters = {};
          type disableTypeProfilerReturnValue = {};
          /**
           * Enables control flow profiling on the VM.
           */
          type enableControlFlowProfilerParameters = {};
          type enableControlFlowProfilerReturnValue = {};
          /**
           * Disables control flow profiling on the VM.
           */
          type disableControlFlowProfilerParameters = {};
          type disableControlFlowProfilerReturnValue = {};
          /**
           * Returns a list of basic blocks for the given sourceID with information about their text ranges and whether or not they have executed.
           */
          type getBasicBlocksParameters = {
              /**
               * Indicates which sourceID information is requested for.
               */
              sourceID: string;
          };
          type getBasicBlocksReturnValue = {
              basicBlocks: BasicBlock[];
          };
      }
      /**
       * Profiler domain exposes JavaScript evaluation timing and profiling.
       */
      module ScriptProfiler {
          type EventType = "API" | "Microtask" | "Other";
          interface Event {
              startTime: number;
              endTime: number;
              type: EventType;
          }
          interface ExpressionLocation {
              /**
               * 1-based.
               */
              line: number;
              /**
               * 1-based.
               */
              column: number;
          }
          interface StackFrame {
              /**
               * Unique script identifier.
               */
              sourceID: Debugger.ScriptId;
              /**
               * A displayable name for the stack frame. i.e function name, (program), etc.
               */
              name: string;
              /**
               * -1 if unavailable. 1-based if available.
               */
              line: number;
              /**
               * -1 if unavailable. 1-based if available.
               */
              column: number;
              url: string;
              expressionLocation?: ExpressionLocation;
          }
          interface StackTrace {
              timestamp: number;
              /**
               * First array item is the bottom of the call stack and last array item is the top of the call stack.
               */
              stackFrames: StackFrame[];
          }
          interface Samples {
              stackTraces: StackTrace[];
          }
          /**
           * Tracking started.
           */
          type trackingStartPayload = {
              timestamp: number;
          };
          /**
           * Periodic tracking updates with event data.
           */
          type trackingUpdatePayload = {
              event: Event;
          };
          /**
           * Tracking stopped. Includes any buffered data during tracking, such as profiling information.
           */
          type trackingCompletePayload = {
              timestamp: number;
              /**
               * Stack traces.
               */
              samples?: Samples;
          };
          /**
           * Start tracking script evaluations.
           */
          type startTrackingParameters = {
              /**
               * Start the sampling profiler, defaults to false.
               */
              includeSamples?: boolean;
          };
          type startTrackingReturnValue = {};
          /**
           * Stop tracking script evaluations. This will produce a `trackingComplete` event.
           */
          type stopTrackingParameters = {};
          type stopTrackingReturnValue = {};
      }
      /**
       * Security domain allows the frontend to query for information relating to the security of the page (e.g. HTTPS info, TLS info, user activity, etc.).
       */
      module Security {
          /**
           * Information about a SSL connection to display in the frontend.
           */
          interface Connection {
              protocol?: string;
              cipher?: string;
          }
          /**
           * Information about a SSL certificate to display in the frontend.
           */
          interface Certificate {
              subject?: string;
              validFrom?: Network.Walltime;
              validUntil?: Network.Walltime;
              /**
               * DNS names listed on the certificate.
               */
              dnsNames?: string[];
              /**
               * IP addresses listed on the certificate.
               */
              ipAddresses?: string[];
          }
          /**
           * Security information for a given Network.Response.
           */
          interface Security {
              connection?: Connection;
              certificate?: Certificate;
          }
      }
      /**
       * Actions and events related to the inspected service worker.
       */
      module ServiceWorker {
          /**
           * ServiceWorker metadata and initial state.
           */
          interface Configuration {
              targetId: string;
              securityOrigin: string;
              /**
               * ServiceWorker main script URL.
               */
              url: string;
              /**
               * ServiceWorker main script content.
               */
              content: string;
          }
          /**
           * Returns the initialization information for this target.
           */
          type getInitializationInfoParameters = {};
          type getInitializationInfoReturnValue = {
              info: Configuration;
          };
      }
      module Target {
          /**
           * Description of a target.
           */
          interface TargetInfo {
              /**
               * Unique identifier for the target.
               */
              targetId: string;
              type: "page" | "service-worker" | "worker";
              /**
               * True value indicates that this is a provisional page target i.e. Such target may be created when current page starts cross-origin navigation. Eventually each provisional target is either committed and swaps with the current target or gets destroyed, e.g. in case of load request failure.
               */
              isProvisional?: boolean;
              /**
               * Whether the target is paused on start and has to be explicitely resumed by inspector.
               */
              isPaused?: boolean;
          }
          type targetCreatedPayload = {
              targetInfo: TargetInfo;
          };
          type targetDestroyedPayload = {
              targetId: string;
              crashed: boolean;
          };
          /**
           * This event is fired when provisional load is committed. Provisional target swaps with the current target.
           */
          type didCommitProvisionalTargetPayload = {
              /**
               * ID of the old target that is swapped with the committed one.
               */
              oldTargetId: string;
              /**
               * ID of the committed target.
               */
              newTargetId: string;
          };
          type dispatchMessageFromTargetPayload = {
              targetId: string;
              /**
               * JSON Inspector Protocol message (response or event) to be dispatched on the frontend.
               */
              message: string;
          };
          /**
           * If set to true, new targets will be paused on start waiting for resume command. Other commands can be dispatched on the target before it is resumed.
           */
          type setPauseOnStartParameters = {
              /**
               * If set to true, new targets will be paused on start waiting for resume command.
               */
              pauseOnStart: boolean;
          };
          type setPauseOnStartReturnValue = {};
          /**
           * Will resume target if it was paused on start.
           */
          type resumeParameters = {
              targetId: string;
          };
          type resumeReturnValue = {};
          /**
           * Send an Inspector Protocol message to be dispatched to a Target's agents.
           */
          type sendMessageToTargetParameters = {
              targetId: string;
              /**
               * JSON Inspector Protocol message (command) to be dispatched on the backend.
               */
              message: string;
          };
          type sendMessageToTargetReturnValue = {};
          /**
           * Reveals the target on screen.
           */
          type activateParameters = {
              targetId: string;
          };
          type activateReturnValue = {};
          /**
           * Closes the target.
           */
          type closeParameters = {
              targetId: string;
              runBeforeUnload?: boolean;
          };
          type closeReturnValue = {};
      }
      /**
       * Timeline provides its clients with instrumentation records that are generated during the page runtime. Timeline instrumentation can be started and stopped using corresponding commands. While timeline is started, it is generating timeline event records.
       */
      module Timeline {
          /**
           * Timeline record type.
           */
          type EventType = "EventDispatch" | "ScheduleStyleRecalculation" | "RecalculateStyles" | "InvalidateLayout" | "Layout" | "Paint" | "Composite" | "RenderingFrame" | "TimerInstall" | "TimerRemove" | "TimerFire" | "EvaluateScript" | "TimeStamp" | "Time" | "TimeEnd" | "FunctionCall" | "ProbeSample" | "ConsoleProfile" | "RequestAnimationFrame" | "CancelAnimationFrame" | "FireAnimationFrame" | "ObserverCallback";
          /**
           * Instrument types.
           */
          type Instrument = "ScriptProfiler" | "Timeline" | "CPU" | "Memory" | "Heap" | "Animation";
          /**
           * Timeline record contains information about the recorded activity.
           */
          interface TimelineEvent {
              /**
               * Event type.
               */
              type: EventType;
              /**
               * Event data.
               */
              data: {
                  [key: string]: string;
              };
              /**
               * Nested records.
               */
              children?: TimelineEvent[];
          }
          /**
           * Fired for every instrumentation event while timeline is started.
           */
          type eventRecordedPayload = {
              /**
               * Timeline event record data.
               */
              record: TimelineEvent;
          };
          /**
           * Fired when recording has started.
           */
          type recordingStartedPayload = {
              /**
               * Start time of this new recording.
               */
              startTime: number;
          };
          /**
           * Fired when recording has stopped.
           */
          type recordingStoppedPayload = {
              /**
               * End time of this recording.
               */
              endTime: number;
          };
          /**
           * Fired when auto capture started.
           */
          type autoCaptureStartedPayload = void;
          /**
           * Enables Timeline domain events.
           */
          type enableParameters = {};
          type enableReturnValue = {};
          /**
           * Disables Timeline domain events.
           */
          type disableParameters = {};
          type disableReturnValue = {};
          /**
           * Starts capturing instrumentation events.
           */
          type startParameters = {
              /**
               * Samples JavaScript stack traces up to <code>maxCallStackDepth</code>, defaults to 5.
               */
              maxCallStackDepth?: number;
          };
          type startReturnValue = {};
          /**
           * Stops capturing instrumentation events.
           */
          type stopParameters = {};
          type stopReturnValue = {};
          /**
           * Toggle auto capture state. If <code>true</code> the backend will disable breakpoints and start capturing on navigation. The backend will fire the <code>autoCaptureStarted</code> event when an auto capture starts. The frontend should stop the auto capture when appropriate and re-enable breakpoints.
           */
          type setAutoCaptureEnabledParameters = {
              /**
               * New auto capture state.
               */
              enabled: boolean;
          };
          type setAutoCaptureEnabledReturnValue = {};
          /**
           * Instruments to enable when capture starts on the backend (e.g. auto capture or programmatic capture).
           */
          type setInstrumentsParameters = {
              /**
               * Instruments to enable.
               */
              instruments: Instrument[];
          };
          type setInstrumentsReturnValue = {};
      }
      module Worker {
          type workerCreatedPayload = {
              workerId: string;
              url: string;
              /**
               * Id of the frame this worker belongs to.
               */
              frameId: Network.FrameId;
          };
          type workerTerminatedPayload = {
              workerId: string;
          };
          type dispatchMessageFromWorkerPayload = {
              workerId: string;
              /**
               * JSON Inspector Protocol message (response or event) to be dispatched on the frontend.
               */
              message: string;
          };
          /**
           * Enable Worker domain events.
           */
          type enableParameters = {};
          type enableReturnValue = {};
          /**
           * Disable Worker domain events.
           */
          type disableParameters = {};
          type disableReturnValue = {};
          /**
           * Sent after the frontend has sent all initialization messages and can resume this worker. This command is required to allow execution in the worker.
           */
          type initializedParameters = {
              workerId: string;
          };
          type initializedReturnValue = {};
          /**
           * Send an Inspector Protocol message to be dispatched to a Worker's agents.
           */
          type sendMessageToWorkerParameters = {
              workerId: string;
              /**
               * JSON Inspector Protocol message (command) to be dispatched on the backend.
               */
              message: string;
          };
          type sendMessageToWorkerReturnValue = {};
      }
      interface Events {
          "Animation.animationCreated": Animation.animationCreatedPayload;
          "Animation.effectChanged": Animation.effectChangedPayload;
          "Animation.targetChanged": Animation.targetChangedPayload;
          "Animation.animationDestroyed": Animation.animationDestroyedPayload;
          "Animation.trackingStart": Animation.trackingStartPayload;
          "Animation.trackingUpdate": Animation.trackingUpdatePayload;
          "Animation.trackingComplete": Animation.trackingCompletePayload;
          "ApplicationCache.applicationCacheStatusUpdated": ApplicationCache.applicationCacheStatusUpdatedPayload;
          "ApplicationCache.networkStateUpdated": ApplicationCache.networkStateUpdatedPayload;
          "Browser.extensionsEnabled": Browser.extensionsEnabledPayload;
          "Browser.extensionsDisabled": Browser.extensionsDisabledPayload;
          "CPUProfiler.trackingStart": CPUProfiler.trackingStartPayload;
          "CPUProfiler.trackingUpdate": CPUProfiler.trackingUpdatePayload;
          "CPUProfiler.trackingComplete": CPUProfiler.trackingCompletePayload;
          "CSS.mediaQueryResultChanged": CSS.mediaQueryResultChangedPayload;
          "CSS.styleSheetChanged": CSS.styleSheetChangedPayload;
          "CSS.styleSheetAdded": CSS.styleSheetAddedPayload;
          "CSS.styleSheetRemoved": CSS.styleSheetRemovedPayload;
          "Canvas.canvasAdded": Canvas.canvasAddedPayload;
          "Canvas.canvasRemoved": Canvas.canvasRemovedPayload;
          "Canvas.canvasMemoryChanged": Canvas.canvasMemoryChangedPayload;
          "Canvas.extensionEnabled": Canvas.extensionEnabledPayload;
          "Canvas.clientNodesChanged": Canvas.clientNodesChangedPayload;
          "Canvas.recordingStarted": Canvas.recordingStartedPayload;
          "Canvas.recordingProgress": Canvas.recordingProgressPayload;
          "Canvas.recordingFinished": Canvas.recordingFinishedPayload;
          "Canvas.programCreated": Canvas.programCreatedPayload;
          "Canvas.programDeleted": Canvas.programDeletedPayload;
          "Console.messageAdded": Console.messageAddedPayload;
          "Console.messageRepeatCountUpdated": Console.messageRepeatCountUpdatedPayload;
          "Console.messagesCleared": Console.messagesClearedPayload;
          "Console.heapSnapshot": Console.heapSnapshotPayload;
          "DOM.documentUpdated": DOM.documentUpdatedPayload;
          "DOM.inspect": DOM.inspectPayload;
          "DOM.setChildNodes": DOM.setChildNodesPayload;
          "DOM.attributeModified": DOM.attributeModifiedPayload;
          "DOM.attributeRemoved": DOM.attributeRemovedPayload;
          "DOM.inlineStyleInvalidated": DOM.inlineStyleInvalidatedPayload;
          "DOM.characterDataModified": DOM.characterDataModifiedPayload;
          "DOM.childNodeCountUpdated": DOM.childNodeCountUpdatedPayload;
          "DOM.childNodeInserted": DOM.childNodeInsertedPayload;
          "DOM.childNodeRemoved": DOM.childNodeRemovedPayload;
          "DOM.shadowRootPushed": DOM.shadowRootPushedPayload;
          "DOM.shadowRootPopped": DOM.shadowRootPoppedPayload;
          "DOM.customElementStateChanged": DOM.customElementStateChangedPayload;
          "DOM.pseudoElementAdded": DOM.pseudoElementAddedPayload;
          "DOM.pseudoElementRemoved": DOM.pseudoElementRemovedPayload;
          "DOM.didAddEventListener": DOM.didAddEventListenerPayload;
          "DOM.willRemoveEventListener": DOM.willRemoveEventListenerPayload;
          "DOM.didFireEvent": DOM.didFireEventPayload;
          "DOM.powerEfficientPlaybackStateChanged": DOM.powerEfficientPlaybackStateChangedPayload;
          "DOMStorage.domStorageItemsCleared": DOMStorage.domStorageItemsClearedPayload;
          "DOMStorage.domStorageItemRemoved": DOMStorage.domStorageItemRemovedPayload;
          "DOMStorage.domStorageItemAdded": DOMStorage.domStorageItemAddedPayload;
          "DOMStorage.domStorageItemUpdated": DOMStorage.domStorageItemUpdatedPayload;
          "Database.addDatabase": Database.addDatabasePayload;
          "Debugger.globalObjectCleared": Debugger.globalObjectClearedPayload;
          "Debugger.scriptParsed": Debugger.scriptParsedPayload;
          "Debugger.scriptFailedToParse": Debugger.scriptFailedToParsePayload;
          "Debugger.breakpointResolved": Debugger.breakpointResolvedPayload;
          "Debugger.paused": Debugger.pausedPayload;
          "Debugger.resumed": Debugger.resumedPayload;
          "Debugger.didSampleProbe": Debugger.didSampleProbePayload;
          "Debugger.playBreakpointActionSound": Debugger.playBreakpointActionSoundPayload;
          "Dialog.javascriptDialogOpening": Dialog.javascriptDialogOpeningPayload;
          "Heap.garbageCollected": Heap.garbageCollectedPayload;
          "Heap.trackingStart": Heap.trackingStartPayload;
          "Heap.trackingComplete": Heap.trackingCompletePayload;
          "Inspector.evaluateForTestInFrontend": Inspector.evaluateForTestInFrontendPayload;
          "Inspector.inspect": Inspector.inspectPayload;
          "Inspector.activateExtraDomains": Inspector.activateExtraDomainsPayload;
          "LayerTree.layerTreeDidChange": LayerTree.layerTreeDidChangePayload;
          "Memory.memoryPressure": Memory.memoryPressurePayload;
          "Memory.trackingStart": Memory.trackingStartPayload;
          "Memory.trackingUpdate": Memory.trackingUpdatePayload;
          "Memory.trackingComplete": Memory.trackingCompletePayload;
          "Network.requestWillBeSent": Network.requestWillBeSentPayload;
          "Network.responseReceived": Network.responseReceivedPayload;
          "Network.dataReceived": Network.dataReceivedPayload;
          "Network.loadingFinished": Network.loadingFinishedPayload;
          "Network.loadingFailed": Network.loadingFailedPayload;
          "Network.requestServedFromMemoryCache": Network.requestServedFromMemoryCachePayload;
          "Network.responseIntercepted": Network.responseInterceptedPayload;
          "Network.requestIntercepted": Network.requestInterceptedPayload;
          "Network.webSocketWillSendHandshakeRequest": Network.webSocketWillSendHandshakeRequestPayload;
          "Network.webSocketHandshakeResponseReceived": Network.webSocketHandshakeResponseReceivedPayload;
          "Network.webSocketCreated": Network.webSocketCreatedPayload;
          "Network.webSocketClosed": Network.webSocketClosedPayload;
          "Network.webSocketFrameReceived": Network.webSocketFrameReceivedPayload;
          "Network.webSocketFrameError": Network.webSocketFrameErrorPayload;
          "Network.webSocketFrameSent": Network.webSocketFrameSentPayload;
          "Page.domContentEventFired": Page.domContentEventFiredPayload;
          "Page.loadEventFired": Page.loadEventFiredPayload;
          "Page.frameNavigated": Page.frameNavigatedPayload;
          "Page.frameAttached": Page.frameAttachedPayload;
          "Page.frameDetached": Page.frameDetachedPayload;
          "Page.frameStartedLoading": Page.frameStartedLoadingPayload;
          "Page.frameStoppedLoading": Page.frameStoppedLoadingPayload;
          "Page.frameScheduledNavigation": Page.frameScheduledNavigationPayload;
          "Page.frameClearedScheduledNavigation": Page.frameClearedScheduledNavigationPayload;
          "Page.navigatedWithinDocument": Page.navigatedWithinDocumentPayload;
          "Page.defaultAppearanceDidChange": Page.defaultAppearanceDidChangePayload;
          "Page.fileChooserOpened": Page.fileChooserOpenedPayload;
          "Playwright.pageProxyCreated": Playwright.pageProxyCreatedPayload;
          "Playwright.pageProxyDestroyed": Playwright.pageProxyDestroyedPayload;
          "Playwright.windowOpen": Playwright.windowOpenPayload;
          "Playwright.provisionalLoadFailed": Playwright.provisionalLoadFailedPayload;
          "Runtime.executionContextCreated": Runtime.executionContextCreatedPayload;
          "ScriptProfiler.trackingStart": ScriptProfiler.trackingStartPayload;
          "ScriptProfiler.trackingUpdate": ScriptProfiler.trackingUpdatePayload;
          "ScriptProfiler.trackingComplete": ScriptProfiler.trackingCompletePayload;
          "Target.targetCreated": Target.targetCreatedPayload;
          "Target.targetDestroyed": Target.targetDestroyedPayload;
          "Target.didCommitProvisionalTarget": Target.didCommitProvisionalTargetPayload;
          "Target.dispatchMessageFromTarget": Target.dispatchMessageFromTargetPayload;
          "Timeline.eventRecorded": Timeline.eventRecordedPayload;
          "Timeline.recordingStarted": Timeline.recordingStartedPayload;
          "Timeline.recordingStopped": Timeline.recordingStoppedPayload;
          "Timeline.autoCaptureStarted": Timeline.autoCaptureStartedPayload;
          "Worker.workerCreated": Worker.workerCreatedPayload;
          "Worker.workerTerminated": Worker.workerTerminatedPayload;
          "Worker.dispatchMessageFromWorker": Worker.dispatchMessageFromWorkerPayload;
      }
      interface CommandParameters {
          "Animation.enable": Animation.enableParameters;
          "Animation.disable": Animation.disableParameters;
          "Animation.requestEffectTarget": Animation.requestEffectTargetParameters;
          "Animation.resolveAnimation": Animation.resolveAnimationParameters;
          "Animation.startTracking": Animation.startTrackingParameters;
          "Animation.stopTracking": Animation.stopTrackingParameters;
          "ApplicationCache.getFramesWithManifests": ApplicationCache.getFramesWithManifestsParameters;
          "ApplicationCache.enable": ApplicationCache.enableParameters;
          "ApplicationCache.disable": ApplicationCache.disableParameters;
          "ApplicationCache.getManifestForFrame": ApplicationCache.getManifestForFrameParameters;
          "ApplicationCache.getApplicationCacheForFrame": ApplicationCache.getApplicationCacheForFrameParameters;
          "Audit.setup": Audit.setupParameters;
          "Audit.run": Audit.runParameters;
          "Audit.teardown": Audit.teardownParameters;
          "Browser.enable": Browser.enableParameters;
          "Browser.disable": Browser.disableParameters;
          "CPUProfiler.startTracking": CPUProfiler.startTrackingParameters;
          "CPUProfiler.stopTracking": CPUProfiler.stopTrackingParameters;
          "CSS.enable": CSS.enableParameters;
          "CSS.disable": CSS.disableParameters;
          "CSS.getMatchedStylesForNode": CSS.getMatchedStylesForNodeParameters;
          "CSS.getInlineStylesForNode": CSS.getInlineStylesForNodeParameters;
          "CSS.getComputedStyleForNode": CSS.getComputedStyleForNodeParameters;
          "CSS.getAllStyleSheets": CSS.getAllStyleSheetsParameters;
          "CSS.getStyleSheet": CSS.getStyleSheetParameters;
          "CSS.getStyleSheetText": CSS.getStyleSheetTextParameters;
          "CSS.setStyleSheetText": CSS.setStyleSheetTextParameters;
          "CSS.setStyleText": CSS.setStyleTextParameters;
          "CSS.setRuleSelector": CSS.setRuleSelectorParameters;
          "CSS.createStyleSheet": CSS.createStyleSheetParameters;
          "CSS.addRule": CSS.addRuleParameters;
          "CSS.getSupportedCSSProperties": CSS.getSupportedCSSPropertiesParameters;
          "CSS.getSupportedSystemFontFamilyNames": CSS.getSupportedSystemFontFamilyNamesParameters;
          "CSS.forcePseudoState": CSS.forcePseudoStateParameters;
          "Canvas.enable": Canvas.enableParameters;
          "Canvas.disable": Canvas.disableParameters;
          "Canvas.requestNode": Canvas.requestNodeParameters;
          "Canvas.requestContent": Canvas.requestContentParameters;
          "Canvas.requestClientNodes": Canvas.requestClientNodesParameters;
          "Canvas.resolveContext": Canvas.resolveContextParameters;
          "Canvas.setRecordingAutoCaptureFrameCount": Canvas.setRecordingAutoCaptureFrameCountParameters;
          "Canvas.startRecording": Canvas.startRecordingParameters;
          "Canvas.stopRecording": Canvas.stopRecordingParameters;
          "Canvas.requestShaderSource": Canvas.requestShaderSourceParameters;
          "Canvas.updateShader": Canvas.updateShaderParameters;
          "Canvas.setShaderProgramDisabled": Canvas.setShaderProgramDisabledParameters;
          "Canvas.setShaderProgramHighlighted": Canvas.setShaderProgramHighlightedParameters;
          "Console.enable": Console.enableParameters;
          "Console.disable": Console.disableParameters;
          "Console.clearMessages": Console.clearMessagesParameters;
          "Console.getLoggingChannels": Console.getLoggingChannelsParameters;
          "Console.setLoggingChannelLevel": Console.setLoggingChannelLevelParameters;
          "DOM.getDocument": DOM.getDocumentParameters;
          "DOM.requestChildNodes": DOM.requestChildNodesParameters;
          "DOM.querySelector": DOM.querySelectorParameters;
          "DOM.querySelectorAll": DOM.querySelectorAllParameters;
          "DOM.setNodeName": DOM.setNodeNameParameters;
          "DOM.setNodeValue": DOM.setNodeValueParameters;
          "DOM.removeNode": DOM.removeNodeParameters;
          "DOM.setAttributeValue": DOM.setAttributeValueParameters;
          "DOM.setAttributesAsText": DOM.setAttributesAsTextParameters;
          "DOM.removeAttribute": DOM.removeAttributeParameters;
          "DOM.getSupportedEventNames": DOM.getSupportedEventNamesParameters;
          "DOM.getDataBindingsForNode": DOM.getDataBindingsForNodeParameters;
          "DOM.getAssociatedDataForNode": DOM.getAssociatedDataForNodeParameters;
          "DOM.getEventListenersForNode": DOM.getEventListenersForNodeParameters;
          "DOM.setEventListenerDisabled": DOM.setEventListenerDisabledParameters;
          "DOM.setBreakpointForEventListener": DOM.setBreakpointForEventListenerParameters;
          "DOM.removeBreakpointForEventListener": DOM.removeBreakpointForEventListenerParameters;
          "DOM.getAccessibilityPropertiesForNode": DOM.getAccessibilityPropertiesForNodeParameters;
          "DOM.getOuterHTML": DOM.getOuterHTMLParameters;
          "DOM.setOuterHTML": DOM.setOuterHTMLParameters;
          "DOM.insertAdjacentHTML": DOM.insertAdjacentHTMLParameters;
          "DOM.performSearch": DOM.performSearchParameters;
          "DOM.getSearchResults": DOM.getSearchResultsParameters;
          "DOM.discardSearchResults": DOM.discardSearchResultsParameters;
          "DOM.requestNode": DOM.requestNodeParameters;
          "DOM.setInspectModeEnabled": DOM.setInspectModeEnabledParameters;
          "DOM.highlightRect": DOM.highlightRectParameters;
          "DOM.highlightQuad": DOM.highlightQuadParameters;
          "DOM.highlightSelector": DOM.highlightSelectorParameters;
          "DOM.highlightNode": DOM.highlightNodeParameters;
          "DOM.highlightNodeList": DOM.highlightNodeListParameters;
          "DOM.hideHighlight": DOM.hideHighlightParameters;
          "DOM.highlightFrame": DOM.highlightFrameParameters;
          "DOM.pushNodeByPathToFrontend": DOM.pushNodeByPathToFrontendParameters;
          "DOM.resolveNode": DOM.resolveNodeParameters;
          "DOM.getAttributes": DOM.getAttributesParameters;
          "DOM.moveTo": DOM.moveToParameters;
          "DOM.undo": DOM.undoParameters;
          "DOM.redo": DOM.redoParameters;
          "DOM.markUndoableState": DOM.markUndoableStateParameters;
          "DOM.focus": DOM.focusParameters;
          "DOM.setInspectedNode": DOM.setInspectedNodeParameters;
          "DOM.setAllowEditingUserAgentShadowTrees": DOM.setAllowEditingUserAgentShadowTreesParameters;
          "DOM.describeNode": DOM.describeNodeParameters;
          "DOM.scrollIntoViewIfNeeded": DOM.scrollIntoViewIfNeededParameters;
          "DOM.getContentQuads": DOM.getContentQuadsParameters;
          "DOM.setInputFiles": DOM.setInputFilesParameters;
          "DOMDebugger.setDOMBreakpoint": DOMDebugger.setDOMBreakpointParameters;
          "DOMDebugger.removeDOMBreakpoint": DOMDebugger.removeDOMBreakpointParameters;
          "DOMDebugger.setEventBreakpoint": DOMDebugger.setEventBreakpointParameters;
          "DOMDebugger.removeEventBreakpoint": DOMDebugger.removeEventBreakpointParameters;
          "DOMDebugger.setURLBreakpoint": DOMDebugger.setURLBreakpointParameters;
          "DOMDebugger.removeURLBreakpoint": DOMDebugger.removeURLBreakpointParameters;
          "DOMStorage.enable": DOMStorage.enableParameters;
          "DOMStorage.disable": DOMStorage.disableParameters;
          "DOMStorage.getDOMStorageItems": DOMStorage.getDOMStorageItemsParameters;
          "DOMStorage.setDOMStorageItem": DOMStorage.setDOMStorageItemParameters;
          "DOMStorage.removeDOMStorageItem": DOMStorage.removeDOMStorageItemParameters;
          "Database.enable": Database.enableParameters;
          "Database.disable": Database.disableParameters;
          "Database.getDatabaseTableNames": Database.getDatabaseTableNamesParameters;
          "Database.executeSQL": Database.executeSQLParameters;
          "Debugger.enable": Debugger.enableParameters;
          "Debugger.disable": Debugger.disableParameters;
          "Debugger.setAsyncStackTraceDepth": Debugger.setAsyncStackTraceDepthParameters;
          "Debugger.setBreakpointsActive": Debugger.setBreakpointsActiveParameters;
          "Debugger.setBreakpointByUrl": Debugger.setBreakpointByUrlParameters;
          "Debugger.setBreakpoint": Debugger.setBreakpointParameters;
          "Debugger.removeBreakpoint": Debugger.removeBreakpointParameters;
          "Debugger.continueUntilNextRunLoop": Debugger.continueUntilNextRunLoopParameters;
          "Debugger.continueToLocation": Debugger.continueToLocationParameters;
          "Debugger.stepOver": Debugger.stepOverParameters;
          "Debugger.stepInto": Debugger.stepIntoParameters;
          "Debugger.stepOut": Debugger.stepOutParameters;
          "Debugger.pause": Debugger.pauseParameters;
          "Debugger.resume": Debugger.resumeParameters;
          "Debugger.searchInContent": Debugger.searchInContentParameters;
          "Debugger.getScriptSource": Debugger.getScriptSourceParameters;
          "Debugger.getFunctionDetails": Debugger.getFunctionDetailsParameters;
          "Debugger.setPauseOnDebuggerStatements": Debugger.setPauseOnDebuggerStatementsParameters;
          "Debugger.setPauseOnExceptions": Debugger.setPauseOnExceptionsParameters;
          "Debugger.setPauseOnAssertions": Debugger.setPauseOnAssertionsParameters;
          "Debugger.setPauseOnMicrotasks": Debugger.setPauseOnMicrotasksParameters;
          "Debugger.setPauseForInternalScripts": Debugger.setPauseForInternalScriptsParameters;
          "Debugger.evaluateOnCallFrame": Debugger.evaluateOnCallFrameParameters;
          "Debugger.setShouldBlackboxURL": Debugger.setShouldBlackboxURLParameters;
          "Dialog.enable": Dialog.enableParameters;
          "Dialog.disable": Dialog.disableParameters;
          "Dialog.handleJavaScriptDialog": Dialog.handleJavaScriptDialogParameters;
          "Emulation.setDeviceMetricsOverride": Emulation.setDeviceMetricsOverrideParameters;
          "Emulation.setJavaScriptEnabled": Emulation.setJavaScriptEnabledParameters;
          "Emulation.setAuthCredentials": Emulation.setAuthCredentialsParameters;
          "Emulation.setActiveAndFocused": Emulation.setActiveAndFocusedParameters;
          "Emulation.grantPermissions": Emulation.grantPermissionsParameters;
          "Emulation.resetPermissions": Emulation.resetPermissionsParameters;
          "Heap.enable": Heap.enableParameters;
          "Heap.disable": Heap.disableParameters;
          "Heap.gc": Heap.gcParameters;
          "Heap.snapshot": Heap.snapshotParameters;
          "Heap.startTracking": Heap.startTrackingParameters;
          "Heap.stopTracking": Heap.stopTrackingParameters;
          "Heap.getPreview": Heap.getPreviewParameters;
          "Heap.getRemoteObject": Heap.getRemoteObjectParameters;
          "IndexedDB.enable": IndexedDB.enableParameters;
          "IndexedDB.disable": IndexedDB.disableParameters;
          "IndexedDB.requestDatabaseNames": IndexedDB.requestDatabaseNamesParameters;
          "IndexedDB.requestDatabase": IndexedDB.requestDatabaseParameters;
          "IndexedDB.requestData": IndexedDB.requestDataParameters;
          "IndexedDB.clearObjectStore": IndexedDB.clearObjectStoreParameters;
          "Input.dispatchKeyEvent": Input.dispatchKeyEventParameters;
          "Input.dispatchMouseEvent": Input.dispatchMouseEventParameters;
          "Inspector.enable": Inspector.enableParameters;
          "Inspector.disable": Inspector.disableParameters;
          "Inspector.initialized": Inspector.initializedParameters;
          "LayerTree.enable": LayerTree.enableParameters;
          "LayerTree.disable": LayerTree.disableParameters;
          "LayerTree.layersForNode": LayerTree.layersForNodeParameters;
          "LayerTree.reasonsForCompositingLayer": LayerTree.reasonsForCompositingLayerParameters;
          "Memory.enable": Memory.enableParameters;
          "Memory.disable": Memory.disableParameters;
          "Memory.startTracking": Memory.startTrackingParameters;
          "Memory.stopTracking": Memory.stopTrackingParameters;
          "Network.enable": Network.enableParameters;
          "Network.disable": Network.disableParameters;
          "Network.setExtraHTTPHeaders": Network.setExtraHTTPHeadersParameters;
          "Network.getResponseBody": Network.getResponseBodyParameters;
          "Network.setResourceCachingDisabled": Network.setResourceCachingDisabledParameters;
          "Network.loadResource": Network.loadResourceParameters;
          "Network.getSerializedCertificate": Network.getSerializedCertificateParameters;
          "Network.resolveWebSocket": Network.resolveWebSocketParameters;
          "Network.setInterceptionEnabled": Network.setInterceptionEnabledParameters;
          "Network.addInterception": Network.addInterceptionParameters;
          "Network.removeInterception": Network.removeInterceptionParameters;
          "Network.interceptContinue": Network.interceptContinueParameters;
          "Network.interceptAsError": Network.interceptAsErrorParameters;
          "Network.interceptWithResponse": Network.interceptWithResponseParameters;
          "Network.setEmulateOfflineState": Network.setEmulateOfflineStateParameters;
          "Page.enable": Page.enableParameters;
          "Page.disable": Page.disableParameters;
          "Page.reload": Page.reloadParameters;
          "Page.goBack": Page.goBackParameters;
          "Page.goForward": Page.goForwardParameters;
          "Page.navigate": Page.navigateParameters;
          "Page.overrideUserAgent": Page.overrideUserAgentParameters;
          "Page.overrideSetting": Page.overrideSettingParameters;
          "Page.getCookies": Page.getCookiesParameters;
          "Page.deleteCookie": Page.deleteCookieParameters;
          "Page.getResourceTree": Page.getResourceTreeParameters;
          "Page.getResourceContent": Page.getResourceContentParameters;
          "Page.setBootstrapScript": Page.setBootstrapScriptParameters;
          "Page.searchInResource": Page.searchInResourceParameters;
          "Page.searchInResources": Page.searchInResourcesParameters;
          "Page.setShowRulers": Page.setShowRulersParameters;
          "Page.setShowPaintRects": Page.setShowPaintRectsParameters;
          "Page.setEmulatedMedia": Page.setEmulatedMediaParameters;
          "Page.setForcedAppearance": Page.setForcedAppearanceParameters;
          "Page.setTimeZone": Page.setTimeZoneParameters;
          "Page.setTouchEmulationEnabled": Page.setTouchEmulationEnabledParameters;
          "Page.snapshotNode": Page.snapshotNodeParameters;
          "Page.snapshotRect": Page.snapshotRectParameters;
          "Page.archive": Page.archiveParameters;
          "Page.insertText": Page.insertTextParameters;
          "Page.accessibilitySnapshot": Page.accessibilitySnapshotParameters;
          "Page.setInterceptFileChooserDialog": Page.setInterceptFileChooserDialogParameters;
          "Page.setDefaultBackgroundColorOverride": Page.setDefaultBackgroundColorOverrideParameters;
          "Page.createUserWorld": Page.createUserWorldParameters;
          "Page.setBypassCSP": Page.setBypassCSPParameters;
          "Page.crash": Page.crashParameters;
          "Page.setScreenSizeOverride": Page.setScreenSizeOverrideParameters;
          "Playwright.close": Playwright.closeParameters;
          "Playwright.createContext": Playwright.createContextParameters;
          "Playwright.deleteContext": Playwright.deleteContextParameters;
          "Playwright.createPage": Playwright.createPageParameters;
          "Playwright.navigate": Playwright.navigateParameters;
          "Playwright.setIgnoreCertificateErrors": Playwright.setIgnoreCertificateErrorsParameters;
          "Playwright.getAllCookies": Playwright.getAllCookiesParameters;
          "Playwright.setCookies": Playwright.setCookiesParameters;
          "Playwright.deleteAllCookies": Playwright.deleteAllCookiesParameters;
          "Playwright.setGeolocationOverride": Playwright.setGeolocationOverrideParameters;
          "Playwright.setLanguages": Playwright.setLanguagesParameters;
          "Runtime.parse": Runtime.parseParameters;
          "Runtime.evaluate": Runtime.evaluateParameters;
          "Runtime.awaitPromise": Runtime.awaitPromiseParameters;
          "Runtime.callFunctionOn": Runtime.callFunctionOnParameters;
          "Runtime.getPreview": Runtime.getPreviewParameters;
          "Runtime.getProperties": Runtime.getPropertiesParameters;
          "Runtime.getDisplayableProperties": Runtime.getDisplayablePropertiesParameters;
          "Runtime.getCollectionEntries": Runtime.getCollectionEntriesParameters;
          "Runtime.saveResult": Runtime.saveResultParameters;
          "Runtime.setSavedResultAlias": Runtime.setSavedResultAliasParameters;
          "Runtime.releaseObject": Runtime.releaseObjectParameters;
          "Runtime.releaseObjectGroup": Runtime.releaseObjectGroupParameters;
          "Runtime.enable": Runtime.enableParameters;
          "Runtime.disable": Runtime.disableParameters;
          "Runtime.getRuntimeTypesForVariablesAtOffsets": Runtime.getRuntimeTypesForVariablesAtOffsetsParameters;
          "Runtime.enableTypeProfiler": Runtime.enableTypeProfilerParameters;
          "Runtime.disableTypeProfiler": Runtime.disableTypeProfilerParameters;
          "Runtime.enableControlFlowProfiler": Runtime.enableControlFlowProfilerParameters;
          "Runtime.disableControlFlowProfiler": Runtime.disableControlFlowProfilerParameters;
          "Runtime.getBasicBlocks": Runtime.getBasicBlocksParameters;
          "ScriptProfiler.startTracking": ScriptProfiler.startTrackingParameters;
          "ScriptProfiler.stopTracking": ScriptProfiler.stopTrackingParameters;
          "ServiceWorker.getInitializationInfo": ServiceWorker.getInitializationInfoParameters;
          "Target.setPauseOnStart": Target.setPauseOnStartParameters;
          "Target.resume": Target.resumeParameters;
          "Target.sendMessageToTarget": Target.sendMessageToTargetParameters;
          "Target.activate": Target.activateParameters;
          "Target.close": Target.closeParameters;
          "Timeline.enable": Timeline.enableParameters;
          "Timeline.disable": Timeline.disableParameters;
          "Timeline.start": Timeline.startParameters;
          "Timeline.stop": Timeline.stopParameters;
          "Timeline.setAutoCaptureEnabled": Timeline.setAutoCaptureEnabledParameters;
          "Timeline.setInstruments": Timeline.setInstrumentsParameters;
          "Worker.enable": Worker.enableParameters;
          "Worker.disable": Worker.disableParameters;
          "Worker.initialized": Worker.initializedParameters;
          "Worker.sendMessageToWorker": Worker.sendMessageToWorkerParameters;
      }
      interface CommandReturnValues {
          "Animation.enable": Animation.enableReturnValue;
          "Animation.disable": Animation.disableReturnValue;
          "Animation.requestEffectTarget": Animation.requestEffectTargetReturnValue;
          "Animation.resolveAnimation": Animation.resolveAnimationReturnValue;
          "Animation.startTracking": Animation.startTrackingReturnValue;
          "Animation.stopTracking": Animation.stopTrackingReturnValue;
          "ApplicationCache.getFramesWithManifests": ApplicationCache.getFramesWithManifestsReturnValue;
          "ApplicationCache.enable": ApplicationCache.enableReturnValue;
          "ApplicationCache.disable": ApplicationCache.disableReturnValue;
          "ApplicationCache.getManifestForFrame": ApplicationCache.getManifestForFrameReturnValue;
          "ApplicationCache.getApplicationCacheForFrame": ApplicationCache.getApplicationCacheForFrameReturnValue;
          "Audit.setup": Audit.setupReturnValue;
          "Audit.run": Audit.runReturnValue;
          "Audit.teardown": Audit.teardownReturnValue;
          "Browser.enable": Browser.enableReturnValue;
          "Browser.disable": Browser.disableReturnValue;
          "CPUProfiler.startTracking": CPUProfiler.startTrackingReturnValue;
          "CPUProfiler.stopTracking": CPUProfiler.stopTrackingReturnValue;
          "CSS.enable": CSS.enableReturnValue;
          "CSS.disable": CSS.disableReturnValue;
          "CSS.getMatchedStylesForNode": CSS.getMatchedStylesForNodeReturnValue;
          "CSS.getInlineStylesForNode": CSS.getInlineStylesForNodeReturnValue;
          "CSS.getComputedStyleForNode": CSS.getComputedStyleForNodeReturnValue;
          "CSS.getAllStyleSheets": CSS.getAllStyleSheetsReturnValue;
          "CSS.getStyleSheet": CSS.getStyleSheetReturnValue;
          "CSS.getStyleSheetText": CSS.getStyleSheetTextReturnValue;
          "CSS.setStyleSheetText": CSS.setStyleSheetTextReturnValue;
          "CSS.setStyleText": CSS.setStyleTextReturnValue;
          "CSS.setRuleSelector": CSS.setRuleSelectorReturnValue;
          "CSS.createStyleSheet": CSS.createStyleSheetReturnValue;
          "CSS.addRule": CSS.addRuleReturnValue;
          "CSS.getSupportedCSSProperties": CSS.getSupportedCSSPropertiesReturnValue;
          "CSS.getSupportedSystemFontFamilyNames": CSS.getSupportedSystemFontFamilyNamesReturnValue;
          "CSS.forcePseudoState": CSS.forcePseudoStateReturnValue;
          "Canvas.enable": Canvas.enableReturnValue;
          "Canvas.disable": Canvas.disableReturnValue;
          "Canvas.requestNode": Canvas.requestNodeReturnValue;
          "Canvas.requestContent": Canvas.requestContentReturnValue;
          "Canvas.requestClientNodes": Canvas.requestClientNodesReturnValue;
          "Canvas.resolveContext": Canvas.resolveContextReturnValue;
          "Canvas.setRecordingAutoCaptureFrameCount": Canvas.setRecordingAutoCaptureFrameCountReturnValue;
          "Canvas.startRecording": Canvas.startRecordingReturnValue;
          "Canvas.stopRecording": Canvas.stopRecordingReturnValue;
          "Canvas.requestShaderSource": Canvas.requestShaderSourceReturnValue;
          "Canvas.updateShader": Canvas.updateShaderReturnValue;
          "Canvas.setShaderProgramDisabled": Canvas.setShaderProgramDisabledReturnValue;
          "Canvas.setShaderProgramHighlighted": Canvas.setShaderProgramHighlightedReturnValue;
          "Console.enable": Console.enableReturnValue;
          "Console.disable": Console.disableReturnValue;
          "Console.clearMessages": Console.clearMessagesReturnValue;
          "Console.getLoggingChannels": Console.getLoggingChannelsReturnValue;
          "Console.setLoggingChannelLevel": Console.setLoggingChannelLevelReturnValue;
          "DOM.getDocument": DOM.getDocumentReturnValue;
          "DOM.requestChildNodes": DOM.requestChildNodesReturnValue;
          "DOM.querySelector": DOM.querySelectorReturnValue;
          "DOM.querySelectorAll": DOM.querySelectorAllReturnValue;
          "DOM.setNodeName": DOM.setNodeNameReturnValue;
          "DOM.setNodeValue": DOM.setNodeValueReturnValue;
          "DOM.removeNode": DOM.removeNodeReturnValue;
          "DOM.setAttributeValue": DOM.setAttributeValueReturnValue;
          "DOM.setAttributesAsText": DOM.setAttributesAsTextReturnValue;
          "DOM.removeAttribute": DOM.removeAttributeReturnValue;
          "DOM.getSupportedEventNames": DOM.getSupportedEventNamesReturnValue;
          "DOM.getDataBindingsForNode": DOM.getDataBindingsForNodeReturnValue;
          "DOM.getAssociatedDataForNode": DOM.getAssociatedDataForNodeReturnValue;
          "DOM.getEventListenersForNode": DOM.getEventListenersForNodeReturnValue;
          "DOM.setEventListenerDisabled": DOM.setEventListenerDisabledReturnValue;
          "DOM.setBreakpointForEventListener": DOM.setBreakpointForEventListenerReturnValue;
          "DOM.removeBreakpointForEventListener": DOM.removeBreakpointForEventListenerReturnValue;
          "DOM.getAccessibilityPropertiesForNode": DOM.getAccessibilityPropertiesForNodeReturnValue;
          "DOM.getOuterHTML": DOM.getOuterHTMLReturnValue;
          "DOM.setOuterHTML": DOM.setOuterHTMLReturnValue;
          "DOM.insertAdjacentHTML": DOM.insertAdjacentHTMLReturnValue;
          "DOM.performSearch": DOM.performSearchReturnValue;
          "DOM.getSearchResults": DOM.getSearchResultsReturnValue;
          "DOM.discardSearchResults": DOM.discardSearchResultsReturnValue;
          "DOM.requestNode": DOM.requestNodeReturnValue;
          "DOM.setInspectModeEnabled": DOM.setInspectModeEnabledReturnValue;
          "DOM.highlightRect": DOM.highlightRectReturnValue;
          "DOM.highlightQuad": DOM.highlightQuadReturnValue;
          "DOM.highlightSelector": DOM.highlightSelectorReturnValue;
          "DOM.highlightNode": DOM.highlightNodeReturnValue;
          "DOM.highlightNodeList": DOM.highlightNodeListReturnValue;
          "DOM.hideHighlight": DOM.hideHighlightReturnValue;
          "DOM.highlightFrame": DOM.highlightFrameReturnValue;
          "DOM.pushNodeByPathToFrontend": DOM.pushNodeByPathToFrontendReturnValue;
          "DOM.resolveNode": DOM.resolveNodeReturnValue;
          "DOM.getAttributes": DOM.getAttributesReturnValue;
          "DOM.moveTo": DOM.moveToReturnValue;
          "DOM.undo": DOM.undoReturnValue;
          "DOM.redo": DOM.redoReturnValue;
          "DOM.markUndoableState": DOM.markUndoableStateReturnValue;
          "DOM.focus": DOM.focusReturnValue;
          "DOM.setInspectedNode": DOM.setInspectedNodeReturnValue;
          "DOM.setAllowEditingUserAgentShadowTrees": DOM.setAllowEditingUserAgentShadowTreesReturnValue;
          "DOM.describeNode": DOM.describeNodeReturnValue;
          "DOM.scrollIntoViewIfNeeded": DOM.scrollIntoViewIfNeededReturnValue;
          "DOM.getContentQuads": DOM.getContentQuadsReturnValue;
          "DOM.setInputFiles": DOM.setInputFilesReturnValue;
          "DOMDebugger.setDOMBreakpoint": DOMDebugger.setDOMBreakpointReturnValue;
          "DOMDebugger.removeDOMBreakpoint": DOMDebugger.removeDOMBreakpointReturnValue;
          "DOMDebugger.setEventBreakpoint": DOMDebugger.setEventBreakpointReturnValue;
          "DOMDebugger.removeEventBreakpoint": DOMDebugger.removeEventBreakpointReturnValue;
          "DOMDebugger.setURLBreakpoint": DOMDebugger.setURLBreakpointReturnValue;
          "DOMDebugger.removeURLBreakpoint": DOMDebugger.removeURLBreakpointReturnValue;
          "DOMStorage.enable": DOMStorage.enableReturnValue;
          "DOMStorage.disable": DOMStorage.disableReturnValue;
          "DOMStorage.getDOMStorageItems": DOMStorage.getDOMStorageItemsReturnValue;
          "DOMStorage.setDOMStorageItem": DOMStorage.setDOMStorageItemReturnValue;
          "DOMStorage.removeDOMStorageItem": DOMStorage.removeDOMStorageItemReturnValue;
          "Database.enable": Database.enableReturnValue;
          "Database.disable": Database.disableReturnValue;
          "Database.getDatabaseTableNames": Database.getDatabaseTableNamesReturnValue;
          "Database.executeSQL": Database.executeSQLReturnValue;
          "Debugger.enable": Debugger.enableReturnValue;
          "Debugger.disable": Debugger.disableReturnValue;
          "Debugger.setAsyncStackTraceDepth": Debugger.setAsyncStackTraceDepthReturnValue;
          "Debugger.setBreakpointsActive": Debugger.setBreakpointsActiveReturnValue;
          "Debugger.setBreakpointByUrl": Debugger.setBreakpointByUrlReturnValue;
          "Debugger.setBreakpoint": Debugger.setBreakpointReturnValue;
          "Debugger.removeBreakpoint": Debugger.removeBreakpointReturnValue;
          "Debugger.continueUntilNextRunLoop": Debugger.continueUntilNextRunLoopReturnValue;
          "Debugger.continueToLocation": Debugger.continueToLocationReturnValue;
          "Debugger.stepOver": Debugger.stepOverReturnValue;
          "Debugger.stepInto": Debugger.stepIntoReturnValue;
          "Debugger.stepOut": Debugger.stepOutReturnValue;
          "Debugger.pause": Debugger.pauseReturnValue;
          "Debugger.resume": Debugger.resumeReturnValue;
          "Debugger.searchInContent": Debugger.searchInContentReturnValue;
          "Debugger.getScriptSource": Debugger.getScriptSourceReturnValue;
          "Debugger.getFunctionDetails": Debugger.getFunctionDetailsReturnValue;
          "Debugger.setPauseOnDebuggerStatements": Debugger.setPauseOnDebuggerStatementsReturnValue;
          "Debugger.setPauseOnExceptions": Debugger.setPauseOnExceptionsReturnValue;
          "Debugger.setPauseOnAssertions": Debugger.setPauseOnAssertionsReturnValue;
          "Debugger.setPauseOnMicrotasks": Debugger.setPauseOnMicrotasksReturnValue;
          "Debugger.setPauseForInternalScripts": Debugger.setPauseForInternalScriptsReturnValue;
          "Debugger.evaluateOnCallFrame": Debugger.evaluateOnCallFrameReturnValue;
          "Debugger.setShouldBlackboxURL": Debugger.setShouldBlackboxURLReturnValue;
          "Dialog.enable": Dialog.enableReturnValue;
          "Dialog.disable": Dialog.disableReturnValue;
          "Dialog.handleJavaScriptDialog": Dialog.handleJavaScriptDialogReturnValue;
          "Emulation.setDeviceMetricsOverride": Emulation.setDeviceMetricsOverrideReturnValue;
          "Emulation.setJavaScriptEnabled": Emulation.setJavaScriptEnabledReturnValue;
          "Emulation.setAuthCredentials": Emulation.setAuthCredentialsReturnValue;
          "Emulation.setActiveAndFocused": Emulation.setActiveAndFocusedReturnValue;
          "Emulation.grantPermissions": Emulation.grantPermissionsReturnValue;
          "Emulation.resetPermissions": Emulation.resetPermissionsReturnValue;
          "Heap.enable": Heap.enableReturnValue;
          "Heap.disable": Heap.disableReturnValue;
          "Heap.gc": Heap.gcReturnValue;
          "Heap.snapshot": Heap.snapshotReturnValue;
          "Heap.startTracking": Heap.startTrackingReturnValue;
          "Heap.stopTracking": Heap.stopTrackingReturnValue;
          "Heap.getPreview": Heap.getPreviewReturnValue;
          "Heap.getRemoteObject": Heap.getRemoteObjectReturnValue;
          "IndexedDB.enable": IndexedDB.enableReturnValue;
          "IndexedDB.disable": IndexedDB.disableReturnValue;
          "IndexedDB.requestDatabaseNames": IndexedDB.requestDatabaseNamesReturnValue;
          "IndexedDB.requestDatabase": IndexedDB.requestDatabaseReturnValue;
          "IndexedDB.requestData": IndexedDB.requestDataReturnValue;
          "IndexedDB.clearObjectStore": IndexedDB.clearObjectStoreReturnValue;
          "Input.dispatchKeyEvent": Input.dispatchKeyEventReturnValue;
          "Input.dispatchMouseEvent": Input.dispatchMouseEventReturnValue;
          "Inspector.enable": Inspector.enableReturnValue;
          "Inspector.disable": Inspector.disableReturnValue;
          "Inspector.initialized": Inspector.initializedReturnValue;
          "LayerTree.enable": LayerTree.enableReturnValue;
          "LayerTree.disable": LayerTree.disableReturnValue;
          "LayerTree.layersForNode": LayerTree.layersForNodeReturnValue;
          "LayerTree.reasonsForCompositingLayer": LayerTree.reasonsForCompositingLayerReturnValue;
          "Memory.enable": Memory.enableReturnValue;
          "Memory.disable": Memory.disableReturnValue;
          "Memory.startTracking": Memory.startTrackingReturnValue;
          "Memory.stopTracking": Memory.stopTrackingReturnValue;
          "Network.enable": Network.enableReturnValue;
          "Network.disable": Network.disableReturnValue;
          "Network.setExtraHTTPHeaders": Network.setExtraHTTPHeadersReturnValue;
          "Network.getResponseBody": Network.getResponseBodyReturnValue;
          "Network.setResourceCachingDisabled": Network.setResourceCachingDisabledReturnValue;
          "Network.loadResource": Network.loadResourceReturnValue;
          "Network.getSerializedCertificate": Network.getSerializedCertificateReturnValue;
          "Network.resolveWebSocket": Network.resolveWebSocketReturnValue;
          "Network.setInterceptionEnabled": Network.setInterceptionEnabledReturnValue;
          "Network.addInterception": Network.addInterceptionReturnValue;
          "Network.removeInterception": Network.removeInterceptionReturnValue;
          "Network.interceptContinue": Network.interceptContinueReturnValue;
          "Network.interceptAsError": Network.interceptAsErrorReturnValue;
          "Network.interceptWithResponse": Network.interceptWithResponseReturnValue;
          "Network.setEmulateOfflineState": Network.setEmulateOfflineStateReturnValue;
          "Page.enable": Page.enableReturnValue;
          "Page.disable": Page.disableReturnValue;
          "Page.reload": Page.reloadReturnValue;
          "Page.goBack": Page.goBackReturnValue;
          "Page.goForward": Page.goForwardReturnValue;
          "Page.navigate": Page.navigateReturnValue;
          "Page.overrideUserAgent": Page.overrideUserAgentReturnValue;
          "Page.overrideSetting": Page.overrideSettingReturnValue;
          "Page.getCookies": Page.getCookiesReturnValue;
          "Page.deleteCookie": Page.deleteCookieReturnValue;
          "Page.getResourceTree": Page.getResourceTreeReturnValue;
          "Page.getResourceContent": Page.getResourceContentReturnValue;
          "Page.setBootstrapScript": Page.setBootstrapScriptReturnValue;
          "Page.searchInResource": Page.searchInResourceReturnValue;
          "Page.searchInResources": Page.searchInResourcesReturnValue;
          "Page.setShowRulers": Page.setShowRulersReturnValue;
          "Page.setShowPaintRects": Page.setShowPaintRectsReturnValue;
          "Page.setEmulatedMedia": Page.setEmulatedMediaReturnValue;
          "Page.setForcedAppearance": Page.setForcedAppearanceReturnValue;
          "Page.setTimeZone": Page.setTimeZoneReturnValue;
          "Page.setTouchEmulationEnabled": Page.setTouchEmulationEnabledReturnValue;
          "Page.snapshotNode": Page.snapshotNodeReturnValue;
          "Page.snapshotRect": Page.snapshotRectReturnValue;
          "Page.archive": Page.archiveReturnValue;
          "Page.insertText": Page.insertTextReturnValue;
          "Page.accessibilitySnapshot": Page.accessibilitySnapshotReturnValue;
          "Page.setInterceptFileChooserDialog": Page.setInterceptFileChooserDialogReturnValue;
          "Page.setDefaultBackgroundColorOverride": Page.setDefaultBackgroundColorOverrideReturnValue;
          "Page.createUserWorld": Page.createUserWorldReturnValue;
          "Page.setBypassCSP": Page.setBypassCSPReturnValue;
          "Page.crash": Page.crashReturnValue;
          "Page.setScreenSizeOverride": Page.setScreenSizeOverrideReturnValue;
          "Playwright.close": Playwright.closeReturnValue;
          "Playwright.createContext": Playwright.createContextReturnValue;
          "Playwright.deleteContext": Playwright.deleteContextReturnValue;
          "Playwright.createPage": Playwright.createPageReturnValue;
          "Playwright.navigate": Playwright.navigateReturnValue;
          "Playwright.setIgnoreCertificateErrors": Playwright.setIgnoreCertificateErrorsReturnValue;
          "Playwright.getAllCookies": Playwright.getAllCookiesReturnValue;
          "Playwright.setCookies": Playwright.setCookiesReturnValue;
          "Playwright.deleteAllCookies": Playwright.deleteAllCookiesReturnValue;
          "Playwright.setGeolocationOverride": Playwright.setGeolocationOverrideReturnValue;
          "Playwright.setLanguages": Playwright.setLanguagesReturnValue;
          "Runtime.parse": Runtime.parseReturnValue;
          "Runtime.evaluate": Runtime.evaluateReturnValue;
          "Runtime.awaitPromise": Runtime.awaitPromiseReturnValue;
          "Runtime.callFunctionOn": Runtime.callFunctionOnReturnValue;
          "Runtime.getPreview": Runtime.getPreviewReturnValue;
          "Runtime.getProperties": Runtime.getPropertiesReturnValue;
          "Runtime.getDisplayableProperties": Runtime.getDisplayablePropertiesReturnValue;
          "Runtime.getCollectionEntries": Runtime.getCollectionEntriesReturnValue;
          "Runtime.saveResult": Runtime.saveResultReturnValue;
          "Runtime.setSavedResultAlias": Runtime.setSavedResultAliasReturnValue;
          "Runtime.releaseObject": Runtime.releaseObjectReturnValue;
          "Runtime.releaseObjectGroup": Runtime.releaseObjectGroupReturnValue;
          "Runtime.enable": Runtime.enableReturnValue;
          "Runtime.disable": Runtime.disableReturnValue;
          "Runtime.getRuntimeTypesForVariablesAtOffsets": Runtime.getRuntimeTypesForVariablesAtOffsetsReturnValue;
          "Runtime.enableTypeProfiler": Runtime.enableTypeProfilerReturnValue;
          "Runtime.disableTypeProfiler": Runtime.disableTypeProfilerReturnValue;
          "Runtime.enableControlFlowProfiler": Runtime.enableControlFlowProfilerReturnValue;
          "Runtime.disableControlFlowProfiler": Runtime.disableControlFlowProfilerReturnValue;
          "Runtime.getBasicBlocks": Runtime.getBasicBlocksReturnValue;
          "ScriptProfiler.startTracking": ScriptProfiler.startTrackingReturnValue;
          "ScriptProfiler.stopTracking": ScriptProfiler.stopTrackingReturnValue;
          "ServiceWorker.getInitializationInfo": ServiceWorker.getInitializationInfoReturnValue;
          "Target.setPauseOnStart": Target.setPauseOnStartReturnValue;
          "Target.resume": Target.resumeReturnValue;
          "Target.sendMessageToTarget": Target.sendMessageToTargetReturnValue;
          "Target.activate": Target.activateReturnValue;
          "Target.close": Target.closeReturnValue;
          "Timeline.enable": Timeline.enableReturnValue;
          "Timeline.disable": Timeline.disableReturnValue;
          "Timeline.start": Timeline.startReturnValue;
          "Timeline.stop": Timeline.stopReturnValue;
          "Timeline.setAutoCaptureEnabled": Timeline.setAutoCaptureEnabledReturnValue;
          "Timeline.setInstruments": Timeline.setInstrumentsReturnValue;
          "Worker.enable": Worker.enableReturnValue;
          "Worker.disable": Worker.disableReturnValue;
          "Worker.initialized": Worker.initializedReturnValue;
          "Worker.sendMessageToWorker": Worker.sendMessageToWorkerReturnValue;
      }
  }

}
declare module 'playwright-core/webkit/wkAccessibility' {
  /**
   * Copyright (c) Microsoft Corporation.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  import * as accessibility from 'playwright-core/accessibility';
  import { WKSession } from 'playwright-core/webkit/wkConnection';
  import { Protocol } from 'playwright-core/webkit/protocol';
  import * as dom from 'playwright-core/dom';
  export function getAccessibilityTree(session: WKSession, needle?: dom.ElementHandle): Promise<{
      tree: WKAXNode;
      needle: WKAXNode | null;
  }>;
  class WKAXNode implements accessibility.AXNode {
      private _payload;
      private _children;
      constructor(payload: Protocol.Page.AXNode);
      children(): WKAXNode[];
      _findNeedle(): WKAXNode | null;
      isControl(): boolean;
      _isTextControl(): boolean;
      _name(): string;
      isInteresting(insideControl: boolean): boolean;
      _hasRendundantTextChild(): boolean;
      isLeafNode(): boolean;
      serialize(): accessibility.SerializedAXNode;
  }
  export {};

}
declare module 'playwright-core/webkit/wkBrowser' {
  /**
   * Copyright 2017 Google Inc. All rights reserved.
   * Modifications copyright (c) Microsoft Corporation.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *     http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  import { Browser } from 'playwright-core/browser';
  import { BrowserContext, BrowserContextBase, BrowserContextOptions } from 'playwright-core/browserContext';
  import * as network from 'playwright-core/network';
  import { Page } from 'playwright-core/page';
  import * as platform from 'playwright-core/platform';
  import { ConnectionTransport } from 'playwright-core/transport';
  import * as types from 'playwright-core/types';
  import { Protocol } from 'playwright-core/webkit/protocol';
  import { PageProxyMessageReceivedPayload, WKSession } from 'playwright-core/webkit/wkConnection';
  import { WKPage } from 'playwright-core/webkit/wkPage';
  export class WKBrowser extends platform.EventEmitter implements Browser {
      private readonly _connection;
      private readonly _attachToDefaultContext;
      readonly _browserSession: WKSession;
      readonly _defaultContext: WKBrowserContext;
      readonly _contexts: Map<string, WKBrowserContext>;
      readonly _wkPages: Map<string, WKPage>;
      private readonly _eventListeners;
      private _popupOpeners;
      private _firstPageCallback;
      private readonly _firstPagePromise;
      static connect(transport: ConnectionTransport, slowMo?: number, attachToDefaultContext?: boolean): Promise<WKBrowser>;
      constructor(transport: ConnectionTransport, attachToDefaultContext: boolean);
      _onDisconnect(): void;
      newContext(options?: BrowserContextOptions): Promise<BrowserContext>;
      contexts(): BrowserContext[];
      newPage(options?: BrowserContextOptions): Promise<Page>;
      _waitForFirstPageTarget(): Promise<void>;
      _onWindowOpen(payload: Protocol.Playwright.windowOpenPayload): void;
      _onPageProxyCreated(event: Protocol.Playwright.pageProxyCreatedPayload): void;
      _onPageProxyDestroyed(event: Protocol.Playwright.pageProxyDestroyedPayload): void;
      _onPageProxyMessageReceived(event: PageProxyMessageReceivedPayload): void;
      _onProvisionalLoadFailed(event: Protocol.Playwright.provisionalLoadFailedPayload): void;
      isConnected(): boolean;
      close(): Promise<void>;
      _setDebugFunction(debugFunction: (message: string) => void): void;
  }
  export class WKBrowserContext extends BrowserContextBase {
      readonly _browser: WKBrowser;
      readonly _browserContextId: string | undefined;
      readonly _evaluateOnNewDocumentSources: string[];
      constructor(browser: WKBrowser, browserContextId: string | undefined, options: BrowserContextOptions);
      _initialize(): Promise<void>;
      _wkPages(): WKPage[];
      pages(): Page[];
      newPage(): Promise<Page>;
      cookies(urls?: string | string[]): Promise<network.NetworkCookie[]>;
      addCookies(cookies: network.SetNetworkCookieParam[]): Promise<void>;
      clearCookies(): Promise<void>;
      _doGrantPermissions(origin: string, permissions: string[]): Promise<void>;
      _doClearPermissions(): Promise<void>;
      setGeolocation(geolocation: types.Geolocation | null): Promise<void>;
      setExtraHTTPHeaders(headers: network.Headers): Promise<void>;
      setOffline(offline: boolean): Promise<void>;
      setHTTPCredentials(httpCredentials: types.Credentials | null): Promise<void>;
      addInitScript(script: Function | string | {
          path?: string;
          content?: string;
      }, arg?: any): Promise<void>;
      exposeFunction(name: string, playwrightFunction: Function): Promise<void>;
      route(url: types.URLMatch, handler: network.RouteHandler): Promise<void>;
      close(): Promise<void>;
  }

}
declare module 'playwright-core/webkit/wkConnection' {
  /**
   * Copyright 2017 Google Inc. All rights reserved.
   * Modifications copyright (c) Microsoft Corporation.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *     http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  import * as platform from 'playwright-core/platform';
  import { ConnectionTransport } from 'playwright-core/transport';
  import { Protocol } from 'playwright-core/webkit/protocol';
  export const kBrowserCloseMessageId = -9999;
  export const kPageProxyMessageReceived = "kPageProxyMessageReceived";
  export type PageProxyMessageReceivedPayload = {
      pageProxyId: string;
      message: any;
  };
  export class WKConnection {
      private readonly _transport;
      private readonly _onDisconnect;
      private _lastId;
      private _closed;
      _debugProtocol: (message: string) => void;
      readonly browserSession: WKSession;
      constructor(transport: ConnectionTransport, onDisconnect: () => void);
      nextMessageId(): number;
      rawSend(message: any): void;
      private _dispatchMessage;
      _onClose(): void;
      isClosed(): boolean;
      close(): void;
  }
  export class WKSession extends platform.EventEmitter {
      connection: WKConnection;
      errorText: string;
      readonly sessionId: string;
      private _disposed;
      private readonly _rawSend;
      private readonly _callbacks;
      on: <T extends keyof Protocol.Events | symbol>(event: T, listener: (payload: T extends symbol ? any : Protocol.Events[T extends keyof Protocol.Events ? T : never]) => void) => this;
      addListener: <T extends keyof Protocol.Events | symbol>(event: T, listener: (payload: T extends symbol ? any : Protocol.Events[T extends keyof Protocol.Events ? T : never]) => void) => this;
      off: <T extends keyof Protocol.Events | symbol>(event: T, listener: (payload: T extends symbol ? any : Protocol.Events[T extends keyof Protocol.Events ? T : never]) => void) => this;
      removeListener: <T extends keyof Protocol.Events | symbol>(event: T, listener: (payload: T extends symbol ? any : Protocol.Events[T extends keyof Protocol.Events ? T : never]) => void) => this;
      once: <T extends keyof Protocol.Events | symbol>(event: T, listener: (payload: T extends symbol ? any : Protocol.Events[T extends keyof Protocol.Events ? T : never]) => void) => this;
      constructor(connection: WKConnection, sessionId: string, errorText: string, rawSend: (message: any) => void);
      send<T extends keyof Protocol.CommandParameters>(method: T, params?: Protocol.CommandParameters[T]): Promise<Protocol.CommandReturnValues[T]>;
      isDisposed(): boolean;
      dispose(): void;
      dispatchMessage(object: any): void;
  }
  export function createProtocolError(error: Error, method: string, object: {
      error: {
          message: string;
          data: any;
      };
  }): Error;
  export function rewriteError(error: Error, message: string): Error;
  export function isSwappedOutError(e: Error): boolean;

}
declare module 'playwright-core/webkit/wkExecutionContext' {
  /**
   * Copyright 2017 Google Inc. All rights reserved.
   * Modifications copyright (c) Microsoft Corporation.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *     http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  import { WKSession } from 'playwright-core/webkit/wkConnection';
  import * as js from 'playwright-core/javascript';
  export const EVALUATION_SCRIPT_URL = "__playwright_evaluation_script__";
  export class WKExecutionContext implements js.ExecutionContextDelegate {
      private _globalObjectIdPromise?;
      private readonly _session;
      readonly _contextId: number | undefined;
      private _contextDestroyedCallback;
      private readonly _executionContextDestroyedPromise;
      constructor(session: WKSession, contextId: number | undefined);
      _dispose(): void;
      evaluate(context: js.ExecutionContext, returnByValue: boolean, pageFunction: Function | string, ...args: any[]): Promise<any>;
      private _evaluateRemoteObject;
      private _serializeFunctionAndArguments;
      private _contextGlobalObjectId;
      private _returnObjectByValue;
      getProperties(handle: js.JSHandle): Promise<Map<string, js.JSHandle>>;
      releaseHandle(handle: js.JSHandle): Promise<void>;
      handleJSONValue<T>(handle: js.JSHandle<T>): Promise<T>;
      handleToString(handle: js.JSHandle, includeType: boolean): string;
  }

}
declare module 'playwright-core/webkit/wkInput' {
  /**
   * Copyright 2017 Google Inc. All rights reserved.
   * Modifications copyright (c) Microsoft Corporation.
   *
   * Licensed under the Apache License, Version 2.0 (the 'License');
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *     http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an 'AS IS' BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  import * as input from 'playwright-core/input';
  import { WKSession } from 'playwright-core/webkit/wkConnection';
  export class RawKeyboardImpl implements input.RawKeyboard {
      private readonly _pageProxySession;
      private _session?;
      constructor(session: WKSession);
      setSession(session: WKSession): void;
      keydown(modifiers: Set<input.Modifier>, code: string, keyCode: number, keyCodeWithoutLocation: number, key: string, location: number, autoRepeat: boolean, text: string | undefined): Promise<void>;
      keyup(modifiers: Set<input.Modifier>, code: string, keyCode: number, keyCodeWithoutLocation: number, key: string, location: number): Promise<void>;
      sendText(text: string): Promise<void>;
  }
  export class RawMouseImpl implements input.RawMouse {
      private readonly _pageProxySession;
      constructor(session: WKSession);
      move(x: number, y: number, button: input.Button | 'none', buttons: Set<input.Button>, modifiers: Set<input.Modifier>): Promise<void>;
      down(x: number, y: number, button: input.Button, buttons: Set<input.Button>, modifiers: Set<input.Modifier>, clickCount: number): Promise<void>;
      up(x: number, y: number, button: input.Button, buttons: Set<input.Button>, modifiers: Set<input.Modifier>, clickCount: number): Promise<void>;
  }

}
declare module 'playwright-core/webkit/wkInterceptableRequest' {
  /**
   * Copyright 2017 Google Inc. All rights reserved.
   * Modifications copyright (c) Microsoft Corporation.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *     http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  import * as frames from 'playwright-core/frames';
  import * as network from 'playwright-core/network';
  import { Protocol } from 'playwright-core/webkit/protocol';
  import { WKSession } from 'playwright-core/webkit/wkConnection';
  export class WKInterceptableRequest implements network.RouteDelegate {
      private readonly _session;
      readonly request: network.Request;
      readonly _requestId: string;
      _interceptedCallback: () => void;
      private _interceptedPromise;
      constructor(session: WKSession, allowInterception: boolean, frame: frames.Frame, event: Protocol.Network.requestWillBeSentPayload, redirectedFrom: network.Request | null, documentId: string | undefined);
      abort(errorCode: string): Promise<void>;
      fulfill(response: network.FulfillResponse): Promise<void>;
      continue(overrides: {
          method?: string;
          headers?: network.Headers;
          postData?: string;
      }): Promise<void>;
      createResponse(responsePayload: Protocol.Network.Response): network.Response;
  }

}
declare module 'playwright-core/webkit/wkPage' {
  /**
   * Copyright 2017 Google Inc. All rights reserved.
   * Modifications copyright (c) Microsoft Corporation.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *     http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  import * as frames from 'playwright-core/frames';
  import * as dom from 'playwright-core/dom';
  import * as network from 'playwright-core/network';
  import { WKSession } from 'playwright-core/webkit/wkConnection';
  import { Page, PageDelegate, PageBinding } from 'playwright-core/page';
  import { Protocol } from 'playwright-core/webkit/protocol';
  import { RawMouseImpl, RawKeyboardImpl } from 'playwright-core/webkit/wkInput';
  import * as types from 'playwright-core/types';
  import * as accessibility from 'playwright-core/accessibility';
  import * as platform from 'playwright-core/platform';
  import { WKBrowserContext } from 'playwright-core/webkit/wkBrowser';
  export class WKPage implements PageDelegate {
      readonly rawMouse: RawMouseImpl;
      readonly rawKeyboard: RawKeyboardImpl;
      _session: WKSession;
      private _provisionalPage;
      readonly _page: Page;
      private readonly _pagePromise;
      private _pagePromiseCallback;
      private readonly _pageProxySession;
      private readonly _opener;
      private readonly _requestIdToRequest;
      private readonly _workers;
      private readonly _contextIdToContext;
      private _mainFrameContextId?;
      private _sessionListeners;
      private _eventListeners;
      private readonly _evaluateOnNewDocumentSources;
      readonly _browserContext: WKBrowserContext;
      private _initialized;
      private _hasInitialAboutBlank;
      private _firstNonInitialNavigationCommittedPromise;
      private _firstNonInitialNavigationCommittedCallback;
      constructor(browserContext: WKBrowserContext, pageProxySession: WKSession, opener: WKPage | null, hasInitialAboutBlank: boolean);
      _initializedPage(): Page | null;
      private _initializePageProxySession;
      private _setSession;
      _initializeSession(session: WKSession, resourceTreeHandler: (r: Protocol.Page.getResourceTreeReturnValue) => void): Promise<void>;
      private _initializeSessionMayThrow;
      private _onDidCommitProvisionalTarget;
      private _onTargetDestroyed;
      didClose(): void;
      dispose(): void;
      dispatchMessageToSession(message: any): void;
      handleProvisionalLoadFailed(event: Protocol.Playwright.provisionalLoadFailedPayload): void;
      pageOrError(): Promise<Page | Error>;
      private _onTargetCreated;
      private _onDispatchMessageFromTarget;
      private _addSessionListeners;
      private _updateState;
      private _forAllSessions;
      private _onFrameScheduledNavigation;
      private _onFrameStoppedLoading;
      private _onLifecycleEvent;
      private _handleFrameTree;
      _onFrameAttached(frameId: string, parentFrameId: string | null): frames.Frame;
      private _onFrameNavigated;
      private _onFrameNavigatedWithinDocument;
      private _onFrameDetached;
      private _removeContextsForFrame;
      private _onExecutionContextCreated;
      navigateFrame(frame: frames.Frame, url: string, referrer: string | undefined): Promise<frames.GotoResult>;
      private _onConsoleMessage;
      _onDialog(event: Protocol.Dialog.javascriptDialogOpeningPayload): void;
      private _onFileChooserOpened;
      private static _setEmulateMedia;
      updateExtraHTTPHeaders(): Promise<void>;
      _calculateExtraHTTPHeaders(): network.Headers;
      setEmulateMedia(mediaType: types.MediaType | null, colorScheme: types.ColorScheme | null): Promise<void>;
      setViewportSize(viewportSize: types.Size): Promise<void>;
      _updateViewport(): Promise<void>;
      updateRequestInterception(): Promise<void>;
      updateOffline(): Promise<void>;
      updateHttpCredentials(): Promise<void>;
      setFileChooserIntercepted(enabled: boolean): Promise<void>;
      opener(): Promise<Page | null>;
      reload(): Promise<void>;
      goBack(): Promise<boolean>;
      goForward(): Promise<boolean>;
      exposeBinding(binding: PageBinding): Promise<void>;
      private _evaluateBindingScript;
      evaluateOnNewDocument(script: string): Promise<void>;
      private _bindingToScript;
      private _calculateBootstrapScript;
      _updateBootstrapScript(): Promise<void>;
      closePage(runBeforeUnload: boolean): Promise<void>;
      canScreenshotOutsideViewport(): boolean;
      setBackgroundColor(color?: {
          r: number;
          g: number;
          b: number;
          a: number;
      }): Promise<void>;
      takeScreenshot(format: string, documentRect: types.Rect | undefined, viewportRect: types.Rect | undefined, quality: number | undefined): Promise<platform.BufferType>;
      resetViewport(): Promise<void>;
      getContentFrame(handle: dom.ElementHandle): Promise<frames.Frame | null>;
      getOwnerFrame(handle: dom.ElementHandle): Promise<string | null>;
      isElementHandle(remoteObject: any): boolean;
      getBoundingBox(handle: dom.ElementHandle): Promise<types.Rect | null>;
      scrollRectIntoViewIfNeeded(handle: dom.ElementHandle, rect?: types.Rect): Promise<void>;
      getContentQuads(handle: dom.ElementHandle): Promise<types.Quad[] | null>;
      layoutViewport(): Promise<{
          width: number;
          height: number;
      }>;
      setInputFiles(handle: dom.ElementHandle<HTMLInputElement>, files: types.FilePayload[]): Promise<void>;
      adoptElementHandle<T extends Node>(handle: dom.ElementHandle<T>, to: dom.FrameExecutionContext): Promise<dom.ElementHandle<T>>;
      getAccessibilityTree(needle?: dom.ElementHandle): Promise<{
          tree: accessibility.AXNode;
          needle: accessibility.AXNode | null;
      }>;
      inputActionEpilogue(): Promise<void>;
      getFrameElement(frame: frames.Frame): Promise<dom.ElementHandle>;
      _onRequestWillBeSent(session: WKSession, event: Protocol.Network.requestWillBeSentPayload): void;
      private _handleRequestRedirect;
      _onRequestIntercepted(event: Protocol.Network.requestInterceptedPayload): void;
      _onResponseReceived(event: Protocol.Network.responseReceivedPayload): void;
      _onLoadingFinished(event: Protocol.Network.loadingFinishedPayload): void;
      _onLoadingFailed(event: Protocol.Network.loadingFailedPayload): void;
      _grantPermissions(origin: string, permissions: string[]): Promise<void>;
      _clearPermissions(): Promise<void>;
  }

}
declare module 'playwright-core/webkit/wkProtocolHelper' {
  /**
   * Copyright 2017 Google Inc. All rights reserved.
   * Modifications copyright (c) Microsoft Corporation.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *     http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  import { WKSession } from 'playwright-core/webkit/wkConnection';
  import { Protocol } from 'playwright-core/webkit/protocol';
  export function valueFromRemoteObject(remoteObject: Protocol.Runtime.RemoteObject): any;
  export function releaseObject(client: WKSession, remoteObject: Protocol.Runtime.RemoteObject): Promise<void>;

}
declare module 'playwright-core/webkit/wkProvisionalPage' {
  /**
   * Copyright (c) Microsoft Corporation.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  import { WKSession } from 'playwright-core/webkit/wkConnection';
  import { WKPage } from 'playwright-core/webkit/wkPage';
  export class WKProvisionalPage {
      readonly _session: WKSession;
      private readonly _wkPage;
      private _sessionListeners;
      private _mainFrameId;
      readonly initializationPromise: Promise<void>;
      constructor(session: WKSession, page: WKPage);
      dispose(): void;
      commit(): void;
      private _handleFrameTree;
  }

}
declare module 'playwright-core/webkit/wkWorkers' {
  /**
   * Copyright 2019 Microsoft Corporation All rights reserved.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *     http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  import { Page, Worker } from 'playwright-core/page';
  import { Protocol } from 'playwright-core/webkit/protocol';
  import { WKSession } from 'playwright-core/webkit/wkConnection';
  export class WKWorkers {
      private _sessionListeners;
      private _page;
      private _workerSessions;
      constructor(page: Page);
      setSession(session: WKSession): void;
      clear(): void;
      initializeSession(session: WKSession): Promise<void>;
      _onConsoleMessage(worker: Worker, event: Protocol.Console.messageAddedPayload): Promise<void>;
  }

}
declare module 'playwright-core' {
  import main = require('playwright-core/index');
  export = main;
}

/**
 * Custom modification
 */

interface CustomPlaywright {
    devices: typeof import("playwright-core/types").Devices;
    errors: { TimeoutError: typeof import('playwright-core/errors').TimeoutError};
    chromium: import('playwright-core/server/chromium').Chromium;
    firefox: import('playwright-core/server/firefox').Firefox;
    webkit: import('playwright-core/server/webkit').WebKit;
    selectors: import('playwright-core/api').Selectors;
    /**
     * Fallback for string loops to the generic BrowserType interface
     */
    [browserType: string]: import('playwright-core/server/chromium').Chromium;
}

interface RequireTypes {
    "playwright": CustomPlaywright;
    "playwright-core": CustomPlaywright;
    "playwright-video": {
        saveVideo: (page: import('playwright-core/page').Page, path: string):void
    };
}

declare function require <K extends keyof RequireTypes>(packageName: K): RequireTypes[K];
